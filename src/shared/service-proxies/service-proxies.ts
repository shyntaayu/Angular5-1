/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.12.7.0 (NJsonSchema v9.10.6.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import 'rxjs/add/observable/fromPromise';
import 'rxjs/add/observable/of';
import 'rxjs/add/observable/throw';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/catch';

import { Observable } from 'rxjs/Observable';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { Http, Headers, ResponseContentType, Response } from '@angular/http';

import * as moment from 'moment';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class AccountServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @input (optional) 
     * @return Success
     */
    isTenantAvailable(input: IsTenantAvailableInput): Observable<IsTenantAvailableOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/IsTenantAvailable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processIsTenantAvailable(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processIsTenantAvailable(response_);
                } catch (e) {
                    return <Observable<IsTenantAvailableOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<IsTenantAvailableOutput>><any>Observable.throw(response_);
        });
    }

    protected processIsTenantAvailable(response: Response): Observable<IsTenantAvailableOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? IsTenantAvailableOutput.fromJS(resultData200) : new IsTenantAvailableOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<IsTenantAvailableOutput>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    register(input: RegisterInput): Observable<RegisterOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/Register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processRegister(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processRegister(response_);
                } catch (e) {
                    return <Observable<RegisterOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<RegisterOutput>><any>Observable.throw(response_);
        });
    }

    protected processRegister(response: Response): Observable<RegisterOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RegisterOutput.fromJS(resultData200) : new RegisterOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<RegisterOutput>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    sendPasswordResetCode(input: SendPasswordResetCodeInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Account/SendPasswordResetCode";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processSendPasswordResetCode(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSendPasswordResetCode(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processSendPasswordResetCode(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    resetPassword(input: ResetPasswordInput): Observable<ResetPasswordOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/ResetPassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processResetPassword(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processResetPassword(response_);
                } catch (e) {
                    return <Observable<ResetPasswordOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResetPasswordOutput>><any>Observable.throw(response_);
        });
    }

    protected processResetPassword(response: Response): Observable<ResetPasswordOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResetPasswordOutput.fromJS(resultData200) : new ResetPasswordOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ResetPasswordOutput>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    sendEmailActivationLink(input: SendEmailActivationLinkInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Account/SendEmailActivationLink";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processSendEmailActivationLink(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSendEmailActivationLink(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processSendEmailActivationLink(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    activateEmail(input: ActivateEmailInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Account/ActivateEmail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processActivateEmail(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processActivateEmail(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processActivateEmail(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    impersonate(input: ImpersonateInput): Observable<ImpersonateOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/Impersonate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processImpersonate(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processImpersonate(response_);
                } catch (e) {
                    return <Observable<ImpersonateOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<ImpersonateOutput>><any>Observable.throw(response_);
        });
    }

    protected processImpersonate(response: Response): Observable<ImpersonateOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ImpersonateOutput.fromJS(resultData200) : new ImpersonateOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ImpersonateOutput>(<any>null);
    }

    /**
     * @return Success
     */
    backToImpersonator(): Observable<ImpersonateOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/BackToImpersonator";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processBackToImpersonator(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processBackToImpersonator(response_);
                } catch (e) {
                    return <Observable<ImpersonateOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<ImpersonateOutput>><any>Observable.throw(response_);
        });
    }

    protected processBackToImpersonator(response: Response): Observable<ImpersonateOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ImpersonateOutput.fromJS(resultData200) : new ImpersonateOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ImpersonateOutput>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    switchToLinkedAccount(input: SwitchToLinkedAccountInput): Observable<SwitchToLinkedAccountOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/SwitchToLinkedAccount";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processSwitchToLinkedAccount(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSwitchToLinkedAccount(response_);
                } catch (e) {
                    return <Observable<SwitchToLinkedAccountOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<SwitchToLinkedAccountOutput>><any>Observable.throw(response_);
        });
    }

    protected processSwitchToLinkedAccount(response: Response): Observable<SwitchToLinkedAccountOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? SwitchToLinkedAccountOutput.fromJS(resultData200) : new SwitchToLinkedAccountOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<SwitchToLinkedAccountOutput>(<any>null);
    }
}

@Injectable()
export class AuditLogServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @userName (optional) 
     * @serviceName (optional) 
     * @methodName (optional) 
     * @browserInfo (optional) 
     * @hasException (optional) 
     * @minExecutionDuration (optional) 
     * @maxExecutionDuration (optional) 
     * @sorting (optional) 
     * @return Success
     */
    getAuditLogs(startDate: moment.Moment, endDate: moment.Moment, userName: string, serviceName: string, methodName: string, browserInfo: string, hasException: boolean, minExecutionDuration: number, maxExecutionDuration: number, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfAuditLogListDto> {
        let url_ = this.baseUrl + "/api/services/app/AuditLog/GetAuditLogs?";
        if (startDate === undefined || startDate === null)
            throw new Error("The parameter 'startDate' must be defined and cannot be null.");
        else
            url_ += "StartDate=" + encodeURIComponent(startDate ? "" + startDate.toJSON() : "") + "&"; 
        if (endDate === undefined || endDate === null)
            throw new Error("The parameter 'endDate' must be defined and cannot be null.");
        else
            url_ += "EndDate=" + encodeURIComponent(endDate ? "" + endDate.toJSON() : "") + "&"; 
        if (userName !== undefined)
            url_ += "UserName=" + encodeURIComponent("" + userName) + "&"; 
        if (serviceName !== undefined)
            url_ += "ServiceName=" + encodeURIComponent("" + serviceName) + "&"; 
        if (methodName !== undefined)
            url_ += "MethodName=" + encodeURIComponent("" + methodName) + "&"; 
        if (browserInfo !== undefined)
            url_ += "BrowserInfo=" + encodeURIComponent("" + browserInfo) + "&"; 
        if (hasException !== undefined)
            url_ += "HasException=" + encodeURIComponent("" + hasException) + "&"; 
        if (minExecutionDuration !== undefined)
            url_ += "MinExecutionDuration=" + encodeURIComponent("" + minExecutionDuration) + "&"; 
        if (maxExecutionDuration !== undefined)
            url_ += "MaxExecutionDuration=" + encodeURIComponent("" + maxExecutionDuration) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount === undefined || maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' must be defined and cannot be null.");
        else
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount === undefined || skipCount === null)
            throw new Error("The parameter 'skipCount' must be defined and cannot be null.");
        else
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetAuditLogs(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAuditLogs(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfAuditLogListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfAuditLogListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAuditLogs(response: Response): Observable<PagedResultDtoOfAuditLogListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfAuditLogListDto.fromJS(resultData200) : new PagedResultDtoOfAuditLogListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<PagedResultDtoOfAuditLogListDto>(<any>null);
    }

    /**
     * @userName (optional) 
     * @serviceName (optional) 
     * @methodName (optional) 
     * @browserInfo (optional) 
     * @hasException (optional) 
     * @minExecutionDuration (optional) 
     * @maxExecutionDuration (optional) 
     * @sorting (optional) 
     * @return Success
     */
    getAuditLogsToExcel(startDate: moment.Moment, endDate: moment.Moment, userName: string, serviceName: string, methodName: string, browserInfo: string, hasException: boolean, minExecutionDuration: number, maxExecutionDuration: number, sorting: string, maxResultCount: number, skipCount: number): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/AuditLog/GetAuditLogsToExcel?";
        if (startDate === undefined || startDate === null)
            throw new Error("The parameter 'startDate' must be defined and cannot be null.");
        else
            url_ += "StartDate=" + encodeURIComponent(startDate ? "" + startDate.toJSON() : "") + "&"; 
        if (endDate === undefined || endDate === null)
            throw new Error("The parameter 'endDate' must be defined and cannot be null.");
        else
            url_ += "EndDate=" + encodeURIComponent(endDate ? "" + endDate.toJSON() : "") + "&"; 
        if (userName !== undefined)
            url_ += "UserName=" + encodeURIComponent("" + userName) + "&"; 
        if (serviceName !== undefined)
            url_ += "ServiceName=" + encodeURIComponent("" + serviceName) + "&"; 
        if (methodName !== undefined)
            url_ += "MethodName=" + encodeURIComponent("" + methodName) + "&"; 
        if (browserInfo !== undefined)
            url_ += "BrowserInfo=" + encodeURIComponent("" + browserInfo) + "&"; 
        if (hasException !== undefined)
            url_ += "HasException=" + encodeURIComponent("" + hasException) + "&"; 
        if (minExecutionDuration !== undefined)
            url_ += "MinExecutionDuration=" + encodeURIComponent("" + minExecutionDuration) + "&"; 
        if (maxExecutionDuration !== undefined)
            url_ += "MaxExecutionDuration=" + encodeURIComponent("" + maxExecutionDuration) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount === undefined || maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' must be defined and cannot be null.");
        else
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount === undefined || skipCount === null)
            throw new Error("The parameter 'skipCount' must be defined and cannot be null.");
        else
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetAuditLogsToExcel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAuditLogsToExcel(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAuditLogsToExcel(response: Response): Observable<FileDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<FileDto>(<any>null);
    }
}

@Injectable()
export class CachingServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAllCaches(): Observable<ListResultDtoOfCacheDto> {
        let url_ = this.baseUrl + "/api/services/app/Caching/GetAllCaches";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetAllCaches(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllCaches(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfCacheDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfCacheDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAllCaches(response: Response): Observable<ListResultDtoOfCacheDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfCacheDto.fromJS(resultData200) : new ListResultDtoOfCacheDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfCacheDto>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    clearCache(input: EntityDtoOfString): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Caching/ClearCache";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processClearCache(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processClearCache(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processClearCache(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    clearAllCaches(): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Caching/ClearAllCaches";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processClearAllCaches(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processClearAllCaches(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processClearAllCaches(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class ChatServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getUserChatFriendsWithSettings(): Observable<GetUserChatFriendsWithSettingsOutput> {
        let url_ = this.baseUrl + "/api/services/app/Chat/GetUserChatFriendsWithSettings";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetUserChatFriendsWithSettings(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetUserChatFriendsWithSettings(response_);
                } catch (e) {
                    return <Observable<GetUserChatFriendsWithSettingsOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetUserChatFriendsWithSettingsOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetUserChatFriendsWithSettings(response: Response): Observable<GetUserChatFriendsWithSettingsOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetUserChatFriendsWithSettingsOutput.fromJS(resultData200) : new GetUserChatFriendsWithSettingsOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetUserChatFriendsWithSettingsOutput>(<any>null);
    }

    /**
     * @tenantId (optional) 
     * @minMessageId (optional) 
     * @return Success
     */
    getUserChatMessages(tenantId: number, userId: number, minMessageId: number): Observable<ListResultDtoOfChatMessageDto> {
        let url_ = this.baseUrl + "/api/services/app/Chat/GetUserChatMessages?";
        if (tenantId !== undefined)
            url_ += "TenantId=" + encodeURIComponent("" + tenantId) + "&"; 
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined and cannot be null.");
        else
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&"; 
        if (minMessageId !== undefined)
            url_ += "MinMessageId=" + encodeURIComponent("" + minMessageId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetUserChatMessages(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetUserChatMessages(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfChatMessageDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfChatMessageDto>><any>Observable.throw(response_);
        });
    }

    protected processGetUserChatMessages(response: Response): Observable<ListResultDtoOfChatMessageDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfChatMessageDto.fromJS(resultData200) : new ListResultDtoOfChatMessageDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfChatMessageDto>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    markAllUnreadMessagesOfUserAsRead(input: MarkAllUnreadMessagesOfUserAsReadInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Chat/MarkAllUnreadMessagesOfUserAsRead";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processMarkAllUnreadMessagesOfUserAsRead(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processMarkAllUnreadMessagesOfUserAsRead(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processMarkAllUnreadMessagesOfUserAsRead(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class CommonLookupServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getEditionsForCombobox(onlyFreeItems: boolean): Observable<ListResultDtoOfSubscribableEditionComboboxItemDto> {
        let url_ = this.baseUrl + "/api/services/app/CommonLookup/GetEditionsForCombobox?";
        if (onlyFreeItems === undefined || onlyFreeItems === null)
            throw new Error("The parameter 'onlyFreeItems' must be defined and cannot be null.");
        else
            url_ += "onlyFreeItems=" + encodeURIComponent("" + onlyFreeItems) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetEditionsForCombobox(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetEditionsForCombobox(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfSubscribableEditionComboboxItemDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfSubscribableEditionComboboxItemDto>><any>Observable.throw(response_);
        });
    }

    protected processGetEditionsForCombobox(response: Response): Observable<ListResultDtoOfSubscribableEditionComboboxItemDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfSubscribableEditionComboboxItemDto.fromJS(resultData200) : new ListResultDtoOfSubscribableEditionComboboxItemDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfSubscribableEditionComboboxItemDto>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    findUsers(input: FindUsersInput): Observable<PagedResultDtoOfNameValueDto> {
        let url_ = this.baseUrl + "/api/services/app/CommonLookup/FindUsers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processFindUsers(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processFindUsers(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfNameValueDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfNameValueDto>><any>Observable.throw(response_);
        });
    }

    protected processFindUsers(response: Response): Observable<PagedResultDtoOfNameValueDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfNameValueDto.fromJS(resultData200) : new PagedResultDtoOfNameValueDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<PagedResultDtoOfNameValueDto>(<any>null);
    }

    /**
     * @return Success
     */
    getDefaultEditionName(): Observable<GetDefaultEditionNameOutput> {
        let url_ = this.baseUrl + "/api/services/app/CommonLookup/GetDefaultEditionName";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetDefaultEditionName(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDefaultEditionName(response_);
                } catch (e) {
                    return <Observable<GetDefaultEditionNameOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetDefaultEditionNameOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetDefaultEditionName(response: Response): Observable<GetDefaultEditionNameOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetDefaultEditionNameOutput.fromJS(resultData200) : new GetDefaultEditionNameOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetDefaultEditionNameOutput>(<any>null);
    }
}

@Injectable()
export class DemoUiComponentsServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @date (optional) 
     * @return Success
     */
    sendAndGetDate(date: moment.Moment): Observable<DateToStringOutput> {
        let url_ = this.baseUrl + "/api/services/app/DemoUiComponents/SendAndGetDate?";
        if (date !== undefined)
            url_ += "date=" + encodeURIComponent(date ? "" + date.toJSON() : "") + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processSendAndGetDate(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSendAndGetDate(response_);
                } catch (e) {
                    return <Observable<DateToStringOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<DateToStringOutput>><any>Observable.throw(response_);
        });
    }

    protected processSendAndGetDate(response: Response): Observable<DateToStringOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? DateToStringOutput.fromJS(resultData200) : new DateToStringOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<DateToStringOutput>(<any>null);
    }

    /**
     * @date (optional) 
     * @return Success
     */
    sendAndGetDateTime(date: moment.Moment): Observable<DateToStringOutput> {
        let url_ = this.baseUrl + "/api/services/app/DemoUiComponents/SendAndGetDateTime?";
        if (date !== undefined)
            url_ += "date=" + encodeURIComponent(date ? "" + date.toJSON() : "") + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processSendAndGetDateTime(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSendAndGetDateTime(response_);
                } catch (e) {
                    return <Observable<DateToStringOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<DateToStringOutput>><any>Observable.throw(response_);
        });
    }

    protected processSendAndGetDateTime(response: Response): Observable<DateToStringOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? DateToStringOutput.fromJS(resultData200) : new DateToStringOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<DateToStringOutput>(<any>null);
    }

    /**
     * @startDate (optional) 
     * @endDate (optional) 
     * @return Success
     */
    sendAndGetDateRange(startDate: moment.Moment, endDate: moment.Moment): Observable<DateToStringOutput> {
        let url_ = this.baseUrl + "/api/services/app/DemoUiComponents/SendAndGetDateRange?";
        if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toJSON() : "") + "&"; 
        if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toJSON() : "") + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processSendAndGetDateRange(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSendAndGetDateRange(response_);
                } catch (e) {
                    return <Observable<DateToStringOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<DateToStringOutput>><any>Observable.throw(response_);
        });
    }

    protected processSendAndGetDateRange(response: Response): Observable<DateToStringOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? DateToStringOutput.fromJS(resultData200) : new DateToStringOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<DateToStringOutput>(<any>null);
    }

    /**
     * @searchTerm (optional) 
     * @return Success
     */
    getCountries(searchTerm: string): Observable<NameValueOfString[]> {
        let url_ = this.baseUrl + "/api/services/app/DemoUiComponents/GetCountries?";
        if (searchTerm !== undefined)
            url_ += "searchTerm=" + encodeURIComponent("" + searchTerm) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetCountries(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCountries(response_);
                } catch (e) {
                    return <Observable<NameValueOfString[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<NameValueOfString[]>><any>Observable.throw(response_);
        });
    }

    protected processGetCountries(response: Response): Observable<NameValueOfString[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(NameValueOfString.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<NameValueOfString[]>(<any>null);
    }

    /**
     * @selectedCountries (optional) 
     * @return Success
     */
    sendAndGetSelectedCountries(selectedCountries: NameValueOfString[]): Observable<NameValueOfString[]> {
        let url_ = this.baseUrl + "/api/services/app/DemoUiComponents/SendAndGetSelectedCountries";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(selectedCountries);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processSendAndGetSelectedCountries(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSendAndGetSelectedCountries(response_);
                } catch (e) {
                    return <Observable<NameValueOfString[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<NameValueOfString[]>><any>Observable.throw(response_);
        });
    }

    protected processSendAndGetSelectedCountries(response: Response): Observable<NameValueOfString[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(NameValueOfString.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<NameValueOfString[]>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    sendAndGetValue(input: string): Observable<StringOutput> {
        let url_ = this.baseUrl + "/api/services/app/DemoUiComponents/SendAndGetValue?";
        if (input !== undefined)
            url_ += "input=" + encodeURIComponent("" + input) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processSendAndGetValue(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSendAndGetValue(response_);
                } catch (e) {
                    return <Observable<StringOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<StringOutput>><any>Observable.throw(response_);
        });
    }

    protected processSendAndGetValue(response: Response): Observable<StringOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? StringOutput.fromJS(resultData200) : new StringOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<StringOutput>(<any>null);
    }
}

@Injectable()
export class EditionServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getEditions(): Observable<ListResultDtoOfEditionListDto> {
        let url_ = this.baseUrl + "/api/services/app/Edition/GetEditions";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetEditions(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetEditions(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfEditionListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfEditionListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetEditions(response: Response): Observable<ListResultDtoOfEditionListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfEditionListDto.fromJS(resultData200) : new ListResultDtoOfEditionListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfEditionListDto>(<any>null);
    }

    /**
     * @id (optional) 
     * @return Success
     */
    getEditionForEdit(id: number): Observable<GetEditionEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/Edition/GetEditionForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetEditionForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetEditionForEdit(response_);
                } catch (e) {
                    return <Observable<GetEditionEditOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetEditionEditOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetEditionForEdit(response: Response): Observable<GetEditionEditOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetEditionEditOutput.fromJS(resultData200) : new GetEditionEditOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetEditionEditOutput>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    createOrUpdateEdition(input: CreateOrUpdateEditionDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Edition/CreateOrUpdateEdition";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateOrUpdateEdition(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateEdition(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateEdition(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteEdition(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Edition/DeleteEdition?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processDeleteEdition(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteEdition(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteEdition(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @selectedEditionId (optional) 
     * @return Success
     */
    getEditionComboboxItems(selectedEditionId: number, addAllItem: boolean, onlyFreeItems: boolean): Observable<SubscribableEditionComboboxItemDto[]> {
        let url_ = this.baseUrl + "/api/services/app/Edition/GetEditionComboboxItems?";
        if (selectedEditionId !== undefined)
            url_ += "selectedEditionId=" + encodeURIComponent("" + selectedEditionId) + "&"; 
        if (addAllItem === undefined || addAllItem === null)
            throw new Error("The parameter 'addAllItem' must be defined and cannot be null.");
        else
            url_ += "addAllItem=" + encodeURIComponent("" + addAllItem) + "&"; 
        if (onlyFreeItems === undefined || onlyFreeItems === null)
            throw new Error("The parameter 'onlyFreeItems' must be defined and cannot be null.");
        else
            url_ += "onlyFreeItems=" + encodeURIComponent("" + onlyFreeItems) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetEditionComboboxItems(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetEditionComboboxItems(response_);
                } catch (e) {
                    return <Observable<SubscribableEditionComboboxItemDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<SubscribableEditionComboboxItemDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetEditionComboboxItems(response: Response): Observable<SubscribableEditionComboboxItemDto[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(SubscribableEditionComboboxItemDto.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<SubscribableEditionComboboxItemDto[]>(<any>null);
    }
}

@Injectable()
export class FilesHelperServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @filename (optional) 
     * @oldPath (optional) 
     * @newPath (optional) 
     * @return Success
     */
    moveFiles(filename: string, oldPath: string, newPath: string): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/FilesHelper/MoveFiles?";
        if (filename !== undefined)
            url_ += "filename=" + encodeURIComponent("" + filename) + "&"; 
        if (oldPath !== undefined)
            url_ += "oldPath=" + encodeURIComponent("" + oldPath) + "&"; 
        if (newPath !== undefined)
            url_ += "newPath=" + encodeURIComponent("" + newPath) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processMoveFiles(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processMoveFiles(response_);
                } catch (e) {
                    return <Observable<string>><any>Observable.throw(e);
                }
            } else
                return <Observable<string>><any>Observable.throw(response_);
        });
    }

    protected processMoveFiles(response: Response): Observable<string> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<string>(<any>null);
    }
}

@Injectable()
export class FriendshipServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @input (optional) 
     * @return Success
     */
    createFriendshipRequest(input: CreateFriendshipRequestInput): Observable<FriendDto> {
        let url_ = this.baseUrl + "/api/services/app/Friendship/CreateFriendshipRequest";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateFriendshipRequest(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateFriendshipRequest(response_);
                } catch (e) {
                    return <Observable<FriendDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FriendDto>><any>Observable.throw(response_);
        });
    }

    protected processCreateFriendshipRequest(response: Response): Observable<FriendDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? FriendDto.fromJS(resultData200) : new FriendDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<FriendDto>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    createFriendshipRequestByUserName(input: CreateFriendshipRequestByUserNameInput): Observable<FriendDto> {
        let url_ = this.baseUrl + "/api/services/app/Friendship/CreateFriendshipRequestByUserName";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateFriendshipRequestByUserName(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateFriendshipRequestByUserName(response_);
                } catch (e) {
                    return <Observable<FriendDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FriendDto>><any>Observable.throw(response_);
        });
    }

    protected processCreateFriendshipRequestByUserName(response: Response): Observable<FriendDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? FriendDto.fromJS(resultData200) : new FriendDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<FriendDto>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    blockUser(input: BlockUserInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Friendship/BlockUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processBlockUser(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processBlockUser(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processBlockUser(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    unblockUser(input: UnblockUserInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Friendship/UnblockUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUnblockUser(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUnblockUser(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUnblockUser(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    acceptFriendshipRequest(input: AcceptFriendshipRequestInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Friendship/AcceptFriendshipRequest";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processAcceptFriendshipRequest(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processAcceptFriendshipRequest(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processAcceptFriendshipRequest(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class GeneratePriceServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getMsUnitByClusterID(clusterID: number, projectID: number): Observable<GetMsUnitByClusterIDListDto[]> {
        let url_ = this.baseUrl + "/api/services/app/GeneratePrice/GetMsUnitByClusterID?";
        if (clusterID === undefined || clusterID === null)
            throw new Error("The parameter 'clusterID' must be defined and cannot be null.");
        else
            url_ += "clusterID=" + encodeURIComponent("" + clusterID) + "&"; 
        if (projectID === undefined || projectID === null)
            throw new Error("The parameter 'projectID' must be defined and cannot be null.");
        else
            url_ += "projectID=" + encodeURIComponent("" + projectID) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetMsUnitByClusterID(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMsUnitByClusterID(response_);
                } catch (e) {
                    return <Observable<GetMsUnitByClusterIDListDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetMsUnitByClusterIDListDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetMsUnitByClusterID(response: Response): Observable<GetMsUnitByClusterIDListDto[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(GetMsUnitByClusterIDListDto.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetMsUnitByClusterIDListDto[]>(<any>null);
    }

    /**
     * @return Success
     */
    getMsUnitByProjectCluster(projectID: number, clusterID: number): Observable<GetMsUnitByProjectClusterDto[]> {
        let url_ = this.baseUrl + "/api/services/app/GeneratePrice/GetMsUnitByProjectCluster?";
        if (projectID === undefined || projectID === null)
            throw new Error("The parameter 'projectID' must be defined and cannot be null.");
        else
            url_ += "projectID=" + encodeURIComponent("" + projectID) + "&"; 
        if (clusterID === undefined || clusterID === null)
            throw new Error("The parameter 'clusterID' must be defined and cannot be null.");
        else
            url_ += "clusterID=" + encodeURIComponent("" + clusterID) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetMsUnitByProjectCluster(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMsUnitByProjectCluster(response_);
                } catch (e) {
                    return <Observable<GetMsUnitByProjectClusterDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetMsUnitByProjectClusterDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetMsUnitByProjectCluster(response: Response): Observable<GetMsUnitByProjectClusterDto[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(GetMsUnitByProjectClusterDto.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetMsUnitByProjectClusterDto[]>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    generateExcelUploadPriceList(input: GetMsUnitByProjectIdClusterIdDto): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/GeneratePrice/GenerateExcelUploadPriceList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGenerateExcelUploadPriceList(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGenerateExcelUploadPriceList(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processGenerateExcelUploadPriceList(response: Response): Observable<FileDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<FileDto>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    generateExcelUploadGrossPrice(input: GetMsUnitByClusterIdInputListDto): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/GeneratePrice/GenerateExcelUploadGrossPrice";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGenerateExcelUploadGrossPrice(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGenerateExcelUploadGrossPrice(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processGenerateExcelUploadGrossPrice(response: Response): Observable<FileDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<FileDto>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    exportToExcelUploadGrossPrice(input: ExportToExcelGeneratePriceListDto[]): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/GeneratePrice/ExportToExcelUploadGrossPrice";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processExportToExcelUploadGrossPrice(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processExportToExcelUploadGrossPrice(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processExportToExcelUploadGrossPrice(response: Response): Observable<FileDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<FileDto>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    exportToExcelUploadPriceList(input: ExportToExcelUploadPriceListDto[]): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/GeneratePrice/ExportToExcelUploadPriceList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processExportToExcelUploadPriceList(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processExportToExcelUploadPriceList(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processExportToExcelUploadPriceList(response: Response): Observable<FileDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<FileDto>(<any>null);
    }

    /**
     * @return Success
     */
    getGeneratePriceListTermByTermMainID(termMainID: number): Observable<GetGeneratePriceListTermListDto[]> {
        let url_ = this.baseUrl + "/api/services/app/GeneratePrice/GetGeneratePriceListTermByTermMainID?";
        if (termMainID === undefined || termMainID === null)
            throw new Error("The parameter 'termMainID' must be defined and cannot be null.");
        else
            url_ += "termMainID=" + encodeURIComponent("" + termMainID) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetGeneratePriceListTermByTermMainID(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetGeneratePriceListTermByTermMainID(response_);
                } catch (e) {
                    return <Observable<GetGeneratePriceListTermListDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetGeneratePriceListTermListDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetGeneratePriceListTermByTermMainID(response: Response): Observable<GetGeneratePriceListTermListDto[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(GetGeneratePriceListTermListDto.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetGeneratePriceListTermListDto[]>(<any>null);
    }
}

@Injectable()
export class HostDashboardServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getDashboardStatisticsData(incomeStatisticsDateInterval: IncomeStatisticsDateInterval, startDate: moment.Moment, endDate: moment.Moment): Observable<HostDashboardData> {
        let url_ = this.baseUrl + "/api/services/app/HostDashboard/GetDashboardStatisticsData?";
        if (incomeStatisticsDateInterval === undefined || incomeStatisticsDateInterval === null)
            throw new Error("The parameter 'incomeStatisticsDateInterval' must be defined and cannot be null.");
        else
            url_ += "IncomeStatisticsDateInterval=" + encodeURIComponent("" + incomeStatisticsDateInterval) + "&"; 
        if (startDate === undefined || startDate === null)
            throw new Error("The parameter 'startDate' must be defined and cannot be null.");
        else
            url_ += "StartDate=" + encodeURIComponent(startDate ? "" + startDate.toJSON() : "") + "&"; 
        if (endDate === undefined || endDate === null)
            throw new Error("The parameter 'endDate' must be defined and cannot be null.");
        else
            url_ += "EndDate=" + encodeURIComponent(endDate ? "" + endDate.toJSON() : "") + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetDashboardStatisticsData(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDashboardStatisticsData(response_);
                } catch (e) {
                    return <Observable<HostDashboardData>><any>Observable.throw(e);
                }
            } else
                return <Observable<HostDashboardData>><any>Observable.throw(response_);
        });
    }

    protected processGetDashboardStatisticsData(response: Response): Observable<HostDashboardData> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? HostDashboardData.fromJS(resultData200) : new HostDashboardData();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<HostDashboardData>(<any>null);
    }

    /**
     * @return Success
     */
    getIncomeStatistics(incomeStatisticsDateInterval: IncomeStatisticsDateInterval2, startDate: moment.Moment, endDate: moment.Moment): Observable<GetIncomeStatisticsDataOutput> {
        let url_ = this.baseUrl + "/api/services/app/HostDashboard/GetIncomeStatistics?";
        if (incomeStatisticsDateInterval === undefined || incomeStatisticsDateInterval === null)
            throw new Error("The parameter 'incomeStatisticsDateInterval' must be defined and cannot be null.");
        else
            url_ += "IncomeStatisticsDateInterval=" + encodeURIComponent("" + incomeStatisticsDateInterval) + "&"; 
        if (startDate === undefined || startDate === null)
            throw new Error("The parameter 'startDate' must be defined and cannot be null.");
        else
            url_ += "StartDate=" + encodeURIComponent(startDate ? "" + startDate.toJSON() : "") + "&"; 
        if (endDate === undefined || endDate === null)
            throw new Error("The parameter 'endDate' must be defined and cannot be null.");
        else
            url_ += "EndDate=" + encodeURIComponent(endDate ? "" + endDate.toJSON() : "") + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetIncomeStatistics(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetIncomeStatistics(response_);
                } catch (e) {
                    return <Observable<GetIncomeStatisticsDataOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetIncomeStatisticsDataOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetIncomeStatistics(response: Response): Observable<GetIncomeStatisticsDataOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetIncomeStatisticsDataOutput.fromJS(resultData200) : new GetIncomeStatisticsDataOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetIncomeStatisticsDataOutput>(<any>null);
    }

    /**
     * @return Success
     */
    getEditionTenantStatistics(startDate: moment.Moment, endDate: moment.Moment): Observable<GetEditionTenantStatisticsOutput> {
        let url_ = this.baseUrl + "/api/services/app/HostDashboard/GetEditionTenantStatistics?";
        if (startDate === undefined || startDate === null)
            throw new Error("The parameter 'startDate' must be defined and cannot be null.");
        else
            url_ += "StartDate=" + encodeURIComponent(startDate ? "" + startDate.toJSON() : "") + "&"; 
        if (endDate === undefined || endDate === null)
            throw new Error("The parameter 'endDate' must be defined and cannot be null.");
        else
            url_ += "EndDate=" + encodeURIComponent(endDate ? "" + endDate.toJSON() : "") + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetEditionTenantStatistics(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetEditionTenantStatistics(response_);
                } catch (e) {
                    return <Observable<GetEditionTenantStatisticsOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetEditionTenantStatisticsOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetEditionTenantStatistics(response: Response): Observable<GetEditionTenantStatisticsOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetEditionTenantStatisticsOutput.fromJS(resultData200) : new GetEditionTenantStatisticsOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetEditionTenantStatisticsOutput>(<any>null);
    }
}

@Injectable()
export class HostSettingsServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAllSettings(): Observable<HostSettingsEditDto> {
        let url_ = this.baseUrl + "/api/services/app/HostSettings/GetAllSettings";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetAllSettings(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllSettings(response_);
                } catch (e) {
                    return <Observable<HostSettingsEditDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<HostSettingsEditDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAllSettings(response: Response): Observable<HostSettingsEditDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? HostSettingsEditDto.fromJS(resultData200) : new HostSettingsEditDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<HostSettingsEditDto>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    updateAllSettings(input: HostSettingsEditDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/HostSettings/UpdateAllSettings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUpdateAllSettings(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateAllSettings(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateAllSettings(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    sendTestEmail(input: SendTestEmailInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/HostSettings/SendTestEmail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processSendTestEmail(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSendTestEmail(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processSendTestEmail(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class IDTypeServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAllIDTypeList(): Observable<ListResultDtoOfGetAllIDTypeListDto> {
        let url_ = this.baseUrl + "/api/services/app/IDType/GetAllIDTypeList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetAllIDTypeList(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllIDTypeList(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetAllIDTypeListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetAllIDTypeListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAllIDTypeList(response: Response): Observable<ListResultDtoOfGetAllIDTypeListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetAllIDTypeListDto.fromJS(resultData200) : new ListResultDtoOfGetAllIDTypeListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetAllIDTypeListDto>(<any>null);
    }
}

@Injectable()
export class InstallServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @input (optional) 
     * @return Success
     */
    setup(input: InstallDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Install/Setup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processSetup(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSetup(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processSetup(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getAppSettingsJson(): Observable<AppSettingsJsonDto> {
        let url_ = this.baseUrl + "/api/services/app/Install/GetAppSettingsJson";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetAppSettingsJson(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAppSettingsJson(response_);
                } catch (e) {
                    return <Observable<AppSettingsJsonDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AppSettingsJsonDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAppSettingsJson(response: Response): Observable<AppSettingsJsonDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AppSettingsJsonDto.fromJS(resultData200) : new AppSettingsJsonDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<AppSettingsJsonDto>(<any>null);
    }

    /**
     * @return Success
     */
    checkDatabase(): Observable<CheckDatabaseOutput> {
        let url_ = this.baseUrl + "/api/services/app/Install/CheckDatabase";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCheckDatabase(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCheckDatabase(response_);
                } catch (e) {
                    return <Observable<CheckDatabaseOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<CheckDatabaseOutput>><any>Observable.throw(response_);
        });
    }

    protected processCheckDatabase(response: Response): Observable<CheckDatabaseOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? CheckDatabaseOutput.fromJS(resultData200) : new CheckDatabaseOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<CheckDatabaseOutput>(<any>null);
    }
}

@Injectable()
export class InvoiceServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getInvoiceInfo(id: number): Observable<InvoiceDto> {
        let url_ = this.baseUrl + "/api/services/app/Invoice/GetInvoiceInfo?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetInvoiceInfo(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetInvoiceInfo(response_);
                } catch (e) {
                    return <Observable<InvoiceDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<InvoiceDto>><any>Observable.throw(response_);
        });
    }

    protected processGetInvoiceInfo(response: Response): Observable<InvoiceDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? InvoiceDto.fromJS(resultData200) : new InvoiceDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<InvoiceDto>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    createInvoice(input: CreateInvoiceDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Invoice/CreateInvoice";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateInvoice(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateInvoice(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateInvoice(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class LanguageServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getLanguages(): Observable<GetLanguagesOutput> {
        let url_ = this.baseUrl + "/api/services/app/Language/GetLanguages";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetLanguages(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetLanguages(response_);
                } catch (e) {
                    return <Observable<GetLanguagesOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetLanguagesOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetLanguages(response: Response): Observable<GetLanguagesOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetLanguagesOutput.fromJS(resultData200) : new GetLanguagesOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetLanguagesOutput>(<any>null);
    }

    /**
     * @id (optional) 
     * @return Success
     */
    getLanguageForEdit(id: number): Observable<GetLanguageForEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/Language/GetLanguageForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetLanguageForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetLanguageForEdit(response_);
                } catch (e) {
                    return <Observable<GetLanguageForEditOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetLanguageForEditOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetLanguageForEdit(response: Response): Observable<GetLanguageForEditOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetLanguageForEditOutput.fromJS(resultData200) : new GetLanguageForEditOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetLanguageForEditOutput>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    createOrUpdateLanguage(input: CreateOrUpdateLanguageInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Language/CreateOrUpdateLanguage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateOrUpdateLanguage(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateLanguage(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateLanguage(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteLanguage(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Language/DeleteLanguage?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processDeleteLanguage(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteLanguage(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteLanguage(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    setDefaultLanguage(input: SetDefaultLanguageInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Language/SetDefaultLanguage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processSetDefaultLanguage(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSetDefaultLanguage(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processSetDefaultLanguage(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @sorting (optional) 
     * @baseLanguageName (optional) 
     * @targetValueFilter (optional) 
     * @filterText (optional) 
     * @return Success
     */
    getLanguageTexts(maxResultCount: number, skipCount: number, sorting: string, sourceName: string, baseLanguageName: string, targetLanguageName: string, targetValueFilter: string, filterText: string): Observable<PagedResultDtoOfLanguageTextListDto> {
        let url_ = this.baseUrl + "/api/services/app/Language/GetLanguageTexts?";
        if (maxResultCount === undefined || maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' must be defined and cannot be null.");
        else
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount === undefined || skipCount === null)
            throw new Error("The parameter 'skipCount' must be defined and cannot be null.");
        else
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (sourceName === undefined || sourceName === null)
            throw new Error("The parameter 'sourceName' must be defined and cannot be null.");
        else
            url_ += "SourceName=" + encodeURIComponent("" + sourceName) + "&"; 
        if (baseLanguageName !== undefined)
            url_ += "BaseLanguageName=" + encodeURIComponent("" + baseLanguageName) + "&"; 
        if (targetLanguageName === undefined || targetLanguageName === null)
            throw new Error("The parameter 'targetLanguageName' must be defined and cannot be null.");
        else
            url_ += "TargetLanguageName=" + encodeURIComponent("" + targetLanguageName) + "&"; 
        if (targetValueFilter !== undefined)
            url_ += "TargetValueFilter=" + encodeURIComponent("" + targetValueFilter) + "&"; 
        if (filterText !== undefined)
            url_ += "FilterText=" + encodeURIComponent("" + filterText) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetLanguageTexts(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetLanguageTexts(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfLanguageTextListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfLanguageTextListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetLanguageTexts(response: Response): Observable<PagedResultDtoOfLanguageTextListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfLanguageTextListDto.fromJS(resultData200) : new PagedResultDtoOfLanguageTextListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<PagedResultDtoOfLanguageTextListDto>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    updateLanguageText(input: UpdateLanguageTextInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Language/UpdateLanguageText";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUpdateLanguageText(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateLanguageText(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateLanguageText(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class LkAddrTypeServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getLkAddrTypeDropdown(): Observable<ListResultDtoOfGetLkAddrTypeDropdownListDto> {
        let url_ = this.baseUrl + "/api/services/app/LkAddrType/GetLkAddrTypeDropdown";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetLkAddrTypeDropdown(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetLkAddrTypeDropdown(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetLkAddrTypeDropdownListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetLkAddrTypeDropdownListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetLkAddrTypeDropdown(response: Response): Observable<ListResultDtoOfGetLkAddrTypeDropdownListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetLkAddrTypeDropdownListDto.fromJS(resultData200) : new ListResultDtoOfGetLkAddrTypeDropdownListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetLkAddrTypeDropdownListDto>(<any>null);
    }
}

@Injectable()
export class LkBankTypeServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAllLkBankTypeList(): Observable<ListResultDtoOfGetAllBankTypeListDto> {
        let url_ = this.baseUrl + "/api/services/app/LkBankType/GetAllLkBankTypeList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetAllLkBankTypeList(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllLkBankTypeList(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetAllBankTypeListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetAllBankTypeListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAllLkBankTypeList(response: Response): Observable<ListResultDtoOfGetAllBankTypeListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetAllBankTypeListDto.fromJS(resultData200) : new ListResultDtoOfGetAllBankTypeListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetAllBankTypeListDto>(<any>null);
    }
}

@Injectable()
export class LkBloodServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAllLkBloodList(): Observable<ListResultDtoOfGetAllBloodListDto> {
        let url_ = this.baseUrl + "/api/services/app/LkBlood/GetAllLkBloodList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetAllLkBloodList(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllLkBloodList(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetAllBloodListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetAllBloodListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAllLkBloodList(response: Response): Observable<ListResultDtoOfGetAllBloodListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetAllBloodListDto.fromJS(resultData200) : new ListResultDtoOfGetAllBloodListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetAllBloodListDto>(<any>null);
    }
}

@Injectable()
export class LkCountryServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAllLkCountryList(): Observable<ListResultDtoOfGetAllCountryListDto> {
        let url_ = this.baseUrl + "/api/services/app/LkCountry/GetAllLkCountryList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetAllLkCountryList(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllLkCountryList(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetAllCountryListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetAllCountryListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAllLkCountryList(response: Response): Observable<ListResultDtoOfGetAllCountryListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetAllCountryListDto.fromJS(resultData200) : new ListResultDtoOfGetAllCountryListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetAllCountryListDto>(<any>null);
    }
}

@Injectable()
export class LkFacingServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAllMsFacing(): Observable<ListResultDtoOfGetAllMsFacingList> {
        let url_ = this.baseUrl + "/api/services/app/LkFacing/GetAllMsFacing";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetAllMsFacing(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllMsFacing(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetAllMsFacingList>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetAllMsFacingList>><any>Observable.throw(response_);
        });
    }

    protected processGetAllMsFacing(response: Response): Observable<ListResultDtoOfGetAllMsFacingList> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetAllMsFacingList.fromJS(resultData200) : new ListResultDtoOfGetAllMsFacingList();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetAllMsFacingList>(<any>null);
    }
}

@Injectable()
export class LkFamilyStatusServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getLkFamilyStatusDropdown(): Observable<ListResultDtoOfGetLkFamilyStatusDropdownListDto> {
        let url_ = this.baseUrl + "/api/services/app/LkFamilyStatus/GetLkFamilyStatusDropdown";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetLkFamilyStatusDropdown(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetLkFamilyStatusDropdown(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetLkFamilyStatusDropdownListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetLkFamilyStatusDropdownListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetLkFamilyStatusDropdown(response: Response): Observable<ListResultDtoOfGetLkFamilyStatusDropdownListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetLkFamilyStatusDropdownListDto.fromJS(resultData200) : new ListResultDtoOfGetLkFamilyStatusDropdownListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetLkFamilyStatusDropdownListDto>(<any>null);
    }
}

@Injectable()
export class LkGradeServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getLkGradeDropdown(): Observable<ListResultDtoOfGetLkGradeDropdownListDto> {
        let url_ = this.baseUrl + "/api/services/app/LkGrade/GetLkGradeDropdown";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetLkGradeDropdown(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetLkGradeDropdown(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetLkGradeDropdownListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetLkGradeDropdownListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetLkGradeDropdown(response: Response): Observable<ListResultDtoOfGetLkGradeDropdownListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetLkGradeDropdownListDto.fromJS(resultData200) : new ListResultDtoOfGetLkGradeDropdownListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetLkGradeDropdownListDto>(<any>null);
    }
}

@Injectable()
export class LkKeyPeopleServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAllLkKeyPeopleDropdwon(): Observable<ListResultDtoOfGetAllLkKeyPeopleDropdwonListDto> {
        let url_ = this.baseUrl + "/api/services/app/LkKeyPeople/GetAllLkKeyPeopleDropdwon";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetAllLkKeyPeopleDropdwon(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllLkKeyPeopleDropdwon(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetAllLkKeyPeopleDropdwonListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetAllLkKeyPeopleDropdwonListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAllLkKeyPeopleDropdwon(response: Response): Observable<ListResultDtoOfGetAllLkKeyPeopleDropdwonListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetAllLkKeyPeopleDropdwonListDto.fromJS(resultData200) : new ListResultDtoOfGetAllLkKeyPeopleDropdwonListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetAllLkKeyPeopleDropdwonListDto>(<any>null);
    }
}

@Injectable()
export class LkMarStatusServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAllLkMarStatusList(): Observable<ListResultDtoOfGetAllMarStatusListDto> {
        let url_ = this.baseUrl + "/api/services/app/LkMarStatus/GetAllLkMarStatusList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetAllLkMarStatusList(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllLkMarStatusList(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetAllMarStatusListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetAllMarStatusListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAllLkMarStatusList(response: Response): Observable<ListResultDtoOfGetAllMarStatusListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetAllMarStatusListDto.fromJS(resultData200) : new ListResultDtoOfGetAllMarStatusListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetAllMarStatusListDto>(<any>null);
    }
}

@Injectable()
export class LkReligionServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAllLkReligionList(): Observable<ListResultDtoOfGetAllReligionListDto> {
        let url_ = this.baseUrl + "/api/services/app/LkReligion/GetAllLkReligionList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetAllLkReligionList(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllLkReligionList(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetAllReligionListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetAllReligionListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAllLkReligionList(response: Response): Observable<ListResultDtoOfGetAllReligionListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetAllReligionListDto.fromJS(resultData200) : new ListResultDtoOfGetAllReligionListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetAllReligionListDto>(<any>null);
    }
}

@Injectable()
export class LkSpecServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAllLkSpecList(): Observable<ListResultDtoOfGetAllSpecListDto> {
        let url_ = this.baseUrl + "/api/services/app/LkSpec/GetAllLkSpecList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetAllLkSpecList(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllLkSpecList(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetAllSpecListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetAllSpecListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAllLkSpecList(response: Response): Observable<ListResultDtoOfGetAllSpecListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetAllSpecListDto.fromJS(resultData200) : new ListResultDtoOfGetAllSpecListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetAllSpecListDto>(<any>null);
    }
}

@Injectable()
export class MainServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @bookCode (optional) 
     * @unitCode (optional) 
     * @unitNo (optional) 
     * @return Success
     */
    getPSASMain(bookCode: string, unitCode: string, unitNo: string): Observable<GetPSASMainListDto[]> {
        let url_ = this.baseUrl + "/api/services/app/Main/GetPSASMain?";
        if (bookCode !== undefined)
            url_ += "bookCode=" + encodeURIComponent("" + bookCode) + "&"; 
        if (unitCode !== undefined)
            url_ += "unitCode=" + encodeURIComponent("" + unitCode) + "&"; 
        if (unitNo !== undefined)
            url_ += "unitNo=" + encodeURIComponent("" + unitNo) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetPSASMain(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetPSASMain(response_);
                } catch (e) {
                    return <Observable<GetPSASMainListDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetPSASMainListDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetPSASMain(response: Response): Observable<GetPSASMainListDto[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(GetPSASMainListDto.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetPSASMainListDto[]>(<any>null);
    }
}

@Injectable()
export class MarketingFactorServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param (optional) 
     * @return Success
     */
    exportToExcelMarketingFactor(param: ExportMarketingFactorListDto): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/MarketingFactor/ExportToExcelMarketingFactor";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(param);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processExportToExcelMarketingFactor(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processExportToExcelMarketingFactor(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processExportToExcelMarketingFactor(response: Response): Observable<FileDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<FileDto>(<any>null);
    }
}

@Injectable()
export class MsAccountServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @input (optional) 
     * @return Success
     */
    createMsAccount(input: CreateMsAccountInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsAccount/CreateMsAccount";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateMsAccount(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateMsAccount(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateMsAccount(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteMsAccount(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsAccount/DeleteMsAccount?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processDeleteMsAccount(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteMsAccount(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteMsAccount(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getAllMsAccount(): Observable<ListResultDtoOfGetAllAccountListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsAccount/GetAllMsAccount";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetAllMsAccount(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllMsAccount(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetAllAccountListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetAllAccountListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAllMsAccount(response: Response): Observable<ListResultDtoOfGetAllAccountListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetAllAccountListDto.fromJS(resultData200) : new ListResultDtoOfGetAllAccountListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetAllAccountListDto>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    updateMsAccount(input: CreateMsAccountInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsAccount/UpdateMsAccount";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUpdateMsAccount(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateMsAccount(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateMsAccount(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class MsAreaServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @input (optional) 
     * @return Success
     */
    createMsArea(input: CreateMsAreaInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsArea/CreateMsArea";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateMsArea(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateMsArea(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateMsArea(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteMsArea(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsArea/DeleteMsArea?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processDeleteMsArea(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteMsArea(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteMsArea(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getAllMsArea(): Observable<ListResultDtoOfGetMsAreaListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsArea/GetAllMsArea";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetAllMsArea(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllMsArea(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetMsAreaListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetMsAreaListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAllMsArea(response: Response): Observable<ListResultDtoOfGetMsAreaListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetMsAreaListDto.fromJS(resultData200) : new ListResultDtoOfGetMsAreaListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetMsAreaListDto>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    updateMsArea(input: UpdateMsAreaInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsArea/UpdateMsArea";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUpdateMsArea(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateMsArea(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateMsArea(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class MsBankServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @input (optional) 
     * @return Success
     */
    createMsBank(input: CreateMsBankInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsBank/CreateMsBank";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateMsBank(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateMsBank(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateMsBank(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteMsBank(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsBank/DeleteMsBank?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processDeleteMsBank(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteMsBank(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteMsBank(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getAllMsBank(): Observable<ListResultDtoOfGetAllBankListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsBank/GetAllMsBank";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetAllMsBank(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllMsBank(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetAllBankListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetAllBankListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAllMsBank(response: Response): Observable<ListResultDtoOfGetAllBankListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetAllBankListDto.fromJS(resultData200) : new ListResultDtoOfGetAllBankListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetAllBankListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getMsBankDropDown(): Observable<ListResultDtoOfGetBankDropDownListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsBank/GetMsBankDropDown";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetMsBankDropDown(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMsBankDropDown(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetBankDropDownListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetBankDropDownListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetMsBankDropDown(response: Response): Observable<ListResultDtoOfGetBankDropDownListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetBankDropDownListDto.fromJS(resultData200) : new ListResultDtoOfGetBankDropDownListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetBankDropDownListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getBankTypeDropdown(): Observable<ListResultDtoOfGetTypeBankDropDownListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsBank/GetBankTypeDropdown";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetBankTypeDropdown(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetBankTypeDropdown(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetTypeBankDropDownListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetTypeBankDropDownListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetBankTypeDropdown(response: Response): Observable<ListResultDtoOfGetTypeBankDropDownListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetTypeBankDropDownListDto.fromJS(resultData200) : new ListResultDtoOfGetTypeBankDropDownListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetTypeBankDropDownListDto>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    updateMsBank(input: GetAllBankListDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsBank/UpdateMsBank";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUpdateMsBank(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateMsBank(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateMsBank(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class MsBankBranchServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @input (optional) 
     * @return Success
     */
    createMsBankBranch(input: CreateMsBankBranchInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsBankBranch/CreateMsBankBranch";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateMsBankBranch(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateMsBankBranch(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateMsBankBranch(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteMsBankBranch(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsBankBranch/DeleteMsBankBranch?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processDeleteMsBankBranch(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteMsBankBranch(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteMsBankBranch(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getBankBranchTypeDropdown(): Observable<ListResultDtoOfGetBankBranchTypeListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsBankBranch/GetBankBranchTypeDropdown";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetBankBranchTypeDropdown(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetBankBranchTypeDropdown(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetBankBranchTypeListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetBankBranchTypeListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetBankBranchTypeDropdown(response: Response): Observable<ListResultDtoOfGetBankBranchTypeListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetBankBranchTypeListDto.fromJS(resultData200) : new ListResultDtoOfGetBankBranchTypeListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetBankBranchTypeListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getMsBankBranch(): Observable<ListResultDtoOfGetBankBranchListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsBankBranch/GetMsBankBranch";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetMsBankBranch(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMsBankBranch(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetBankBranchListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetBankBranchListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetMsBankBranch(response: Response): Observable<ListResultDtoOfGetBankBranchListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetBankBranchListDto.fromJS(resultData200) : new ListResultDtoOfGetBankBranchListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetBankBranchListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getMsBankBranchByBank(bankId: number): Observable<ListResultDtoOfGetBankBranchListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsBankBranch/GetMsBankBranchByBank?";
        if (bankId === undefined || bankId === null)
            throw new Error("The parameter 'bankId' must be defined and cannot be null.");
        else
            url_ += "bankId=" + encodeURIComponent("" + bankId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetMsBankBranchByBank(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMsBankBranchByBank(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetBankBranchListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetBankBranchListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetMsBankBranchByBank(response: Response): Observable<ListResultDtoOfGetBankBranchListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetBankBranchListDto.fromJS(resultData200) : new ListResultDtoOfGetBankBranchListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetBankBranchListDto>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    updateMsBankBranch(input: UpdateMsBankBranchInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsBankBranch/UpdateMsBankBranch";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUpdateMsBankBranch(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateMsBankBranch(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateMsBankBranch(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class MsBankPersonalsServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAllMsBankList(): Observable<ListResultDtoOfGetAllBankPersonalsListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsBankPersonals/GetAllMsBankList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetAllMsBankList(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllMsBankList(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetAllBankPersonalsListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetAllBankPersonalsListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAllMsBankList(response: Response): Observable<ListResultDtoOfGetAllBankPersonalsListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetAllBankPersonalsListDto.fromJS(resultData200) : new ListResultDtoOfGetAllBankPersonalsListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetAllBankPersonalsListDto>(<any>null);
    }
}

@Injectable()
export class MsBobotCommServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @input (optional) 
     * @return Success
     */
    createMsBobotComm(input: MsBobotCommListDto[]): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsBobotComm/CreateMsBobotComm";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateMsBobotComm(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateMsBobotComm(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateMsBobotComm(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteMsBobotComm(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsBobotComm/DeleteMsBobotComm?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processDeleteMsBobotComm(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteMsBobotComm(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteMsBobotComm(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getMsBobotCommByProject(projectID: number): Observable<ListResultDtoOfMsBobotCommListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsBobotComm/GetMsBobotCommByProject?";
        if (projectID === undefined || projectID === null)
            throw new Error("The parameter 'projectID' must be defined and cannot be null.");
        else
            url_ += "projectID=" + encodeURIComponent("" + projectID) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetMsBobotCommByProject(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMsBobotCommByProject(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfMsBobotCommListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfMsBobotCommListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetMsBobotCommByProject(response: Response): Observable<ListResultDtoOfMsBobotCommListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfMsBobotCommListDto.fromJS(resultData200) : new ListResultDtoOfMsBobotCommListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfMsBobotCommListDto>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    updateMsBobotComm(input: MsBobotCommListDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsBobotComm/UpdateMsBobotComm";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUpdateMsBobotComm(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateMsBobotComm(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateMsBobotComm(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class MsCategoryServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAllMsCategory(): Observable<ListResultDtoOfGetAllCategoryListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsCategory/GetAllMsCategory";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetAllMsCategory(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllMsCategory(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetAllCategoryListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetAllCategoryListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAllMsCategory(response: Response): Observable<ListResultDtoOfGetAllCategoryListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetAllCategoryListDto.fromJS(resultData200) : new ListResultDtoOfGetAllCategoryListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetAllCategoryListDto>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    createMsCategory(input: CreateCategoryInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsCategory/CreateMsCategory";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateMsCategory(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateMsCategory(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateMsCategory(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    updateMsCategory(input: GetAllCategoryListDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsCategory/UpdateMsCategory";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUpdateMsCategory(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateMsCategory(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateMsCategory(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getMsCategoryDropdown(): Observable<ListResultDtoOfGetCategoryDropdownListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsCategory/GetMsCategoryDropdown";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetMsCategoryDropdown(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMsCategoryDropdown(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetCategoryDropdownListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetCategoryDropdownListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetMsCategoryDropdown(response: Response): Observable<ListResultDtoOfGetCategoryDropdownListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetCategoryDropdownListDto.fromJS(resultData200) : new ListResultDtoOfGetCategoryDropdownListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetCategoryDropdownListDto>(<any>null);
    }

    /**
     * @return Success
     */
    deleteMsCategory(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsCategory/DeleteMsCategory?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processDeleteMsCategory(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteMsCategory(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteMsCategory(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class MsCityServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @input (optional) 
     * @return Success
     */
    createMsCity(input: GetCreateMsCityInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsCity/CreateMsCity";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateMsCity(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateMsCity(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateMsCity(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getAllDropdownMsCity(countyID: number): Observable<ListResultDtoOfGetMsCityListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsCity/GetAllDropdownMsCity?";
        if (countyID === undefined || countyID === null)
            throw new Error("The parameter 'countyID' must be defined and cannot be null.");
        else
            url_ += "countyID=" + encodeURIComponent("" + countyID) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetAllDropdownMsCity(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllDropdownMsCity(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetMsCityListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetMsCityListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAllDropdownMsCity(response: Response): Observable<ListResultDtoOfGetMsCityListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetMsCityListDto.fromJS(resultData200) : new ListResultDtoOfGetMsCityListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetMsCityListDto>(<any>null);
    }
}

@Injectable()
export class MsClusterServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getMsClusterDropdown(): Observable<ListResultDtoOfGetClusterDropdownListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsCluster/GetMsClusterDropdown";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetMsClusterDropdown(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMsClusterDropdown(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetClusterDropdownListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetClusterDropdownListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetMsClusterDropdown(response: Response): Observable<ListResultDtoOfGetClusterDropdownListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetClusterDropdownListDto.fromJS(resultData200) : new ListResultDtoOfGetClusterDropdownListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetClusterDropdownListDto>(<any>null);
    }
}

@Injectable()
export class MsCompanyServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @input (optional) 
     * @return Success
     */
    createMsCompany(input: CreateMsCompanyInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsCompany/CreateMsCompany";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateMsCompany(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateMsCompany(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateMsCompany(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDetailMsCompany(companyId: number): Observable<GetDetailMsCompanyListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsCompany/GetDetailMsCompany?";
        if (companyId === undefined || companyId === null)
            throw new Error("The parameter 'companyId' must be defined and cannot be null.");
        else
            url_ += "companyId=" + encodeURIComponent("" + companyId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetDetailMsCompany(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDetailMsCompany(response_);
                } catch (e) {
                    return <Observable<GetDetailMsCompanyListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetDetailMsCompanyListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetDetailMsCompany(response: Response): Observable<GetDetailMsCompanyListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetDetailMsCompanyListDto.fromJS(resultData200) : new GetDetailMsCompanyListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetDetailMsCompanyListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getMsCompany(): Observable<ListResultDtoOfGetMsCompanyListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsCompany/GetMsCompany";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetMsCompany(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMsCompany(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetMsCompanyListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetMsCompanyListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetMsCompany(response: Response): Observable<ListResultDtoOfGetMsCompanyListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetMsCompanyListDto.fromJS(resultData200) : new ListResultDtoOfGetMsCompanyListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetMsCompanyListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getMsCountry(): Observable<ListResultDtoOfGetCountryListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsCompany/GetMsCountry";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetMsCountry(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMsCountry(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetCountryListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetCountryListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetMsCountry(response: Response): Observable<ListResultDtoOfGetCountryListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetCountryListDto.fromJS(resultData200) : new ListResultDtoOfGetCountryListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetCountryListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getMsTownByCountry(countryId: number): Observable<ListResultDtoOfGetTownListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsCompany/GetMsTownByCountry?";
        if (countryId === undefined || countryId === null)
            throw new Error("The parameter 'countryId' must be defined and cannot be null.");
        else
            url_ += "countryId=" + encodeURIComponent("" + countryId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetMsTownByCountry(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMsTownByCountry(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetTownListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetTownListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetMsTownByCountry(response: Response): Observable<ListResultDtoOfGetTownListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetTownListDto.fromJS(resultData200) : new ListResultDtoOfGetTownListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetTownListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getMsPostCodeByTown(townId: number): Observable<ListResultDtoOfGetPostCodeListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsCompany/GetMsPostCodeByTown?";
        if (townId === undefined || townId === null)
            throw new Error("The parameter 'townId' must be defined and cannot be null.");
        else
            url_ += "townId=" + encodeURIComponent("" + townId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetMsPostCodeByTown(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMsPostCodeByTown(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetPostCodeListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetPostCodeListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetMsPostCodeByTown(response: Response): Observable<ListResultDtoOfGetPostCodeListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetPostCodeListDto.fromJS(resultData200) : new ListResultDtoOfGetPostCodeListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetPostCodeListDto>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    updateMsCompany(input: UpdateMsCompanyInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsCompany/UpdateMsCompany";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUpdateMsCompany(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateMsCompany(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateMsCompany(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getMsCompanyDropDown(): Observable<ListResultDtoOfGetMsCompanyDropDownListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsCompany/GetMsCompanyDropDown";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetMsCompanyDropDown(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMsCompanyDropDown(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetMsCompanyDropDownListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetMsCompanyDropDownListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetMsCompanyDropDown(response: Response): Observable<ListResultDtoOfGetMsCompanyDropDownListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetMsCompanyDropDownListDto.fromJS(resultData200) : new ListResultDtoOfGetMsCompanyDropDownListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetMsCompanyDropDownListDto>(<any>null);
    }

    /**
     * @return Success
     */
    deleteMsCompany(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsCompany/DeleteMsCompany?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processDeleteMsCompany(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteMsCompany(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteMsCompany(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class MsCountyServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @input (optional) 
     * @return Success
     */
    createMsCounty(input: GetCreateMsCountyInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsCounty/CreateMsCounty";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateMsCounty(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateMsCounty(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateMsCounty(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getAllDropdownMsCounty(territoryID: number): Observable<ListResultDtoOfGetMsCountyListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsCounty/GetAllDropdownMsCounty?";
        if (territoryID === undefined || territoryID === null)
            throw new Error("The parameter 'territoryID' must be defined and cannot be null.");
        else
            url_ += "territoryID=" + encodeURIComponent("" + territoryID) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetAllDropdownMsCounty(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllDropdownMsCounty(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetMsCountyListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetMsCountyListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAllDropdownMsCounty(response: Response): Observable<ListResultDtoOfGetMsCountyListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetMsCountyListDto.fromJS(resultData200) : new ListResultDtoOfGetMsCountyListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetMsCountyListDto>(<any>null);
    }
}

@Injectable()
export class MsDepartmentServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAllMsDepartment(): Observable<ListResultDtoOfGetAllDepartmentListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsDepartment/GetAllMsDepartment";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetAllMsDepartment(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllMsDepartment(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetAllDepartmentListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetAllDepartmentListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAllMsDepartment(response: Response): Observable<ListResultDtoOfGetAllDepartmentListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetAllDepartmentListDto.fromJS(resultData200) : new ListResultDtoOfGetAllDepartmentListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetAllDepartmentListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getMsDepartmentPICInformation(): Observable<ListResultDtoOfGetMsDepartmentDropdownListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsDepartment/GetMsDepartmentPICInformation";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetMsDepartmentPICInformation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMsDepartmentPICInformation(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetMsDepartmentDropdownListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetMsDepartmentDropdownListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetMsDepartmentPICInformation(response: Response): Observable<ListResultDtoOfGetMsDepartmentDropdownListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetMsDepartmentDropdownListDto.fromJS(resultData200) : new ListResultDtoOfGetMsDepartmentDropdownListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetMsDepartmentDropdownListDto>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    createMsDepartment(input: CreateOrUpdateMsDepartmentInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsDepartment/CreateMsDepartment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateMsDepartment(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateMsDepartment(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateMsDepartment(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    updateMsDepartment(input: CreateOrUpdateMsDepartmentInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsDepartment/UpdateMsDepartment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUpdateMsDepartment(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateMsDepartment(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateMsDepartment(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteMsDepartment(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsDepartment/DeleteMsDepartment?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processDeleteMsDepartment(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteMsDepartment(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteMsDepartment(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getMsDepartmentDropdown(): Observable<ListResultDtoOfGetMsDepartmentDropdownListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsDepartment/GetMsDepartmentDropdown";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetMsDepartmentDropdown(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMsDepartmentDropdown(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetMsDepartmentDropdownListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetMsDepartmentDropdownListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetMsDepartmentDropdown(response: Response): Observable<ListResultDtoOfGetMsDepartmentDropdownListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetMsDepartmentDropdownListDto.fromJS(resultData200) : new ListResultDtoOfGetMsDepartmentDropdownListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetMsDepartmentDropdownListDto>(<any>null);
    }
}

@Injectable()
export class MsDeveloperSchemasServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    deleteMsDeveloperSchemas(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsDeveloperSchemas/DeleteMsDeveloperSchemas?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processDeleteMsDeveloperSchemas(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteMsDeveloperSchemas(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteMsDeveloperSchemas(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getMsDeveloperSchemas(): Observable<ListResultDtoOfGetDeveloperSchemasListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsDeveloperSchemas/GetMsDeveloperSchemas";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetMsDeveloperSchemas(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMsDeveloperSchemas(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetDeveloperSchemasListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetDeveloperSchemasListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetMsDeveloperSchemas(response: Response): Observable<ListResultDtoOfGetDeveloperSchemasListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetDeveloperSchemasListDto.fromJS(resultData200) : new ListResultDtoOfGetDeveloperSchemasListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetDeveloperSchemasListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getMsDeveloperSchemasBySchema(schemaID: number): Observable<ListResultDtoOfGetDeveloperSchemasListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsDeveloperSchemas/GetMsDeveloperSchemasBySchema?";
        if (schemaID === undefined || schemaID === null)
            throw new Error("The parameter 'schemaID' must be defined and cannot be null.");
        else
            url_ += "SchemaID=" + encodeURIComponent("" + schemaID) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetMsDeveloperSchemasBySchema(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMsDeveloperSchemasBySchema(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetDeveloperSchemasListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetDeveloperSchemasListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetMsDeveloperSchemasBySchema(response: Response): Observable<ListResultDtoOfGetDeveloperSchemasListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetDeveloperSchemasListDto.fromJS(resultData200) : new ListResultDtoOfGetDeveloperSchemasListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetDeveloperSchemasListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getDetailMsDeveloperSchemas(id: number): Observable<GetDeveloperSchemasListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsDeveloperSchemas/GetDetailMsDeveloperSchemas?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetDetailMsDeveloperSchemas(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDetailMsDeveloperSchemas(response_);
                } catch (e) {
                    return <Observable<GetDeveloperSchemasListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetDeveloperSchemasListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetDetailMsDeveloperSchemas(response: Response): Observable<GetDeveloperSchemasListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetDeveloperSchemasListDto.fromJS(resultData200) : new GetDeveloperSchemasListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetDeveloperSchemasListDto>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    createMsDeveloperSchemas(input: CreateMsDeveloperSchemasInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsDeveloperSchemas/CreateMsDeveloperSchemas";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateMsDeveloperSchemas(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateMsDeveloperSchemas(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateMsDeveloperSchemas(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    updateMsDeveloperSchemas(input: UpdateMsDeveloperSchemasInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsDeveloperSchemas/UpdateMsDeveloperSchemas";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUpdateMsDeveloperSchemas(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateMsDeveloperSchemas(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateMsDeveloperSchemas(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getPropCodeBySchemaID(schemaID: number): Observable<ListResultDtoOfGetPropCodeListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsDeveloperSchemas/GetPropCodeBySchemaID?";
        if (schemaID === undefined || schemaID === null)
            throw new Error("The parameter 'schemaID' must be defined and cannot be null.");
        else
            url_ += "schemaID=" + encodeURIComponent("" + schemaID) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetPropCodeBySchemaID(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetPropCodeBySchemaID(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetPropCodeListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetPropCodeListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetPropCodeBySchemaID(response: Response): Observable<ListResultDtoOfGetPropCodeListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetPropCodeListDto.fromJS(resultData200) : new ListResultDtoOfGetPropCodeListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetPropCodeListDto>(<any>null);
    }

    /**
     * @propCode (optional) 
     * @return Success
     */
    getPropNameByPropCode(propCode: string): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/MsDeveloperSchemas/GetPropNameByPropCode?";
        if (propCode !== undefined)
            url_ += "propCode=" + encodeURIComponent("" + propCode) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetPropNameByPropCode(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetPropNameByPropCode(response_);
                } catch (e) {
                    return <Observable<string>><any>Observable.throw(e);
                }
            } else
                return <Observable<string>><any>Observable.throw(response_);
        });
    }

    protected processGetPropNameByPropCode(response: Response): Observable<string> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<string>(<any>null);
    }

    /**
     * @sorting (optional) 
     * @return Success
     */
    getAllMsDeveloperSchemaPaging(sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfGetDeveloperSchemasListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsDeveloperSchemas/GetAllMsDeveloperSchemaPaging?";
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount === undefined || maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' must be defined and cannot be null.");
        else
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount === undefined || skipCount === null)
            throw new Error("The parameter 'skipCount' must be defined and cannot be null.");
        else
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetAllMsDeveloperSchemaPaging(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllMsDeveloperSchemaPaging(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfGetDeveloperSchemasListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfGetDeveloperSchemasListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAllMsDeveloperSchemaPaging(response: Response): Observable<PagedResultDtoOfGetDeveloperSchemasListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfGetDeveloperSchemasListDto.fromJS(resultData200) : new PagedResultDtoOfGetDeveloperSchemasListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<PagedResultDtoOfGetDeveloperSchemasListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getDropDownMsDeveloperSchemasBySchema(schemaID: number): Observable<ListResultDtoOfGetDropDownDeveloperSchemasListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsDeveloperSchemas/GetDropDownMsDeveloperSchemasBySchema?";
        if (schemaID === undefined || schemaID === null)
            throw new Error("The parameter 'schemaID' must be defined and cannot be null.");
        else
            url_ += "SchemaID=" + encodeURIComponent("" + schemaID) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetDropDownMsDeveloperSchemasBySchema(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDropDownMsDeveloperSchemasBySchema(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetDropDownDeveloperSchemasListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetDropDownDeveloperSchemasListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetDropDownMsDeveloperSchemasBySchema(response: Response): Observable<ListResultDtoOfGetDropDownDeveloperSchemasListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetDropDownDeveloperSchemasListDto.fromJS(resultData200) : new ListResultDtoOfGetDropDownDeveloperSchemasListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetDropDownDeveloperSchemasListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getDataDeveloperSchemaByProperty(propertyID: number): Observable<GetDropDownDeveloperSchemasListDto[]> {
        let url_ = this.baseUrl + "/api/services/app/MsDeveloperSchemas/GetDataDeveloperSchemaByProperty?";
        if (propertyID === undefined || propertyID === null)
            throw new Error("The parameter 'propertyID' must be defined and cannot be null.");
        else
            url_ += "propertyID=" + encodeURIComponent("" + propertyID) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetDataDeveloperSchemaByProperty(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDataDeveloperSchemaByProperty(response_);
                } catch (e) {
                    return <Observable<GetDropDownDeveloperSchemasListDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetDropDownDeveloperSchemasListDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetDataDeveloperSchemaByProperty(response: Response): Observable<GetDropDownDeveloperSchemasListDto[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(GetDropDownDeveloperSchemasListDto.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetDropDownDeveloperSchemasListDto[]>(<any>null);
    }
}

@Injectable()
export class MsDiscountServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @input (optional) 
     * @return Success
     */
    createMsDiscount(input: CreateMsDiscountInput): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/MsDiscount/CreateMsDiscount";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateMsDiscount(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateMsDiscount(response_);
                } catch (e) {
                    return <Observable<number>><any>Observable.throw(e);
                }
            } else
                return <Observable<number>><any>Observable.throw(response_);
        });
    }

    protected processCreateMsDiscount(response: Response): Observable<number> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<number>(<any>null);
    }

    /**
     * @return Success
     */
    deleteMsDiscount(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsDiscount/DeleteMsDiscount?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processDeleteMsDiscount(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteMsDiscount(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteMsDiscount(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @sorting (optional) 
     * @return Success
     */
    getAllMsDiscount(discountID: number, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfGetAllMsDiscountListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsDiscount/GetAllMsDiscount?";
        if (discountID === undefined || discountID === null)
            throw new Error("The parameter 'discountID' must be defined and cannot be null.");
        else
            url_ += "discountID=" + encodeURIComponent("" + discountID) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount === undefined || maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' must be defined and cannot be null.");
        else
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount === undefined || skipCount === null)
            throw new Error("The parameter 'skipCount' must be defined and cannot be null.");
        else
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetAllMsDiscount(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllMsDiscount(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfGetAllMsDiscountListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfGetAllMsDiscountListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAllMsDiscount(response: Response): Observable<PagedResultDtoOfGetAllMsDiscountListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfGetAllMsDiscountListDto.fromJS(resultData200) : new PagedResultDtoOfGetAllMsDiscountListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<PagedResultDtoOfGetAllMsDiscountListDto>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    updateMsDiscount(input: CreateMsDiscountInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsDiscount/UpdateMsDiscount";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUpdateMsDiscount(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateMsDiscount(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateMsDiscount(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class MsDocumentServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAllMsDocumentList(): Observable<ListResultDtoOfGetAllDocumentListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsDocument/GetAllMsDocumentList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetAllMsDocumentList(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllMsDocumentList(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetAllDocumentListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetAllDocumentListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAllMsDocumentList(response: Response): Observable<ListResultDtoOfGetAllDocumentListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetAllDocumentListDto.fromJS(resultData200) : new ListResultDtoOfGetAllDocumentListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetAllDocumentListDto>(<any>null);
    }
}

@Injectable()
export class MsEntityServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @input (optional) 
     * @return Success
     */
    createMsEntity(input: GetAllMsEntityListDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsEntity/CreateMsEntity";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateMsEntity(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateMsEntity(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateMsEntity(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteMsEntity(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsEntity/DeleteMsEntity?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processDeleteMsEntity(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteMsEntity(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteMsEntity(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getAllMsEntity(): Observable<ListResultDtoOfGetAllMsEntityListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsEntity/GetAllMsEntity";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetAllMsEntity(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllMsEntity(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetAllMsEntityListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetAllMsEntityListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAllMsEntity(response: Response): Observable<ListResultDtoOfGetAllMsEntityListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetAllMsEntityListDto.fromJS(resultData200) : new ListResultDtoOfGetAllMsEntityListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetAllMsEntityListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getMsEntityDropdown(): Observable<ListResultDtoOfGetAllMsEntityListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsEntity/GetMsEntityDropdown";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetMsEntityDropdown(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMsEntityDropdown(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetAllMsEntityListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetAllMsEntityListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetMsEntityDropdown(response: Response): Observable<ListResultDtoOfGetAllMsEntityListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetAllMsEntityListDto.fromJS(resultData200) : new ListResultDtoOfGetAllMsEntityListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetAllMsEntityListDto>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    updateMsEntity(input: GetAllMsEntityListDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsEntity/UpdateMsEntity";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUpdateMsEntity(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateMsEntity(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateMsEntity(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class MsFacadeServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @input (optional) 
     * @return Success
     */
    createMsFacade(input: CreateMsFacadeInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsFacade/CreateMsFacade";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateMsFacade(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateMsFacade(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateMsFacade(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteMsFacade(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsFacade/DeleteMsFacade?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processDeleteMsFacade(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteMsFacade(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteMsFacade(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getAllMsFacade(): Observable<ListResultDtoOfGetMsFacadeListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsFacade/GetAllMsFacade";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetAllMsFacade(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllMsFacade(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetMsFacadeListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetMsFacadeListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAllMsFacade(response: Response): Observable<ListResultDtoOfGetMsFacadeListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetMsFacadeListDto.fromJS(resultData200) : new ListResultDtoOfGetMsFacadeListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetMsFacadeListDto>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    updateMsFacade(input: UpdateMsFacadeInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsFacade/UpdateMsFacade";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUpdateMsFacade(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateMsFacade(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateMsFacade(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class MsFinTypeServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @input (optional) 
     * @return Success
     */
    createMsFinType(input: CreateMsFinTypeInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsFinType/CreateMsFinType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateMsFinType(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateMsFinType(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateMsFinType(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteMsFinType(finTypeID: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsFinType/DeleteMsFinType?";
        if (finTypeID === undefined || finTypeID === null)
            throw new Error("The parameter 'finTypeID' must be defined and cannot be null.");
        else
            url_ += "finTypeID=" + encodeURIComponent("" + finTypeID) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processDeleteMsFinType(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteMsFinType(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteMsFinType(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getAllFinType(): Observable<ListResultDtoOfString> {
        let url_ = this.baseUrl + "/api/services/app/MsFinType/GetAllFinType";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetAllFinType(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllFinType(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfString>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfString>><any>Observable.throw(response_);
        });
    }

    protected processGetAllFinType(response: Response): Observable<ListResultDtoOfString> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfString.fromJS(resultData200) : new ListResultDtoOfString();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfString>(<any>null);
    }

    /**
     * @sorting (optional) 
     * @return Success
     */
    getAllMsFinType(finTypeCode: number, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfGetAllMsFinTypeListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsFinType/GetAllMsFinType?";
        if (finTypeCode === undefined || finTypeCode === null)
            throw new Error("The parameter 'finTypeCode' must be defined and cannot be null.");
        else
            url_ += "finTypeCode=" + encodeURIComponent("" + finTypeCode) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount === undefined || maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' must be defined and cannot be null.");
        else
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount === undefined || skipCount === null)
            throw new Error("The parameter 'skipCount' must be defined and cannot be null.");
        else
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetAllMsFinType(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllMsFinType(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfGetAllMsFinTypeListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfGetAllMsFinTypeListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAllMsFinType(response: Response): Observable<PagedResultDtoOfGetAllMsFinTypeListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfGetAllMsFinTypeListDto.fromJS(resultData200) : new PagedResultDtoOfGetAllMsFinTypeListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<PagedResultDtoOfGetAllMsFinTypeListDto>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    updateMsFinType(input: UpdateMsFinTypeInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsFinType/UpdateMsFinType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUpdateMsFinType(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateMsFinType(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateMsFinType(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class MsFranchiseGroupServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getFranchiseGroupDropdown(): Observable<ListResultDtoOfGetFranchiseGroupDropdownListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsFranchiseGroup/GetFranchiseGroupDropdown";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetFranchiseGroupDropdown(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetFranchiseGroupDropdown(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetFranchiseGroupDropdownListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetFranchiseGroupDropdownListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetFranchiseGroupDropdown(response: Response): Observable<ListResultDtoOfGetFranchiseGroupDropdownListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetFranchiseGroupDropdownListDto.fromJS(resultData200) : new ListResultDtoOfGetFranchiseGroupDropdownListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetFranchiseGroupDropdownListDto>(<any>null);
    }
}

@Injectable()
export class MsGroupSchemaServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @groupSchemaCode (optional) 
     * @sorting (optional) 
     * @return Success
     */
    getAllMsGroupSchema(groupSchemaCode: string, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfGetAllMsGroupSchemaListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsGroupSchema/GetAllMsGroupSchema?";
        if (groupSchemaCode !== undefined)
            url_ += "groupSchemaCode=" + encodeURIComponent("" + groupSchemaCode) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount === undefined || maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' must be defined and cannot be null.");
        else
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount === undefined || skipCount === null)
            throw new Error("The parameter 'skipCount' must be defined and cannot be null.");
        else
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetAllMsGroupSchema(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllMsGroupSchema(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfGetAllMsGroupSchemaListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfGetAllMsGroupSchemaListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAllMsGroupSchema(response: Response): Observable<PagedResultDtoOfGetAllMsGroupSchemaListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfGetAllMsGroupSchemaListDto.fromJS(resultData200) : new PagedResultDtoOfGetAllMsGroupSchemaListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<PagedResultDtoOfGetAllMsGroupSchemaListDto>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    createOrUpdateMsGroupSchema(input: CreateOrUpdateSetGroupSchemaInputDto): Observable<ReturnMsGroupSchemaDto[]> {
        let url_ = this.baseUrl + "/api/services/app/MsGroupSchema/CreateOrUpdateMsGroupSchema";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateOrUpdateMsGroupSchema(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateMsGroupSchema(response_);
                } catch (e) {
                    return <Observable<ReturnMsGroupSchemaDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<ReturnMsGroupSchemaDto[]>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateMsGroupSchema(response: Response): Observable<ReturnMsGroupSchemaDto[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(ReturnMsGroupSchemaDto.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ReturnMsGroupSchemaDto[]>(<any>null);
    }

    /**
     * @input (optional) 
     * @flag (optional) 
     * @return Success
     */
    createOrUpdateMsGroupCommPct(input: CreateOrUpdateSetPercentCommGroupInputDto[], flag: string): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsGroupSchema/CreateOrUpdateMsGroupCommPct?";
        if (flag !== undefined)
            url_ += "flag=" + encodeURIComponent("" + flag) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateOrUpdateMsGroupCommPct(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateMsGroupCommPct(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateMsGroupCommPct(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @groupSchemaID (optional) 
     * @return Success
     */
    getDropDownSchemaByGroupSchemaId(groupSchemaID: number[], isComplete: boolean): Observable<GetDropDownSchemaByGroupSchemaIdListDto[]> {
        let url_ = this.baseUrl + "/api/services/app/MsGroupSchema/GetDropDownSchemaByGroupSchemaId?";
        if (groupSchemaID !== undefined)
            groupSchemaID && groupSchemaID.forEach(item => { url_ += "groupSchemaID=" + encodeURIComponent("" + item) + "&"; });
        if (isComplete === undefined || isComplete === null)
            throw new Error("The parameter 'isComplete' must be defined and cannot be null.");
        else
            url_ += "isComplete=" + encodeURIComponent("" + isComplete) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetDropDownSchemaByGroupSchemaId(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDropDownSchemaByGroupSchemaId(response_);
                } catch (e) {
                    return <Observable<GetDropDownSchemaByGroupSchemaIdListDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetDropDownSchemaByGroupSchemaIdListDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetDropDownSchemaByGroupSchemaId(response: Response): Observable<GetDropDownSchemaByGroupSchemaIdListDto[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(GetDropDownSchemaByGroupSchemaIdListDto.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetDropDownSchemaByGroupSchemaIdListDto[]>(<any>null);
    }

    /**
     * @groupSchemaCode (optional) 
     * @return Success
     */
    getDetailMsGroupSchema(groupSchemaCode: string, isComplete: boolean): Observable<GetDetailMsGroupSchemaListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsGroupSchema/GetDetailMsGroupSchema?";
        if (groupSchemaCode !== undefined)
            url_ += "groupSchemaCode=" + encodeURIComponent("" + groupSchemaCode) + "&"; 
        if (isComplete === undefined || isComplete === null)
            throw new Error("The parameter 'isComplete' must be defined and cannot be null.");
        else
            url_ += "isComplete=" + encodeURIComponent("" + isComplete) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetDetailMsGroupSchema(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDetailMsGroupSchema(response_);
                } catch (e) {
                    return <Observable<GetDetailMsGroupSchemaListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetDetailMsGroupSchemaListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetDetailMsGroupSchema(response: Response): Observable<GetDetailMsGroupSchemaListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetDetailMsGroupSchemaListDto.fromJS(resultData200) : new GetDetailMsGroupSchemaListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetDetailMsGroupSchemaListDto>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    createOrUpdateMsGroupRequirement(input: CreateMsGroupSchemaRequirementInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsGroupSchema/CreateOrUpdateMsGroupRequirement";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateOrUpdateMsGroupRequirement(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateMsGroupRequirement(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateMsGroupRequirement(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @groupSchemas (optional) 
     * @return Success
     */
    updateIsComplete(groupSchemas: number[]): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsGroupSchema/UpdateIsComplete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(groupSchemas);

        let options_ : any = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUpdateIsComplete(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateIsComplete(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateIsComplete(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @groupSchemaCode (optional) 
     * @return Success
     */
    deleteMsGroupSchema(groupSchemaCode: string): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsGroupSchema/DeleteMsGroupSchema?";
        if (groupSchemaCode !== undefined)
            url_ += "groupSchemaCode=" + encodeURIComponent("" + groupSchemaCode) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processDeleteMsGroupSchema(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteMsGroupSchema(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteMsGroupSchema(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @groupSchemaID (optional) 
     * @return Success
     */
    deleteMsGroupSchemaReq(reqNo: string, groupSchemaID: number[]): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsGroupSchema/DeleteMsGroupSchemaReq?";
        if (reqNo === undefined || reqNo === null)
            throw new Error("The parameter 'reqNo' must be defined and cannot be null.");
        else
            url_ += "reqNo=" + encodeURIComponent("" + reqNo) + "&"; 
        if (groupSchemaID !== undefined)
            groupSchemaID && groupSchemaID.forEach(item => { url_ += "groupSchemaID=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processDeleteMsGroupSchemaReq(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteMsGroupSchemaReq(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteMsGroupSchemaReq(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteSchemaByGroupSchema(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsGroupSchema/DeleteSchemaByGroupSchema?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processDeleteSchemaByGroupSchema(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteSchemaByGroupSchema(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteSchemaByGroupSchema(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getMsGroupRequirement(groupSchemaID: number): Observable<GetMsGroupSchemaRequirementListDto[]> {
        let url_ = this.baseUrl + "/api/services/app/MsGroupSchema/GetMsGroupRequirement?";
        if (groupSchemaID === undefined || groupSchemaID === null)
            throw new Error("The parameter 'groupSchemaID' must be defined and cannot be null.");
        else
            url_ += "groupSchemaID=" + encodeURIComponent("" + groupSchemaID) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetMsGroupRequirement(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMsGroupRequirement(response_);
                } catch (e) {
                    return <Observable<GetMsGroupSchemaRequirementListDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetMsGroupSchemaRequirementListDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetMsGroupRequirement(response: Response): Observable<GetMsGroupSchemaRequirementListDto[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(GetMsGroupSchemaRequirementListDto.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetMsGroupSchemaRequirementListDto[]>(<any>null);
    }

    /**
     * @input (optional) 
     * @flag (optional) 
     * @return Success
     */
    getAllMsGroupCommPct(input: any[], flag: string): Observable<GetAllMsGroupCommPctListDto[]> {
        let url_ = this.baseUrl + "/api/services/app/MsGroupSchema/GetAllMsGroupCommPct?";
        if (input !== undefined)
            input && input.forEach((item, index) => { 
                for (let attr in item)
                    url_ += "input[" + index + "]." + attr + "=" + encodeURIComponent("" + item[attr]) + "&";
            });
        if (flag !== undefined)
            url_ += "flag=" + encodeURIComponent("" + flag) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetAllMsGroupCommPct(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllMsGroupCommPct(response_);
                } catch (e) {
                    return <Observable<GetAllMsGroupCommPctListDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetAllMsGroupCommPctListDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetAllMsGroupCommPct(response: Response): Observable<GetAllMsGroupCommPctListDto[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(GetAllMsGroupCommPctListDto.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetAllMsGroupCommPctListDto[]>(<any>null);
    }

    /**
     * @groupSchemaCode (optional) 
     * @return Success
     */
    backToLatest(groupSchemaCode: string): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsGroupSchema/BackToLatest?";
        if (groupSchemaCode !== undefined)
            url_ += "groupSchemaCode=" + encodeURIComponent("" + groupSchemaCode) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processBackToLatest(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processBackToLatest(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processBackToLatest(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDropDownClusterByProject(projectID: number): Observable<GetDropDownClusterByProjectListDto[]> {
        let url_ = this.baseUrl + "/api/services/app/MsGroupSchema/GetDropDownClusterByProject?";
        if (projectID === undefined || projectID === null)
            throw new Error("The parameter 'projectID' must be defined and cannot be null.");
        else
            url_ += "projectID=" + encodeURIComponent("" + projectID) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetDropDownClusterByProject(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDropDownClusterByProject(response_);
                } catch (e) {
                    return <Observable<GetDropDownClusterByProjectListDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetDropDownClusterByProjectListDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetDropDownClusterByProject(response: Response): Observable<GetDropDownClusterByProjectListDto[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(GetDropDownClusterByProjectListDto.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetDropDownClusterByProjectListDto[]>(<any>null);
    }

    /**
     * @id (optional) 
     * @flag (optional) 
     * @return Success
     */
    deleteMsGroupCommPct(id: number[], isStandard: boolean, flag: string): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsGroupSchema/DeleteMsGroupCommPct?";
        if (id !== undefined)
            id && id.forEach(item => { url_ += "Id=" + encodeURIComponent("" + item) + "&"; });
        if (isStandard === undefined || isStandard === null)
            throw new Error("The parameter 'isStandard' must be defined and cannot be null.");
        else
            url_ += "isStandard=" + encodeURIComponent("" + isStandard) + "&"; 
        if (flag !== undefined)
            url_ += "flag=" + encodeURIComponent("" + flag) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processDeleteMsGroupCommPct(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteMsGroupCommPct(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteMsGroupCommPct(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDataMsGroupSchemaReq(schemaID: number, projectID: number): Observable<GetDataMsGroupSchemaReqListDto[]> {
        let url_ = this.baseUrl + "/api/services/app/MsGroupSchema/GetDataMsGroupSchemaReq?";
        if (schemaID === undefined || schemaID === null)
            throw new Error("The parameter 'schemaID' must be defined and cannot be null.");
        else
            url_ += "schemaID=" + encodeURIComponent("" + schemaID) + "&"; 
        if (projectID === undefined || projectID === null)
            throw new Error("The parameter 'projectID' must be defined and cannot be null.");
        else
            url_ += "projectID=" + encodeURIComponent("" + projectID) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetDataMsGroupSchemaReq(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDataMsGroupSchemaReq(response_);
                } catch (e) {
                    return <Observable<GetDataMsGroupSchemaReqListDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetDataMsGroupSchemaReqListDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetDataMsGroupSchemaReq(response: Response): Observable<GetDataMsGroupSchemaReqListDto[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(GetDataMsGroupSchemaReqListDto.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetDataMsGroupSchemaReqListDto[]>(<any>null);
    }
}

@Injectable()
export class MsItemServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAllMsItem(): Observable<ListResultDtoOfGetAllMsItemListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsItem/GetAllMsItem";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetAllMsItem(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllMsItem(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetAllMsItemListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetAllMsItemListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAllMsItem(response: Response): Observable<ListResultDtoOfGetAllMsItemListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetAllMsItemListDto.fromJS(resultData200) : new ListResultDtoOfGetAllMsItemListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetAllMsItemListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getMsItemDropdown(): Observable<ListResultDtoOfGetAllMsItemListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsItem/GetMsItemDropdown";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetMsItemDropdown(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMsItemDropdown(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetAllMsItemListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetAllMsItemListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetMsItemDropdown(response: Response): Observable<ListResultDtoOfGetAllMsItemListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetAllMsItemListDto.fromJS(resultData200) : new ListResultDtoOfGetAllMsItemListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetAllMsItemListDto>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    createMsItem(input: CreateMsItemInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsItem/CreateMsItem";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateMsItem(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateMsItem(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateMsItem(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    updateMsItem(input: UpdateMsItemInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsItem/UpdateMsItem";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUpdateMsItem(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateMsItem(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateMsItem(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteMsItem(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsItem/DeleteMsItem?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processDeleteMsItem(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteMsItem(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteMsItem(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class MsJobTitleServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAllMsJobTitleDropdown(): Observable<ListResultDtoOfGetAllMsJobTitleDropdownList> {
        let url_ = this.baseUrl + "/api/services/app/MsJobTitle/GetAllMsJobTitleDropdown";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetAllMsJobTitleDropdown(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllMsJobTitleDropdown(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetAllMsJobTitleDropdownList>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetAllMsJobTitleDropdownList>><any>Observable.throw(response_);
        });
    }

    protected processGetAllMsJobTitleDropdown(response: Response): Observable<ListResultDtoOfGetAllMsJobTitleDropdownList> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetAllMsJobTitleDropdownList.fromJS(resultData200) : new ListResultDtoOfGetAllMsJobTitleDropdownList();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetAllMsJobTitleDropdownList>(<any>null);
    }
}

@Injectable()
export class MsManagementPctServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @input (optional) 
     * @return Success
     */
    createMsManagementPct(input: InputManagementPctDto[]): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsManagementPct/CreateMsManagementPct";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateMsManagementPct(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateMsManagementPct(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateMsManagementPct(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteMsManagementPct(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsManagementPct/DeleteMsManagementPct?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processDeleteMsManagementPct(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteMsManagementPct(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteMsManagementPct(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getMsManagementPctBySchemaId(schemaID: number): Observable<ListResultDtoOfGetAllManagementPctListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsManagementPct/GetMsManagementPctBySchemaId?";
        if (schemaID === undefined || schemaID === null)
            throw new Error("The parameter 'schemaID' must be defined and cannot be null.");
        else
            url_ += "schemaID=" + encodeURIComponent("" + schemaID) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetMsManagementPctBySchemaId(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMsManagementPctBySchemaId(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetAllManagementPctListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetAllManagementPctListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetMsManagementPctBySchemaId(response: Response): Observable<ListResultDtoOfGetAllManagementPctListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetAllManagementPctListDto.fromJS(resultData200) : new ListResultDtoOfGetAllManagementPctListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetAllManagementPctListDto>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    updateMsManagementPct(input: InputManagementPctDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsManagementPct/UpdateMsManagementPct";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUpdateMsManagementPct(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateMsManagementPct(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateMsManagementPct(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class MsNationServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getMSNationDropdown(): Observable<ListResultDtoOfGetMSNationDropdownListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsNation/GetMSNationDropdown";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetMSNationDropdown(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMSNationDropdown(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetMSNationDropdownListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetMSNationDropdownListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetMSNationDropdown(response: Response): Observable<ListResultDtoOfGetMSNationDropdownListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetMSNationDropdownListDto.fromJS(resultData200) : new ListResultDtoOfGetMSNationDropdownListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetMSNationDropdownListDto>(<any>null);
    }
}

@Injectable()
export class MsOccupationServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getMsOccupationDropdown(): Observable<ListResultDtoOfGetMsOccupationDropdownListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsOccupation/GetMsOccupationDropdown";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetMsOccupationDropdown(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMsOccupationDropdown(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetMsOccupationDropdownListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetMsOccupationDropdownListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetMsOccupationDropdown(response: Response): Observable<ListResultDtoOfGetMsOccupationDropdownListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetMsOccupationDropdownListDto.fromJS(resultData200) : new ListResultDtoOfGetMsOccupationDropdownListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetMsOccupationDropdownListDto>(<any>null);
    }
}

@Injectable()
export class MsOfficerServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @input (optional) 
     * @return Success
     */
    createMsOfficer(input: CreateMsOfficerInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsOfficer/CreateMsOfficer";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateMsOfficer(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateMsOfficer(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateMsOfficer(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteMsOfficer(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsOfficer/DeleteMsOfficer?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processDeleteMsOfficer(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteMsOfficer(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteMsOfficer(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getAllMsOfficer(): Observable<ListResultDtoOfGetAllOfficerListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsOfficer/GetAllMsOfficer";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetAllMsOfficer(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllMsOfficer(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetAllOfficerListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetAllOfficerListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAllMsOfficer(response: Response): Observable<ListResultDtoOfGetAllOfficerListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetAllOfficerListDto.fromJS(resultData200) : new ListResultDtoOfGetAllOfficerListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetAllOfficerListDto>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    updateMsOfficer(input: CreateMsOfficerInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsOfficer/UpdateMsOfficer";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUpdateMsOfficer(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateMsOfficer(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateMsOfficer(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getMsOfficerPerDepartmentDropdown(): Observable<GetOfficerDivDto> {
        let url_ = this.baseUrl + "/api/services/app/MsOfficer/GetMsOfficerPerDepartmentDropdown";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetMsOfficerPerDepartmentDropdown(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMsOfficerPerDepartmentDropdown(response_);
                } catch (e) {
                    return <Observable<GetOfficerDivDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetOfficerDivDto>><any>Observable.throw(response_);
        });
    }

    protected processGetMsOfficerPerDepartmentDropdown(response: Response): Observable<GetOfficerDivDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetOfficerDivDto.fromJS(resultData200) : new GetOfficerDivDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetOfficerDivDto>(<any>null);
    }

    /**
     * @return Success
     */
    getOfficerPhoneByOfficerId(staffID: number, departmentID: number): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/MsOfficer/GetOfficerPhoneByOfficerId?";
        if (staffID === undefined || staffID === null)
            throw new Error("The parameter 'staffID' must be defined and cannot be null.");
        else
            url_ += "staffID=" + encodeURIComponent("" + staffID) + "&"; 
        if (departmentID === undefined || departmentID === null)
            throw new Error("The parameter 'departmentID' must be defined and cannot be null.");
        else
            url_ += "departmentID=" + encodeURIComponent("" + departmentID) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetOfficerPhoneByOfficerId(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetOfficerPhoneByOfficerId(response_);
                } catch (e) {
                    return <Observable<string>><any>Observable.throw(e);
                }
            } else
                return <Observable<string>><any>Observable.throw(response_);
        });
    }

    protected processGetOfficerPhoneByOfficerId(response: Response): Observable<string> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<string>(<any>null);
    }
}

@Injectable()
export class MsPointPctServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @input (optional) 
     * @return Success
     */
    createMsPointPct(input: InputPointPctDto[]): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsPointPct/CreateMsPointPct";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateMsPointPct(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateMsPointPct(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateMsPointPct(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteMsPointPct(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsPointPct/DeleteMsPointPct?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processDeleteMsPointPct(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteMsPointPct(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteMsPointPct(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getMsPointPctBySchemaId(schemaID: number): Observable<ListResultDtoOfGetAllPointPctListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsPointPct/GetMsPointPctBySchemaId?";
        if (schemaID === undefined || schemaID === null)
            throw new Error("The parameter 'schemaID' must be defined and cannot be null.");
        else
            url_ += "schemaID=" + encodeURIComponent("" + schemaID) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetMsPointPctBySchemaId(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMsPointPctBySchemaId(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetAllPointPctListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetAllPointPctListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetMsPointPctBySchemaId(response: Response): Observable<ListResultDtoOfGetAllPointPctListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetAllPointPctListDto.fromJS(resultData200) : new ListResultDtoOfGetAllPointPctListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetAllPointPctListDto>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    updateMsPointPct(input: InputPointPctDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsPointPct/UpdateMsPointPct";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUpdateMsPointPct(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateMsPointPct(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateMsPointPct(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class MsPositionServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @input (optional) 
     * @return Success
     */
    createMsPosition(input: MsPositionInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsPosition/CreateMsPosition";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateMsPosition(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateMsPosition(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateMsPosition(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteMsPosition(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsPosition/DeleteMsPosition?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processDeleteMsPosition(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteMsPosition(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteMsPosition(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getAllMsPosition(): Observable<ListResultDtoOfGetAllMsPositionListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsPosition/GetAllMsPosition";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetAllMsPosition(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllMsPosition(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetAllMsPositionListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetAllMsPositionListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAllMsPosition(response: Response): Observable<ListResultDtoOfGetAllMsPositionListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetAllMsPositionListDto.fromJS(resultData200) : new ListResultDtoOfGetAllMsPositionListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetAllMsPositionListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getMsPositionByDepartment(departmentID: number): Observable<ListResultDtoOfGetMsPositionByDepartmentListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsPosition/GetMsPositionByDepartment?";
        if (departmentID === undefined || departmentID === null)
            throw new Error("The parameter 'departmentID' must be defined and cannot be null.");
        else
            url_ += "departmentID=" + encodeURIComponent("" + departmentID) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetMsPositionByDepartment(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMsPositionByDepartment(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetMsPositionByDepartmentListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetMsPositionByDepartmentListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetMsPositionByDepartment(response: Response): Observable<ListResultDtoOfGetMsPositionByDepartmentListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetMsPositionByDepartmentListDto.fromJS(resultData200) : new ListResultDtoOfGetMsPositionByDepartmentListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetMsPositionByDepartmentListDto>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    updateMsPosition(input: MsPositionInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsPosition/UpdateMsPosition";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUpdateMsPosition(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateMsPosition(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateMsPosition(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class MsPPhRangeServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @input (optional) 
     * @return Success
     */
    createMsPPhRange(input: CreateOrUpdatePPhRangeListDto[]): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsPPhRange/CreateMsPPhRange";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateMsPPhRange(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateMsPPhRange(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateMsPPhRange(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    updateMsPPhRange(input: CreateOrUpdatePPhRangeListDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsPPhRange/UpdateMsPPhRange";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUpdateMsPPhRange(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateMsPPhRange(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateMsPPhRange(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteMsPPhRange(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsPPhRange/DeleteMsPPhRange?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processDeleteMsPPhRange(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteMsPPhRange(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteMsPPhRange(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getMsPPhRangeBySchemaId(schemaID: number): Observable<ListResultDtoOfCreateOrUpdatePPhRangeListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsPPhRange/GetMsPPhRangeBySchemaId?";
        if (schemaID === undefined || schemaID === null)
            throw new Error("The parameter 'schemaID' must be defined and cannot be null.");
        else
            url_ += "schemaID=" + encodeURIComponent("" + schemaID) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetMsPPhRangeBySchemaId(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMsPPhRangeBySchemaId(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfCreateOrUpdatePPhRangeListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfCreateOrUpdatePPhRangeListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetMsPPhRangeBySchemaId(response: Response): Observable<ListResultDtoOfCreateOrUpdatePPhRangeListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfCreateOrUpdatePPhRangeListDto.fromJS(resultData200) : new ListResultDtoOfCreateOrUpdatePPhRangeListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfCreateOrUpdatePPhRangeListDto>(<any>null);
    }
}

@Injectable()
export class MsPPhRangeInstServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @input (optional) 
     * @return Success
     */
    createMsPPhRangeInst(input: CreateOrUpdatePPhRangeInstListDto[]): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsPPhRangeInst/CreateMsPPhRangeInst";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateMsPPhRangeInst(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateMsPPhRangeInst(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateMsPPhRangeInst(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteMsPPhRange(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsPPhRangeInst/DeleteMsPPhRange?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processDeleteMsPPhRange(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteMsPPhRange(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteMsPPhRange(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getMsPPhRangeInstBySchemaId(schemaID: number): Observable<ListResultDtoOfCreateOrUpdatePPhRangeInstListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsPPhRangeInst/GetMsPPhRangeInstBySchemaId?";
        if (schemaID === undefined || schemaID === null)
            throw new Error("The parameter 'schemaID' must be defined and cannot be null.");
        else
            url_ += "schemaID=" + encodeURIComponent("" + schemaID) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetMsPPhRangeInstBySchemaId(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMsPPhRangeInstBySchemaId(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfCreateOrUpdatePPhRangeInstListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfCreateOrUpdatePPhRangeInstListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetMsPPhRangeInstBySchemaId(response: Response): Observable<ListResultDtoOfCreateOrUpdatePPhRangeInstListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfCreateOrUpdatePPhRangeInstListDto.fromJS(resultData200) : new ListResultDtoOfCreateOrUpdatePPhRangeInstListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfCreateOrUpdatePPhRangeInstListDto>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    updateMsPPhRangeInst(input: CreateOrUpdatePPhRangeInstListDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsPPhRangeInst/UpdateMsPPhRangeInst";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUpdateMsPPhRangeInst(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateMsPPhRangeInst(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateMsPPhRangeInst(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class MsProductServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAllMsProduct(): Observable<ListResultDtoOfGetAllProductListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsProduct/GetAllMsProduct";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetAllMsProduct(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllMsProduct(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetAllProductListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetAllProductListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAllMsProduct(response: Response): Observable<ListResultDtoOfGetAllProductListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetAllProductListDto.fromJS(resultData200) : new ListResultDtoOfGetAllProductListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetAllProductListDto>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    createMsProduct(input: CreateMsProductDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsProduct/CreateMsProduct";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateMsProduct(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateMsProduct(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateMsProduct(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteMsProduct(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsProduct/DeleteMsProduct?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processDeleteMsProduct(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteMsProduct(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteMsProduct(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    updateMsProduct(input: UpdateMsProductDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsProduct/UpdateMsProduct";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUpdateMsProduct(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateMsProduct(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateMsProduct(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getMsProductDropdown(): Observable<ListResultDtoOfGetProductDropdownListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsProduct/GetMsProductDropdown";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetMsProductDropdown(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMsProductDropdown(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetProductDropdownListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetProductDropdownListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetMsProductDropdown(response: Response): Observable<ListResultDtoOfGetProductDropdownListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetProductDropdownListDto.fromJS(resultData200) : new ListResultDtoOfGetProductDropdownListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetProductDropdownListDto>(<any>null);
    }
}

@Injectable()
export class MsProjectServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAllMsProject(): Observable<ListResultDtoOfGetAllProjectListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsProject/GetAllMsProject";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetAllMsProject(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllMsProject(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetAllProjectListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetAllProjectListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAllMsProject(response: Response): Observable<ListResultDtoOfGetAllProjectListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetAllProjectListDto.fromJS(resultData200) : new ListResultDtoOfGetAllProjectListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetAllProjectListDto>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    createMsProject(input: CreateMsProjectInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsProject/CreateMsProject";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateMsProject(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateMsProject(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateMsProject(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    updateMsProject(input: CreateMsProjectInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsProject/UpdateMsProject";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUpdateMsProject(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateMsProject(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateMsProject(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDetailMsProject(id: number): Observable<GetDetailMsProjectListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsProject/GetDetailMsProject?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetDetailMsProject(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDetailMsProject(response_);
                } catch (e) {
                    return <Observable<GetDetailMsProjectListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetDetailMsProjectListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetDetailMsProject(response: Response): Observable<GetDetailMsProjectListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetDetailMsProjectListDto.fromJS(resultData200) : new GetDetailMsProjectListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetDetailMsProjectListDto>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    modifyDMT(input: GetUpdateDmtValueInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsProject/ModifyDMT";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processModifyDMT(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processModifyDMT(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processModifyDMT(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDMT(): Observable<GetUpdateDmtValueInputDto> {
        let url_ = this.baseUrl + "/api/services/app/MsProject/GetDMT";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetDMT(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDMT(response_);
                } catch (e) {
                    return <Observable<GetUpdateDmtValueInputDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetUpdateDmtValueInputDto>><any>Observable.throw(response_);
        });
    }

    protected processGetDMT(response: Response): Observable<GetUpdateDmtValueInputDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetUpdateDmtValueInputDto.fromJS(resultData200) : new GetUpdateDmtValueInputDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetUpdateDmtValueInputDto>(<any>null);
    }

    /**
     * @return Success
     */
    getMappingDMT(): Observable<GetMappingDMTListDto[]> {
        let url_ = this.baseUrl + "/api/services/app/MsProject/GetMappingDMT";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetMappingDMT(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMappingDMT(response_);
                } catch (e) {
                    return <Observable<GetMappingDMTListDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetMappingDMTListDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetMappingDMT(response: Response): Observable<GetMappingDMTListDto[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(GetMappingDMTListDto.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetMappingDMTListDto[]>(<any>null);
    }

    /**
     * @return Success
     */
    getMappingCorsec(): Observable<GetMappingCorsecListDto[]> {
        let url_ = this.baseUrl + "/api/services/app/MsProject/GetMappingCorsec";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetMappingCorsec(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMappingCorsec(response_);
                } catch (e) {
                    return <Observable<GetMappingCorsecListDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetMappingCorsecListDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetMappingCorsec(response: Response): Observable<GetMappingCorsecListDto[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(GetMappingCorsecListDto.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetMappingCorsecListDto[]>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    modifyCorsec(input: GetUpdateDmtValueInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsProject/ModifyCorsec";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processModifyCorsec(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processModifyCorsec(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processModifyCorsec(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getCorsec(): Observable<GetUpdateDmtValueInputDto> {
        let url_ = this.baseUrl + "/api/services/app/MsProject/GetCorsec";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetCorsec(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCorsec(response_);
                } catch (e) {
                    return <Observable<GetUpdateDmtValueInputDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetUpdateDmtValueInputDto>><any>Observable.throw(response_);
        });
    }

    protected processGetCorsec(response: Response): Observable<GetUpdateDmtValueInputDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetUpdateDmtValueInputDto.fromJS(resultData200) : new GetUpdateDmtValueInputDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetUpdateDmtValueInputDto>(<any>null);
    }

    /**
     * @return Success
     */
    deleteMsProject(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsProject/DeleteMsProject?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processDeleteMsProject(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteMsProject(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteMsProject(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class MsRenovationServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @inputs (optional) 
     * @return Success
     */
    createMsRenovation(inputs: CreateMsRenovationInput[]): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsRenovation/CreateMsRenovation";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(inputs);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateMsRenovation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateMsRenovation(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateMsRenovation(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @filename (optional) 
     * @return Success
     */
    deleteFileTempRenovation(filename: string): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsRenovation/DeleteFileTempRenovation?";
        if (filename !== undefined)
            url_ += "filename=" + encodeURIComponent("" + filename) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processDeleteFileTempRenovation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteFileTempRenovation(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteFileTempRenovation(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteMsRenovation(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsRenovation/DeleteMsRenovation?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processDeleteMsRenovation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteMsRenovation(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteMsRenovation(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getAllMsRenovation(): Observable<ListResultDtoOfGetAllMsRenovationListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsRenovation/GetAllMsRenovation";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetAllMsRenovation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllMsRenovation(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetAllMsRenovationListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetAllMsRenovationListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAllMsRenovation(response: Response): Observable<ListResultDtoOfGetAllMsRenovationListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetAllMsRenovationListDto.fromJS(resultData200) : new ListResultDtoOfGetAllMsRenovationListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetAllMsRenovationListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getAllMsRenovationIsActive(): Observable<ListResultDtoOfGetAllMsRenovationListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsRenovation/GetAllMsRenovationIsActive";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetAllMsRenovationIsActive(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllMsRenovationIsActive(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetAllMsRenovationListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetAllMsRenovationListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAllMsRenovationIsActive(response: Response): Observable<ListResultDtoOfGetAllMsRenovationListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetAllMsRenovationListDto.fromJS(resultData200) : new ListResultDtoOfGetAllMsRenovationListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetAllMsRenovationListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getItemDropdown(): Observable<ListResultDtoOfGetLkItemListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsRenovation/GetItemDropdown";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetItemDropdown(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetItemDropdown(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetLkItemListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetLkItemListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetItemDropdown(response: Response): Observable<ListResultDtoOfGetLkItemListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetLkItemListDto.fromJS(resultData200) : new ListResultDtoOfGetLkItemListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetLkItemListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getAllMsRenovationByProject(projectID: number): Observable<ListResultDtoOfGetAllMsRenovationListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsRenovation/GetAllMsRenovationByProject?";
        if (projectID === undefined || projectID === null)
            throw new Error("The parameter 'projectID' must be defined and cannot be null.");
        else
            url_ += "projectID=" + encodeURIComponent("" + projectID) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetAllMsRenovationByProject(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllMsRenovationByProject(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetAllMsRenovationListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetAllMsRenovationListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAllMsRenovationByProject(response: Response): Observable<ListResultDtoOfGetAllMsRenovationListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetAllMsRenovationListDto.fromJS(resultData200) : new ListResultDtoOfGetAllMsRenovationListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetAllMsRenovationListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getMsRenovationDropdown(): Observable<ListResultDtoOfGetAllMsRenovationListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsRenovation/GetMsRenovationDropdown";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetMsRenovationDropdown(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMsRenovationDropdown(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetAllMsRenovationListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetAllMsRenovationListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetMsRenovationDropdown(response: Response): Observable<ListResultDtoOfGetAllMsRenovationListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetAllMsRenovationListDto.fromJS(resultData200) : new ListResultDtoOfGetAllMsRenovationListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetAllMsRenovationListDto>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    updateMsRenovation(input: UpdateMsRenovationInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsRenovation/UpdateMsRenovation";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUpdateMsRenovation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateMsRenovation(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateMsRenovation(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class MsSchemaServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @sorting (optional) 
     * @return Success
     */
    getAllMsSchema(schemaID: number, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfGetAllMsSchemaListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsSchema/GetAllMsSchema?";
        if (schemaID === undefined || schemaID === null)
            throw new Error("The parameter 'schemaID' must be defined and cannot be null.");
        else
            url_ += "schemaID=" + encodeURIComponent("" + schemaID) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount === undefined || maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' must be defined and cannot be null.");
        else
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount === undefined || skipCount === null)
            throw new Error("The parameter 'skipCount' must be defined and cannot be null.");
        else
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetAllMsSchema(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllMsSchema(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfGetAllMsSchemaListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfGetAllMsSchemaListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAllMsSchema(response: Response): Observable<PagedResultDtoOfGetAllMsSchemaListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfGetAllMsSchemaListDto.fromJS(resultData200) : new PagedResultDtoOfGetAllMsSchemaListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<PagedResultDtoOfGetAllMsSchemaListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getMsSchemaRequirementBySchemaID(schemaID: number, isComplete: boolean): Observable<GetMsSchemaRequirementListDto[]> {
        let url_ = this.baseUrl + "/api/services/app/MsSchema/GetMsSchemaRequirementBySchemaID?";
        if (schemaID === undefined || schemaID === null)
            throw new Error("The parameter 'schemaID' must be defined and cannot be null.");
        else
            url_ += "schemaID=" + encodeURIComponent("" + schemaID) + "&"; 
        if (isComplete === undefined || isComplete === null)
            throw new Error("The parameter 'isComplete' must be defined and cannot be null.");
        else
            url_ += "isComplete=" + encodeURIComponent("" + isComplete) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetMsSchemaRequirementBySchemaID(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMsSchemaRequirementBySchemaID(response_);
                } catch (e) {
                    return <Observable<GetMsSchemaRequirementListDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetMsSchemaRequirementListDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetMsSchemaRequirementBySchemaID(response: Response): Observable<GetMsSchemaRequirementListDto[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(GetMsSchemaRequirementListDto.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetMsSchemaRequirementListDto[]>(<any>null);
    }

    /**
     * @return Success
     */
    getLkCommTypeBySchemaID(schemaID: number, isComplete: boolean): Observable<GetLkCommTypeListDto[]> {
        let url_ = this.baseUrl + "/api/services/app/MsSchema/GetLkCommTypeBySchemaID?";
        if (schemaID === undefined || schemaID === null)
            throw new Error("The parameter 'schemaID' must be defined and cannot be null.");
        else
            url_ += "schemaID=" + encodeURIComponent("" + schemaID) + "&"; 
        if (isComplete === undefined || isComplete === null)
            throw new Error("The parameter 'isComplete' must be defined and cannot be null.");
        else
            url_ += "isComplete=" + encodeURIComponent("" + isComplete) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetLkCommTypeBySchemaID(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetLkCommTypeBySchemaID(response_);
                } catch (e) {
                    return <Observable<GetLkCommTypeListDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetLkCommTypeListDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetLkCommTypeBySchemaID(response: Response): Observable<GetLkCommTypeListDto[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(GetLkCommTypeListDto.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetLkCommTypeListDto[]>(<any>null);
    }

    /**
     * @return Success
     */
    getMsStatusMemberBySchemaID(schemaID: number, isComplete: boolean): Observable<GetMsStatusMemberListDto[]> {
        let url_ = this.baseUrl + "/api/services/app/MsSchema/GetMsStatusMemberBySchemaID?";
        if (schemaID === undefined || schemaID === null)
            throw new Error("The parameter 'schemaID' must be defined and cannot be null.");
        else
            url_ += "schemaID=" + encodeURIComponent("" + schemaID) + "&"; 
        if (isComplete === undefined || isComplete === null)
            throw new Error("The parameter 'isComplete' must be defined and cannot be null.");
        else
            url_ += "isComplete=" + encodeURIComponent("" + isComplete) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetMsStatusMemberBySchemaID(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMsStatusMemberBySchemaID(response_);
                } catch (e) {
                    return <Observable<GetMsStatusMemberListDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetMsStatusMemberListDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetMsStatusMemberBySchemaID(response: Response): Observable<GetMsStatusMemberListDto[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(GetMsStatusMemberListDto.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetMsStatusMemberListDto[]>(<any>null);
    }

    /**
     * @return Success
     */
    getLkPointTypeBySchemaID(schemaID: number, isComplete: boolean): Observable<GetLkPointTypeListDto[]> {
        let url_ = this.baseUrl + "/api/services/app/MsSchema/GetLkPointTypeBySchemaID?";
        if (schemaID === undefined || schemaID === null)
            throw new Error("The parameter 'schemaID' must be defined and cannot be null.");
        else
            url_ += "schemaID=" + encodeURIComponent("" + schemaID) + "&"; 
        if (isComplete === undefined || isComplete === null)
            throw new Error("The parameter 'isComplete' must be defined and cannot be null.");
        else
            url_ += "isComplete=" + encodeURIComponent("" + isComplete) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetLkPointTypeBySchemaID(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetLkPointTypeBySchemaID(response_);
                } catch (e) {
                    return <Observable<GetLkPointTypeListDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetLkPointTypeListDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetLkPointTypeBySchemaID(response: Response): Observable<GetLkPointTypeListDto[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(GetLkPointTypeListDto.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetLkPointTypeListDto[]>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    createOrUpdateMsSchemaRequirement(input: CreateMsSchemaRequirementInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsSchema/CreateOrUpdateMsSchemaRequirement";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateOrUpdateMsSchemaRequirement(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateMsSchemaRequirement(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateMsSchemaRequirement(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    createOrUpdateMsStatusMember(input: CreateMsStatusMemberInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsSchema/CreateOrUpdateMsStatusMember";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateOrUpdateMsStatusMember(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateMsStatusMember(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateMsStatusMember(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    createOrUpdateMsSchema(input: CreateOrUpdateSetSchemaInputDto): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/MsSchema/CreateOrUpdateMsSchema";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateOrUpdateMsSchema(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateMsSchema(response_);
                } catch (e) {
                    return <Observable<number>><any>Observable.throw(e);
                }
            } else
                return <Observable<number>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateMsSchema(response: Response): Observable<number> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<number>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    createOrUpdateLkPointType(input: CreateOrUpdateSetPointTypeInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsSchema/CreateOrUpdateLkPointType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateOrUpdateLkPointType(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateLkPointType(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateLkPointType(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getMsCommPctBySchemaID(schemaID: number, isComplete: boolean): Observable<GetMsCommPctListDto[]> {
        let url_ = this.baseUrl + "/api/services/app/MsSchema/GetMsCommPctBySchemaID?";
        if (schemaID === undefined || schemaID === null)
            throw new Error("The parameter 'schemaID' must be defined and cannot be null.");
        else
            url_ += "schemaID=" + encodeURIComponent("" + schemaID) + "&"; 
        if (isComplete === undefined || isComplete === null)
            throw new Error("The parameter 'isComplete' must be defined and cannot be null.");
        else
            url_ += "isComplete=" + encodeURIComponent("" + isComplete) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetMsCommPctBySchemaID(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMsCommPctBySchemaID(response_);
                } catch (e) {
                    return <Observable<GetMsCommPctListDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetMsCommPctListDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetMsCommPctBySchemaID(response: Response): Observable<GetMsCommPctListDto[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(GetMsCommPctListDto.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetMsCommPctListDto[]>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    createOrUpdateLkCommType(input: CreateOrUpdateSetCommTypeInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsSchema/CreateOrUpdateLkCommType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateOrUpdateLkCommType(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateLkCommType(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateLkCommType(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    createOrUpdateMsCommPct(input: CreateOrUpdateMsCommPctInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsSchema/CreateOrUpdateMsCommPct";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateOrUpdateMsCommPct(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateMsCommPct(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateMsCommPct(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDetailMsSchema(schemaID: number): Observable<CreateOrUpdateSetSchemaInputDto> {
        let url_ = this.baseUrl + "/api/services/app/MsSchema/GetDetailMsSchema?";
        if (schemaID === undefined || schemaID === null)
            throw new Error("The parameter 'schemaID' must be defined and cannot be null.");
        else
            url_ += "schemaID=" + encodeURIComponent("" + schemaID) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetDetailMsSchema(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDetailMsSchema(response_);
                } catch (e) {
                    return <Observable<CreateOrUpdateSetSchemaInputDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<CreateOrUpdateSetSchemaInputDto>><any>Observable.throw(response_);
        });
    }

    protected processGetDetailMsSchema(response: Response): Observable<CreateOrUpdateSetSchemaInputDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? CreateOrUpdateSetSchemaInputDto.fromJS(resultData200) : new CreateOrUpdateSetSchemaInputDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<CreateOrUpdateSetSchemaInputDto>(<any>null);
    }

    /**
     * @flag (optional) 
     * @return Success
     */
    deleteLkPointType(id: number, flag: string): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsSchema/DeleteLkPointType?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        if (flag !== undefined)
            url_ += "flag=" + encodeURIComponent("" + flag) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processDeleteLkPointType(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteLkPointType(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteLkPointType(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteMsSchema(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsSchema/DeleteMsSchema?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processDeleteMsSchema(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteMsSchema(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteMsSchema(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @flag (optional) 
     * @return Success
     */
    deleteMsSchemaRequirement(id: number, flag: string): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsSchema/DeleteMsSchemaRequirement?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        if (flag !== undefined)
            url_ += "flag=" + encodeURIComponent("" + flag) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processDeleteMsSchemaRequirement(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteMsSchemaRequirement(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteMsSchemaRequirement(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @flag (optional) 
     * @return Success
     */
    deleteMsStatusMember(id: number, flag: string): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsSchema/DeleteMsStatusMember?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        if (flag !== undefined)
            url_ += "flag=" + encodeURIComponent("" + flag) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processDeleteMsStatusMember(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteMsStatusMember(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteMsStatusMember(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateIsComplete(schemaID: number, flag: boolean): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsSchema/UpdateIsComplete?";
        if (schemaID === undefined || schemaID === null)
            throw new Error("The parameter 'schemaID' must be defined and cannot be null.");
        else
            url_ += "schemaID=" + encodeURIComponent("" + schemaID) + "&"; 
        if (flag === undefined || flag === null)
            throw new Error("The parameter 'flag' must be defined and cannot be null.");
        else
            url_ += "flag=" + encodeURIComponent("" + flag) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUpdateIsComplete(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateIsComplete(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateIsComplete(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getLkUpline(schemaID: number): Observable<GetLkUplineListDto[]> {
        let url_ = this.baseUrl + "/api/services/app/MsSchema/GetLkUpline?";
        if (schemaID === undefined || schemaID === null)
            throw new Error("The parameter 'schemaID' must be defined and cannot be null.");
        else
            url_ += "schemaID=" + encodeURIComponent("" + schemaID) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetLkUpline(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetLkUpline(response_);
                } catch (e) {
                    return <Observable<GetLkUplineListDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetLkUplineListDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetLkUpline(response: Response): Observable<GetLkUplineListDto[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(GetLkUplineListDto.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetLkUplineListDto[]>(<any>null);
    }

    /**
     * @flag (optional) 
     * @return Success
     */
    deleteLkCommType(id: number, flag: string): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsSchema/DeleteLkCommType?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        if (flag !== undefined)
            url_ += "flag=" + encodeURIComponent("" + flag) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processDeleteLkCommType(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteLkCommType(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteLkCommType(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @flag (optional) 
     * @return Success
     */
    deleteMsCommPct(id: number, flag: string): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsSchema/DeleteMsCommPct?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        if (flag !== undefined)
            url_ += "flag=" + encodeURIComponent("" + flag) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processDeleteMsCommPct(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteMsCommPct(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteMsCommPct(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class MsTermServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getTermCodeDropdown(): Observable<ListResultDtoOfGetAllMsTermListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsTerm/GetTermCodeDropdown";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetTermCodeDropdown(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetTermCodeDropdown(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetAllMsTermListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetAllMsTermListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetTermCodeDropdown(response: Response): Observable<ListResultDtoOfGetAllMsTermListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetAllMsTermListDto.fromJS(resultData200) : new ListResultDtoOfGetAllMsTermListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetAllMsTermListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getTermNoDropdown(termMainID: number): Observable<ListResultDtoOfGetAllMsTermListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsTerm/GetTermNoDropdown?";
        if (termMainID === undefined || termMainID === null)
            throw new Error("The parameter 'termMainID' must be defined and cannot be null.");
        else
            url_ += "termMainID=" + encodeURIComponent("" + termMainID) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetTermNoDropdown(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetTermNoDropdown(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetAllMsTermListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetAllMsTermListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetTermNoDropdown(response: Response): Observable<ListResultDtoOfGetAllMsTermListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetAllMsTermListDto.fromJS(resultData200) : new ListResultDtoOfGetAllMsTermListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetAllMsTermListDto>(<any>null);
    }

    /**
     * @sorting (optional) 
     * @return Success
     */
    getMsTermByTermCode(id: number, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfGetAllMsTermListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsTerm/GetMsTermByTermCode?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount === undefined || maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' must be defined and cannot be null.");
        else
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount === undefined || skipCount === null)
            throw new Error("The parameter 'skipCount' must be defined and cannot be null.");
        else
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetMsTermByTermCode(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMsTermByTermCode(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfGetAllMsTermListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfGetAllMsTermListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetMsTermByTermCode(response: Response): Observable<PagedResultDtoOfGetAllMsTermListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfGetAllMsTermListDto.fromJS(resultData200) : new PagedResultDtoOfGetAllMsTermListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<PagedResultDtoOfGetAllMsTermListDto>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    updateMsTermStatus(input: UpdateMsTermStatusInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsTerm/UpdateMsTermStatus";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUpdateMsTermStatus(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateMsTermStatus(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateMsTermStatus(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    createUniversalMsTerm(input: CreateUniversalMsTermInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsTerm/CreateUniversalMsTerm";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateUniversalMsTerm(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateUniversalMsTerm(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateUniversalMsTerm(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    createMsTermMain(input: CreateMsTermMainInput): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/MsTerm/CreateMsTermMain";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateMsTermMain(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateMsTermMain(response_);
                } catch (e) {
                    return <Observable<number>><any>Observable.throw(e);
                }
            } else
                return <Observable<number>><any>Observable.throw(response_);
        });
    }

    protected processCreateMsTermMain(response: Response): Observable<number> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<number>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    createMsTerm(input: CreateMsTermInput): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/MsTerm/CreateMsTerm";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateMsTerm(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateMsTerm(response_);
                } catch (e) {
                    return <Observable<number>><any>Observable.throw(e);
                }
            } else
                return <Observable<number>><any>Observable.throw(response_);
        });
    }

    protected processCreateMsTerm(response: Response): Observable<number> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<number>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    createMsTermPmt(input: CreateMsTermPmtInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsTerm/CreateMsTermPmt";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateMsTermPmt(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateMsTermPmt(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateMsTermPmt(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    createMsTermDP(input: CreateMsTermDPInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsTerm/CreateMsTermDP";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateMsTermDP(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateMsTermDP(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateMsTermDP(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    createMsTermAddDisc(input: CreateMsTermAddDiscInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsTerm/CreateMsTermAddDisc";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateMsTermAddDisc(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateMsTermAddDisc(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateMsTermAddDisc(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @termCode (optional) 
     * @return Success
     */
    getExistingTermByTermCode(termCode: string): Observable<GetExistingTermDto> {
        let url_ = this.baseUrl + "/api/services/app/MsTerm/GetExistingTermByTermCode?";
        if (termCode !== undefined)
            url_ += "termCode=" + encodeURIComponent("" + termCode) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetExistingTermByTermCode(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetExistingTermByTermCode(response_);
                } catch (e) {
                    return <Observable<GetExistingTermDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetExistingTermDto>><any>Observable.throw(response_);
        });
    }

    protected processGetExistingTermByTermCode(response: Response): Observable<GetExistingTermDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetExistingTermDto.fromJS(resultData200) : new GetExistingTermDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetExistingTermDto>(<any>null);
    }

    /**
     * @return Success
     */
    getDiscountDropdown(): Observable<GetMsDiscountDto[]> {
        let url_ = this.baseUrl + "/api/services/app/MsTerm/GetDiscountDropdown";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetDiscountDropdown(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDiscountDropdown(response_);
                } catch (e) {
                    return <Observable<GetMsDiscountDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetMsDiscountDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetDiscountDropdown(response: Response): Observable<GetMsDiscountDto[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(GetMsDiscountDto.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetMsDiscountDto[]>(<any>null);
    }

    /**
     * @return Success
     */
    getFinTypeDropdown(): Observable<GetMsFinTypeDto[]> {
        let url_ = this.baseUrl + "/api/services/app/MsTerm/GetFinTypeDropdown";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetFinTypeDropdown(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetFinTypeDropdown(response_);
                } catch (e) {
                    return <Observable<GetMsFinTypeDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetMsFinTypeDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetFinTypeDropdown(response: Response): Observable<GetMsFinTypeDto[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(GetMsFinTypeDto.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetMsFinTypeDto[]>(<any>null);
    }

    /**
     * @termCode (optional) 
     * @return Success
     */
    checkAvailableTermCode(termCode: string): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/MsTerm/CheckAvailableTermCode?";
        if (termCode !== undefined)
            url_ += "termCode=" + encodeURIComponent("" + termCode) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCheckAvailableTermCode(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCheckAvailableTermCode(response_);
                } catch (e) {
                    return <Observable<string>><any>Observable.throw(e);
                }
            } else
                return <Observable<string>><any>Observable.throw(response_);
        });
    }

    protected processCheckAvailableTermCode(response: Response): Observable<string> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<string>(<any>null);
    }

    /**
     * @return Success
     */
    getDiscountDropdownExcludeSalesLaunchDisc(): Observable<GetMsDiscountDto[]> {
        let url_ = this.baseUrl + "/api/services/app/MsTerm/GetDiscountDropdownExcludeSalesLaunchDisc";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetDiscountDropdownExcludeSalesLaunchDisc(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDiscountDropdownExcludeSalesLaunchDisc(response_);
                } catch (e) {
                    return <Observable<GetMsDiscountDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetMsDiscountDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetDiscountDropdownExcludeSalesLaunchDisc(response: Response): Observable<GetMsDiscountDto[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(GetMsDiscountDto.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetMsDiscountDto[]>(<any>null);
    }

    /**
     * @return Success
     */
    getDpCalc(): Observable<GetDpCalcListDto[]> {
        let url_ = this.baseUrl + "/api/services/app/MsTerm/GetDpCalc";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetDpCalc(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDpCalc(response_);
                } catch (e) {
                    return <Observable<GetDpCalcListDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetDpCalcListDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetDpCalc(response: Response): Observable<GetDpCalcListDto[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(GetDpCalcListDto.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetDpCalcListDto[]>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    updateMsTermMain(input: UpdateMsTermMainInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsTerm/UpdateMsTermMain";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUpdateMsTermMain(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateMsTermMain(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateMsTermMain(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    updateMsTerm(input: UpdateMsTermInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsTerm/UpdateMsTerm";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUpdateMsTerm(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateMsTerm(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateMsTerm(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    updateMsTermPmt(input: UpdateMsTermPmtInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsTerm/UpdateMsTermPmt";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUpdateMsTermPmt(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateMsTermPmt(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateMsTermPmt(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    createOrUpdateMsTermDP(input: UpdateMsTermDPInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsTerm/CreateOrUpdateMsTermDP";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateOrUpdateMsTermDP(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateMsTermDP(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateMsTermDP(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    updateMsTermAddDisc(input: UpdateMsTermAddDiscInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsTerm/UpdateMsTermAddDisc";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUpdateMsTermAddDisc(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateMsTermAddDisc(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateMsTermAddDisc(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    updateUniversalMsTerm(input: UpdateUniversalMsTermInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsTerm/UpdateUniversalMsTerm";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUpdateUniversalMsTerm(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateUniversalMsTerm(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateUniversalMsTerm(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class MsTerritoryServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAllDropdownMsTerritory(): Observable<ListResultDtoOfGetMsTerritoryListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsTerritory/GetAllDropdownMsTerritory";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetAllDropdownMsTerritory(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllDropdownMsTerritory(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetMsTerritoryListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetMsTerritoryListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAllDropdownMsTerritory(response: Response): Observable<ListResultDtoOfGetMsTerritoryListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetMsTerritoryListDto.fromJS(resultData200) : new ListResultDtoOfGetMsTerritoryListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetMsTerritoryListDto>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    createMsTerritory(input: GetCreateMsTerritoryInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsTerritory/CreateMsTerritory";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateMsTerritory(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateMsTerritory(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateMsTerritory(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class MsUnitServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @input (optional) 
     * @return Success
     */
    createMsUnit(input: CreateUnitInputDto): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/MsUnit/CreateMsUnit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateMsUnit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateMsUnit(response_);
                } catch (e) {
                    return <Observable<number>><any>Observable.throw(e);
                }
            } else
                return <Observable<number>><any>Observable.throw(response_);
        });
    }

    protected processCreateMsUnit(response: Response): Observable<number> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<number>(<any>null);
    }

    /**
     * @return Success
     */
    getMsFacingDropdown(): Observable<ListResultDtoOfGetFacingDropdownListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsUnit/GetMsFacingDropdown";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetMsFacingDropdown(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMsFacingDropdown(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetFacingDropdownListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetFacingDropdownListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetMsFacingDropdown(response: Response): Observable<ListResultDtoOfGetFacingDropdownListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetFacingDropdownListDto.fromJS(resultData200) : new ListResultDtoOfGetFacingDropdownListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetFacingDropdownListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getMsZoningDropdown(): Observable<ListResultDtoOfGetZoningDropdownListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsUnit/GetMsZoningDropdown";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetMsZoningDropdown(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMsZoningDropdown(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetZoningDropdownListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetZoningDropdownListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetMsZoningDropdown(response: Response): Observable<ListResultDtoOfGetZoningDropdownListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetZoningDropdownListDto.fromJS(resultData200) : new ListResultDtoOfGetZoningDropdownListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetZoningDropdownListDto>(<any>null);
    }

    /**
     * @unitCode (optional) 
     * @return Success
     */
    createMsUnitCodeForExcel(unitCode: string): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/MsUnit/CreateMsUnitCodeForExcel?";
        if (unitCode !== undefined)
            url_ += "unitCode=" + encodeURIComponent("" + unitCode) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateMsUnitCodeForExcel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateMsUnitCodeForExcel(response_);
                } catch (e) {
                    return <Observable<number>><any>Observable.throw(e);
                }
            } else
                return <Observable<number>><any>Observable.throw(response_);
        });
    }

    protected processCreateMsUnitCodeForExcel(response: Response): Observable<number> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<number>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    createMsCluster(input: CreateClusterInputDto): Observable<CreateClusterInputDto> {
        let url_ = this.baseUrl + "/api/services/app/MsUnit/CreateMsCluster";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateMsCluster(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateMsCluster(response_);
                } catch (e) {
                    return <Observable<CreateClusterInputDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<CreateClusterInputDto>><any>Observable.throw(response_);
        });
    }

    protected processCreateMsCluster(response: Response): Observable<CreateClusterInputDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? CreateClusterInputDto.fromJS(resultData200) : new CreateClusterInputDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<CreateClusterInputDto>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    createMsUnitItem(input: CreateUnitItemInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsUnit/CreateMsUnitItem";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateMsUnitItem(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateMsUnitItem(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateMsUnitItem(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    createUniversalExcel(input: CreateUniversalExcelInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsUnit/CreateUniversalExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateUniversalExcel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateUniversalExcel(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateUniversalExcel(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getMsProjectDropdown(): Observable<ListResultDtoOfGetProjectDropdownListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsUnit/GetMsProjectDropdown";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetMsProjectDropdown(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMsProjectDropdown(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetProjectDropdownListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetProjectDropdownListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetMsProjectDropdown(response: Response): Observable<ListResultDtoOfGetProjectDropdownListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetProjectDropdownListDto.fromJS(resultData200) : new ListResultDtoOfGetProjectDropdownListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetProjectDropdownListDto>(<any>null);
    }

    /**
     * @inputs (optional) 
     * @return Success
     */
    getUnavailableUnitNo(inputs: any[]): Observable<ListResultDtoOfGetUnavailableUnitNoListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsUnit/GetUnavailableUnitNo?";
        if (inputs !== undefined)
            inputs && inputs.forEach((item, index) => { 
                for (let attr in item)
                    url_ += "inputs[" + index + "]." + attr + "=" + encodeURIComponent("" + item[attr]) + "&";
            });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetUnavailableUnitNo(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetUnavailableUnitNo(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetUnavailableUnitNoListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetUnavailableUnitNoListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetUnavailableUnitNo(response: Response): Observable<ListResultDtoOfGetUnavailableUnitNoListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetUnavailableUnitNoListDto.fromJS(resultData200) : new ListResultDtoOfGetUnavailableUnitNoListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetUnavailableUnitNoListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getUnitByFloor(unitCodeID: number): Observable<ListResultDtoOfGetUnitByFloorListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsUnit/GetUnitByFloor?";
        if (unitCodeID === undefined || unitCodeID === null)
            throw new Error("The parameter 'unitCodeID' must be defined and cannot be null.");
        else
            url_ += "unitCodeID=" + encodeURIComponent("" + unitCodeID) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetUnitByFloor(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetUnitByFloor(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetUnitByFloorListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetUnitByFloorListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetUnitByFloor(response: Response): Observable<ListResultDtoOfGetUnitByFloorListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetUnitByFloorListDto.fromJS(resultData200) : new ListResultDtoOfGetUnitByFloorListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetUnitByFloorListDto>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    getProductCodeByUnitCodeUnitNo(input: any[]): Observable<ListResultDtoOfGetProjectCodeByUnitCodeUnitNoListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsUnit/GetProductCodeByUnitCodeUnitNo?";
        if (input !== undefined)
            input && input.forEach((item, index) => { 
                for (let attr in item)
                    url_ += "input[" + index + "]." + attr + "=" + encodeURIComponent("" + item[attr]) + "&";
            });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetProductCodeByUnitCodeUnitNo(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetProductCodeByUnitCodeUnitNo(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetProjectCodeByUnitCodeUnitNoListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetProjectCodeByUnitCodeUnitNoListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetProductCodeByUnitCodeUnitNo(response: Response): Observable<ListResultDtoOfGetProjectCodeByUnitCodeUnitNoListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetProjectCodeByUnitCodeUnitNoListDto.fromJS(resultData200) : new ListResultDtoOfGetProjectCodeByUnitCodeUnitNoListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetProjectCodeByUnitCodeUnitNoListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getUnitByProjectCategory(projectID: number, categoryID: number): Observable<ListResultDtoOfGetUnitByProjectCategoryListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsUnit/GetUnitByProjectCategory?";
        if (projectID === undefined || projectID === null)
            throw new Error("The parameter 'projectID' must be defined and cannot be null.");
        else
            url_ += "projectID=" + encodeURIComponent("" + projectID) + "&"; 
        if (categoryID === undefined || categoryID === null)
            throw new Error("The parameter 'categoryID' must be defined and cannot be null.");
        else
            url_ += "categoryID=" + encodeURIComponent("" + categoryID) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetUnitByProjectCategory(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetUnitByProjectCategory(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetUnitByProjectCategoryListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetUnitByProjectCategoryListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetUnitByProjectCategory(response: Response): Observable<ListResultDtoOfGetUnitByProjectCategoryListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetUnitByProjectCategoryListDto.fromJS(resultData200) : new ListResultDtoOfGetUnitByProjectCategoryListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetUnitByProjectCategoryListDto>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    manageStatusMsUnit(input: ManageStatusMsUnitInput[]): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsUnit/ManageStatusMsUnit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processManageStatusMsUnit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processManageStatusMsUnit(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processManageStatusMsUnit(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getUnitCodeByProject(projectId: number): Observable<ListResultDtoOfGetUnitCodeByProjectListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsUnit/GetUnitCodeByProject?";
        if (projectId === undefined || projectId === null)
            throw new Error("The parameter 'projectId' must be defined and cannot be null.");
        else
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetUnitCodeByProject(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetUnitCodeByProject(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetUnitCodeByProjectListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetUnitCodeByProjectListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetUnitCodeByProject(response: Response): Observable<ListResultDtoOfGetUnitCodeByProjectListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetUnitCodeByProjectListDto.fromJS(resultData200) : new ListResultDtoOfGetUnitCodeByProjectListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetUnitCodeByProjectListDto>(<any>null);
    }

    /**
     * @unitCode (optional) 
     * @return Success
     */
    getUnitNoByUnitCode(unitCode: string): Observable<ListResultDtoOfGetUnitNoByUnitCodeListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsUnit/GetUnitNoByUnitCode?";
        if (unitCode !== undefined)
            url_ += "unitCode=" + encodeURIComponent("" + unitCode) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetUnitNoByUnitCode(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetUnitNoByUnitCode(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetUnitNoByUnitCodeListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetUnitNoByUnitCodeListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetUnitNoByUnitCode(response: Response): Observable<ListResultDtoOfGetUnitNoByUnitCodeListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetUnitNoByUnitCodeListDto.fromJS(resultData200) : new ListResultDtoOfGetUnitNoByUnitCodeListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetUnitNoByUnitCodeListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getFloorByCluster(clusterID: number): Observable<ListResultDtoOfGetFloorByClusterListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsUnit/GetFloorByCluster?";
        if (clusterID === undefined || clusterID === null)
            throw new Error("The parameter 'clusterID' must be defined and cannot be null.");
        else
            url_ += "clusterID=" + encodeURIComponent("" + clusterID) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetFloorByCluster(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetFloorByCluster(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetFloorByClusterListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetFloorByClusterListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetFloorByCluster(response: Response): Observable<ListResultDtoOfGetFloorByClusterListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetFloorByClusterListDto.fromJS(resultData200) : new ListResultDtoOfGetFloorByClusterListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetFloorByClusterListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getUnitByCluster(clusterID: number): Observable<ListResultDtoOfGetUnitByClusterListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsUnit/GetUnitByCluster?";
        if (clusterID === undefined || clusterID === null)
            throw new Error("The parameter 'clusterID' must be defined and cannot be null.");
        else
            url_ += "clusterID=" + encodeURIComponent("" + clusterID) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetUnitByCluster(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetUnitByCluster(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetUnitByClusterListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetUnitByClusterListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetUnitByCluster(response: Response): Observable<ListResultDtoOfGetUnitByClusterListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetUnitByClusterListDto.fromJS(resultData200) : new ListResultDtoOfGetUnitByClusterListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetUnitByClusterListDto>(<any>null);
    }

    /**
     * @termCode (optional) 
     * @return Success
     */
    getUnitByProjectClusterTermCodeTermNo(projectID: number, clusterID: number, termCode: string, termNo: number): Observable<ListResultDtoOfGetUnitByProjectClusterTermCodeTermNoDto> {
        let url_ = this.baseUrl + "/api/services/app/MsUnit/GetUnitByProjectClusterTermCodeTermNo?";
        if (projectID === undefined || projectID === null)
            throw new Error("The parameter 'projectID' must be defined and cannot be null.");
        else
            url_ += "projectID=" + encodeURIComponent("" + projectID) + "&"; 
        if (clusterID === undefined || clusterID === null)
            throw new Error("The parameter 'clusterID' must be defined and cannot be null.");
        else
            url_ += "clusterID=" + encodeURIComponent("" + clusterID) + "&"; 
        if (termCode !== undefined)
            url_ += "termCode=" + encodeURIComponent("" + termCode) + "&"; 
        if (termNo === undefined || termNo === null)
            throw new Error("The parameter 'termNo' must be defined and cannot be null.");
        else
            url_ += "termNo=" + encodeURIComponent("" + termNo) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetUnitByProjectClusterTermCodeTermNo(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetUnitByProjectClusterTermCodeTermNo(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetUnitByProjectClusterTermCodeTermNoDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetUnitByProjectClusterTermCodeTermNoDto>><any>Observable.throw(response_);
        });
    }

    protected processGetUnitByProjectClusterTermCodeTermNo(response: Response): Observable<ListResultDtoOfGetUnitByProjectClusterTermCodeTermNoDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetUnitByProjectClusterTermCodeTermNoDto.fromJS(resultData200) : new ListResultDtoOfGetUnitByProjectClusterTermCodeTermNoDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetUnitByProjectClusterTermCodeTermNoDto>(<any>null);
    }
}

@Injectable()
export class MsUnitStatusServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAllMsUnitStatus(): Observable<ListResultDtoOfGetAllMsUnitStatusListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsUnitStatus/GetAllMsUnitStatus";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetAllMsUnitStatus(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllMsUnitStatus(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetAllMsUnitStatusListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetAllMsUnitStatusListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAllMsUnitStatus(response: Response): Observable<ListResultDtoOfGetAllMsUnitStatusListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetAllMsUnitStatusListDto.fromJS(resultData200) : new ListResultDtoOfGetAllMsUnitStatusListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetAllMsUnitStatusListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getMsUnitStatusDropdown(): Observable<ListResultDtoOfGetAllMsUnitStatusListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsUnitStatus/GetMsUnitStatusDropdown";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetMsUnitStatusDropdown(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMsUnitStatusDropdown(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetAllMsUnitStatusListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetAllMsUnitStatusListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetMsUnitStatusDropdown(response: Response): Observable<ListResultDtoOfGetAllMsUnitStatusListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetAllMsUnitStatusListDto.fromJS(resultData200) : new ListResultDtoOfGetAllMsUnitStatusListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetAllMsUnitStatusListDto>(<any>null);
    }
}

@Injectable()
export class MsZoningServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @input (optional) 
     * @return Success
     */
    createMsZoning(input: CreateMsZoningInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsZoning/CreateMsZoning";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateMsZoning(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateMsZoning(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateMsZoning(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteMsZoning(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsZoning/DeleteMsZoning?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processDeleteMsZoning(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteMsZoning(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteMsZoning(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getAllMsZoning(): Observable<ListResultDtoOfGetAllMsZoningListDto> {
        let url_ = this.baseUrl + "/api/services/app/MsZoning/GetAllMsZoning";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetAllMsZoning(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllMsZoning(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetAllMsZoningListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetAllMsZoningListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAllMsZoning(response: Response): Observable<ListResultDtoOfGetAllMsZoningListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetAllMsZoningListDto.fromJS(resultData200) : new ListResultDtoOfGetAllMsZoningListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetAllMsZoningListDto>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    updateMsZoning(input: UpdateMsZoningInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MsZoning/UpdateMsZoning";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUpdateMsZoning(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateMsZoning(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateMsZoning(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class NotificationServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @state (optional) 
     * @return Success
     */
    getUserNotifications(state: State, maxResultCount: number, skipCount: number): Observable<GetNotificationsOutput> {
        let url_ = this.baseUrl + "/api/services/app/Notification/GetUserNotifications?";
        if (state !== undefined)
            url_ += "State=" + encodeURIComponent("" + state) + "&"; 
        if (maxResultCount === undefined || maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' must be defined and cannot be null.");
        else
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount === undefined || skipCount === null)
            throw new Error("The parameter 'skipCount' must be defined and cannot be null.");
        else
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetUserNotifications(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetUserNotifications(response_);
                } catch (e) {
                    return <Observable<GetNotificationsOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetNotificationsOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetUserNotifications(response: Response): Observable<GetNotificationsOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetNotificationsOutput.fromJS(resultData200) : new GetNotificationsOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetNotificationsOutput>(<any>null);
    }

    /**
     * @return Success
     */
    setAllNotificationsAsRead(): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Notification/SetAllNotificationsAsRead";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processSetAllNotificationsAsRead(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSetAllNotificationsAsRead(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processSetAllNotificationsAsRead(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    setNotificationAsRead(input: EntityDtoOfGuid): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Notification/SetNotificationAsRead";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processSetNotificationAsRead(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSetNotificationAsRead(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processSetNotificationAsRead(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getNotificationSettings(): Observable<GetNotificationSettingsOutput> {
        let url_ = this.baseUrl + "/api/services/app/Notification/GetNotificationSettings";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetNotificationSettings(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetNotificationSettings(response_);
                } catch (e) {
                    return <Observable<GetNotificationSettingsOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetNotificationSettingsOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetNotificationSettings(response: Response): Observable<GetNotificationSettingsOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetNotificationSettingsOutput.fromJS(resultData200) : new GetNotificationSettingsOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetNotificationSettingsOutput>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    updateNotificationSettings(input: UpdateNotificationSettingsInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Notification/UpdateNotificationSettings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUpdateNotificationSettings(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateNotificationSettings(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateNotificationSettings(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class OrganizationUnitServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getOrganizationUnits(): Observable<ListResultDtoOfOrganizationUnitDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/GetOrganizationUnits";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetOrganizationUnits(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetOrganizationUnits(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfOrganizationUnitDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfOrganizationUnitDto>><any>Observable.throw(response_);
        });
    }

    protected processGetOrganizationUnits(response: Response): Observable<ListResultDtoOfOrganizationUnitDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfOrganizationUnitDto.fromJS(resultData200) : new ListResultDtoOfOrganizationUnitDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfOrganizationUnitDto>(<any>null);
    }

    /**
     * @sorting (optional) 
     * @return Success
     */
    getOrganizationUnitUsers(id: number, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfOrganizationUnitUserListDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/GetOrganizationUnitUsers?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount === undefined || maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' must be defined and cannot be null.");
        else
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount === undefined || skipCount === null)
            throw new Error("The parameter 'skipCount' must be defined and cannot be null.");
        else
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetOrganizationUnitUsers(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetOrganizationUnitUsers(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfOrganizationUnitUserListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfOrganizationUnitUserListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetOrganizationUnitUsers(response: Response): Observable<PagedResultDtoOfOrganizationUnitUserListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfOrganizationUnitUserListDto.fromJS(resultData200) : new PagedResultDtoOfOrganizationUnitUserListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<PagedResultDtoOfOrganizationUnitUserListDto>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    createOrganizationUnit(input: CreateOrganizationUnitInput): Observable<OrganizationUnitDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/CreateOrganizationUnit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateOrganizationUnit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrganizationUnit(response_);
                } catch (e) {
                    return <Observable<OrganizationUnitDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<OrganizationUnitDto>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrganizationUnit(response: Response): Observable<OrganizationUnitDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? OrganizationUnitDto.fromJS(resultData200) : new OrganizationUnitDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<OrganizationUnitDto>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    updateOrganizationUnit(input: UpdateOrganizationUnitInput): Observable<OrganizationUnitDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/UpdateOrganizationUnit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUpdateOrganizationUnit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateOrganizationUnit(response_);
                } catch (e) {
                    return <Observable<OrganizationUnitDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<OrganizationUnitDto>><any>Observable.throw(response_);
        });
    }

    protected processUpdateOrganizationUnit(response: Response): Observable<OrganizationUnitDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? OrganizationUnitDto.fromJS(resultData200) : new OrganizationUnitDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<OrganizationUnitDto>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    moveOrganizationUnit(input: MoveOrganizationUnitInput): Observable<OrganizationUnitDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/MoveOrganizationUnit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processMoveOrganizationUnit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processMoveOrganizationUnit(response_);
                } catch (e) {
                    return <Observable<OrganizationUnitDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<OrganizationUnitDto>><any>Observable.throw(response_);
        });
    }

    protected processMoveOrganizationUnit(response: Response): Observable<OrganizationUnitDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? OrganizationUnitDto.fromJS(resultData200) : new OrganizationUnitDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<OrganizationUnitDto>(<any>null);
    }

    /**
     * @return Success
     */
    deleteOrganizationUnit(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/DeleteOrganizationUnit?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processDeleteOrganizationUnit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteOrganizationUnit(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteOrganizationUnit(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    removeUserFromOrganizationUnit(userId: number, organizationUnitId: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/RemoveUserFromOrganizationUnit?";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined and cannot be null.");
        else
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&"; 
        if (organizationUnitId === undefined || organizationUnitId === null)
            throw new Error("The parameter 'organizationUnitId' must be defined and cannot be null.");
        else
            url_ += "OrganizationUnitId=" + encodeURIComponent("" + organizationUnitId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processRemoveUserFromOrganizationUnit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processRemoveUserFromOrganizationUnit(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processRemoveUserFromOrganizationUnit(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    addUsersToOrganizationUnit(input: UsersToOrganizationUnitInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/AddUsersToOrganizationUnit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processAddUsersToOrganizationUnit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processAddUsersToOrganizationUnit(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processAddUsersToOrganizationUnit(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    findUsers(input: FindOrganizationUnitUsersInput): Observable<PagedResultDtoOfNameValueDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/FindUsers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processFindUsers(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processFindUsers(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfNameValueDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfNameValueDto>><any>Observable.throw(response_);
        });
    }

    protected processFindUsers(response: Response): Observable<PagedResultDtoOfNameValueDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfNameValueDto.fromJS(resultData200) : new PagedResultDtoOfNameValueDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<PagedResultDtoOfNameValueDto>(<any>null);
    }
}

@Injectable()
export class PaymentServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @upgradeEditionId (optional) 
     * @return Success
     */
    getPaymentInfo(upgradeEditionId: number): Observable<PaymentInfoDto> {
        let url_ = this.baseUrl + "/api/services/app/Payment/GetPaymentInfo?";
        if (upgradeEditionId !== undefined)
            url_ += "UpgradeEditionId=" + encodeURIComponent("" + upgradeEditionId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetPaymentInfo(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetPaymentInfo(response_);
                } catch (e) {
                    return <Observable<PaymentInfoDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PaymentInfoDto>><any>Observable.throw(response_);
        });
    }

    protected processGetPaymentInfo(response: Response): Observable<PaymentInfoDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PaymentInfoDto.fromJS(resultData200) : new PaymentInfoDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<PaymentInfoDto>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    createPayment(input: CreatePaymentDto): Observable<any> {
        let url_ = this.baseUrl + "/api/services/app/Payment/CreatePayment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreatePayment(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreatePayment(response_);
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response_);
        });
    }

    protected processCreatePayment(response: Response): Observable<any> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key];
                }
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<any>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    executePayment(input: ExecutePaymentDto): Observable<any> {
        let url_ = this.baseUrl + "/api/services/app/Payment/ExecutePayment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processExecutePayment(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processExecutePayment(response_);
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response_);
        });
    }

    protected processExecutePayment(response: Response): Observable<any> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key];
                }
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<any>(<any>null);
    }

    /**
     * @sorting (optional) 
     * @return Success
     */
    getPaymentHistory(sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfSubscriptionPaymentListDto> {
        let url_ = this.baseUrl + "/api/services/app/Payment/GetPaymentHistory?";
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount === undefined || maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' must be defined and cannot be null.");
        else
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount === undefined || skipCount === null)
            throw new Error("The parameter 'skipCount' must be defined and cannot be null.");
        else
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetPaymentHistory(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetPaymentHistory(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfSubscriptionPaymentListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfSubscriptionPaymentListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetPaymentHistory(response: Response): Observable<PagedResultDtoOfSubscriptionPaymentListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfSubscriptionPaymentListDto.fromJS(resultData200) : new PagedResultDtoOfSubscriptionPaymentListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<PagedResultDtoOfSubscriptionPaymentListDto>(<any>null);
    }
}

@Injectable()
export class PermissionServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAllPermissions(): Observable<ListResultDtoOfFlatPermissionWithLevelDto> {
        let url_ = this.baseUrl + "/api/services/app/Permission/GetAllPermissions";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetAllPermissions(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllPermissions(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfFlatPermissionWithLevelDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfFlatPermissionWithLevelDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAllPermissions(response: Response): Observable<ListResultDtoOfFlatPermissionWithLevelDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfFlatPermissionWithLevelDto.fromJS(resultData200) : new ListResultDtoOfFlatPermissionWithLevelDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfFlatPermissionWithLevelDto>(<any>null);
    }
}

@Injectable()
export class PersonalServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @keyword (optional) 
     * @sorting (optional) 
     * @return Success
     */
    getPersonalsByKeyword(keyword: string, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfGetPersonalsByKeywordList> {
        let url_ = this.baseUrl + "/api/services/app/Personal/GetPersonalsByKeyword?";
        if (keyword !== undefined)
            url_ += "keyword=" + encodeURIComponent("" + keyword) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount === undefined || maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' must be defined and cannot be null.");
        else
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount === undefined || skipCount === null)
            throw new Error("The parameter 'skipCount' must be defined and cannot be null.");
        else
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetPersonalsByKeyword(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetPersonalsByKeyword(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfGetPersonalsByKeywordList>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfGetPersonalsByKeywordList>><any>Observable.throw(response_);
        });
    }

    protected processGetPersonalsByKeyword(response: Response): Observable<PagedResultDtoOfGetPersonalsByKeywordList> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfGetPersonalsByKeywordList.fromJS(resultData200) : new PagedResultDtoOfGetPersonalsByKeywordList();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<PagedResultDtoOfGetPersonalsByKeywordList>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    createPersonal(input: CreatePersonalDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Personal/CreatePersonal";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreatePersonal(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreatePersonal(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreatePersonal(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @inputs (optional) 
     * @return Success
     */
    createKeyPeople(inputs: CreateKeyPeopleDto[]): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Personal/CreateKeyPeople";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(inputs);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateKeyPeople(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateKeyPeople(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateKeyPeople(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @inputs (optional) 
     * @return Success
     */
    createBankAccount(inputs: CreateBankAccountDto[]): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Personal/CreateBankAccount";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(inputs);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateBankAccount(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateBankAccount(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateBankAccount(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @inputs (optional) 
     * @return Success
     */
    createCompany(inputs: CreateCompanyDto[]): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Personal/CreateCompany";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(inputs);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateCompany(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateCompany(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateCompany(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @inputs (optional) 
     * @return Success
     */
    createDocument(inputs: CreateDocumentDto[]): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Personal/CreateDocument";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(inputs);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateDocument(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateDocument(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateDocument(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @inputs (optional) 
     * @return Success
     */
    createIDNumber(inputs: CreateIDNumberDto[]): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Personal/CreateIDNumber";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(inputs);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateIDNumber(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateIDNumber(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateIDNumber(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @inputs (optional) 
     * @return Success
     */
    createFamily(inputs: CreateFamilyDto[]): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Personal/CreateFamily";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(inputs);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateFamily(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateFamily(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateFamily(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    createMember(input: CreateMemberDto): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/Personal/CreateMember";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateMember(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateMember(response_);
                } catch (e) {
                    return <Observable<string>><any>Observable.throw(e);
                }
            } else
                return <Observable<string>><any>Observable.throw(response_);
        });
    }

    protected processCreateMember(response: Response): Observable<string> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<string>(<any>null);
    }

    /**
     * @psCode (optional) 
     * @return Success
     */
    getUniversalPersonal(psCode: string): Observable<GetUniversalPersonalDto> {
        let url_ = this.baseUrl + "/api/services/app/Personal/GetUniversalPersonal?";
        if (psCode !== undefined)
            url_ += "psCode=" + encodeURIComponent("" + psCode) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetUniversalPersonal(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetUniversalPersonal(response_);
                } catch (e) {
                    return <Observable<GetUniversalPersonalDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetUniversalPersonalDto>><any>Observable.throw(response_);
        });
    }

    protected processGetUniversalPersonal(response: Response): Observable<GetUniversalPersonalDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetUniversalPersonalDto.fromJS(resultData200) : new GetUniversalPersonalDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetUniversalPersonalDto>(<any>null);
    }

    /**
     * @psCode (optional) 
     * @return Success
     */
    getPersonalByPsCode(psCode: string): Observable<GetPersonalDto> {
        let url_ = this.baseUrl + "/api/services/app/Personal/GetPersonalByPsCode?";
        if (psCode !== undefined)
            url_ += "psCode=" + encodeURIComponent("" + psCode) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetPersonalByPsCode(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetPersonalByPsCode(response_);
                } catch (e) {
                    return <Observable<GetPersonalDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetPersonalDto>><any>Observable.throw(response_);
        });
    }

    protected processGetPersonalByPsCode(response: Response): Observable<GetPersonalDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetPersonalDto.fromJS(resultData200) : new GetPersonalDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetPersonalDto>(<any>null);
    }

    /**
     * @psCode (optional) 
     * @return Success
     */
    getKeyPeopleByPsCode(psCode: string): Observable<GetKeyPeopleDto[]> {
        let url_ = this.baseUrl + "/api/services/app/Personal/GetKeyPeopleByPsCode?";
        if (psCode !== undefined)
            url_ += "psCode=" + encodeURIComponent("" + psCode) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetKeyPeopleByPsCode(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetKeyPeopleByPsCode(response_);
                } catch (e) {
                    return <Observable<GetKeyPeopleDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetKeyPeopleDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetKeyPeopleByPsCode(response: Response): Observable<GetKeyPeopleDto[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(GetKeyPeopleDto.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetKeyPeopleDto[]>(<any>null);
    }

    /**
     * @psCode (optional) 
     * @return Success
     */
    getContactByPsCode(psCode: string): Observable<GetContactDto> {
        let url_ = this.baseUrl + "/api/services/app/Personal/GetContactByPsCode?";
        if (psCode !== undefined)
            url_ += "psCode=" + encodeURIComponent("" + psCode) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetContactByPsCode(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetContactByPsCode(response_);
                } catch (e) {
                    return <Observable<GetContactDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetContactDto>><any>Observable.throw(response_);
        });
    }

    protected processGetContactByPsCode(response: Response): Observable<GetContactDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetContactDto.fromJS(resultData200) : new GetContactDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetContactDto>(<any>null);
    }

    /**
     * @psCode (optional) 
     * @return Success
     */
    getBankAccountByPsCode(psCode: string): Observable<GetBankAccountDto[]> {
        let url_ = this.baseUrl + "/api/services/app/Personal/GetBankAccountByPsCode?";
        if (psCode !== undefined)
            url_ += "psCode=" + encodeURIComponent("" + psCode) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetBankAccountByPsCode(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetBankAccountByPsCode(response_);
                } catch (e) {
                    return <Observable<GetBankAccountDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetBankAccountDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetBankAccountByPsCode(response: Response): Observable<GetBankAccountDto[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(GetBankAccountDto.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetBankAccountDto[]>(<any>null);
    }

    /**
     * @psCode (optional) 
     * @return Success
     */
    getCompanyByPsCode(psCode: string): Observable<GetCompanyDto[]> {
        let url_ = this.baseUrl + "/api/services/app/Personal/GetCompanyByPsCode?";
        if (psCode !== undefined)
            url_ += "psCode=" + encodeURIComponent("" + psCode) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetCompanyByPsCode(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCompanyByPsCode(response_);
                } catch (e) {
                    return <Observable<GetCompanyDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetCompanyDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetCompanyByPsCode(response: Response): Observable<GetCompanyDto[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(GetCompanyDto.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetCompanyDto[]>(<any>null);
    }

    /**
     * @psCode (optional) 
     * @return Success
     */
    getDocumentByPsCode(psCode: string): Observable<GetDocumentDto[]> {
        let url_ = this.baseUrl + "/api/services/app/Personal/GetDocumentByPsCode?";
        if (psCode !== undefined)
            url_ += "psCode=" + encodeURIComponent("" + psCode) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetDocumentByPsCode(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDocumentByPsCode(response_);
                } catch (e) {
                    return <Observable<GetDocumentDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetDocumentDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetDocumentByPsCode(response: Response): Observable<GetDocumentDto[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(GetDocumentDto.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetDocumentDto[]>(<any>null);
    }

    /**
     * @psCode (optional) 
     * @return Success
     */
    getIDNumberByPsCode(psCode: string): Observable<GetIDNumberDto[]> {
        let url_ = this.baseUrl + "/api/services/app/Personal/GetIDNumberByPsCode?";
        if (psCode !== undefined)
            url_ += "psCode=" + encodeURIComponent("" + psCode) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetIDNumberByPsCode(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetIDNumberByPsCode(response_);
                } catch (e) {
                    return <Observable<GetIDNumberDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetIDNumberDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetIDNumberByPsCode(response: Response): Observable<GetIDNumberDto[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(GetIDNumberDto.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetIDNumberDto[]>(<any>null);
    }

    /**
     * @psCode (optional) 
     * @return Success
     */
    getFamilyByPsCode(psCode: string): Observable<GetFamilyDto[]> {
        let url_ = this.baseUrl + "/api/services/app/Personal/GetFamilyByPsCode?";
        if (psCode !== undefined)
            url_ += "psCode=" + encodeURIComponent("" + psCode) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetFamilyByPsCode(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetFamilyByPsCode(response_);
                } catch (e) {
                    return <Observable<GetFamilyDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetFamilyDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetFamilyByPsCode(response: Response): Observable<GetFamilyDto[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(GetFamilyDto.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetFamilyDto[]>(<any>null);
    }

    /**
     * @psCode (optional) 
     * @return Success
     */
    getMemberByPsCode(psCode: string): Observable<GetMemberDto[]> {
        let url_ = this.baseUrl + "/api/services/app/Personal/GetMemberByPsCode?";
        if (psCode !== undefined)
            url_ += "psCode=" + encodeURIComponent("" + psCode) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetMemberByPsCode(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMemberByPsCode(response_);
                } catch (e) {
                    return <Observable<GetMemberDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetMemberDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetMemberByPsCode(response: Response): Observable<GetMemberDto[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(GetMemberDto.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetMemberDto[]>(<any>null);
    }

    /**
     * @psCode (optional) 
     * @return Success
     */
    getPhoneByPsCode(psCode: string): Observable<GetPhoneDto[]> {
        let url_ = this.baseUrl + "/api/services/app/Personal/GetPhoneByPsCode?";
        if (psCode !== undefined)
            url_ += "psCode=" + encodeURIComponent("" + psCode) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetPhoneByPsCode(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetPhoneByPsCode(response_);
                } catch (e) {
                    return <Observable<GetPhoneDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetPhoneDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetPhoneByPsCode(response: Response): Observable<GetPhoneDto[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(GetPhoneDto.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetPhoneDto[]>(<any>null);
    }

    /**
     * @psCode (optional) 
     * @return Success
     */
    getEmailByPsCode(psCode: string): Observable<GetEmailDto[]> {
        let url_ = this.baseUrl + "/api/services/app/Personal/GetEmailByPsCode?";
        if (psCode !== undefined)
            url_ += "psCode=" + encodeURIComponent("" + psCode) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetEmailByPsCode(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetEmailByPsCode(response_);
                } catch (e) {
                    return <Observable<GetEmailDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetEmailDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetEmailByPsCode(response: Response): Observable<GetEmailDto[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(GetEmailDto.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetEmailDto[]>(<any>null);
    }

    /**
     * @psCode (optional) 
     * @return Success
     */
    getAddressByPsCode(psCode: string): Observable<GetAddressDto[]> {
        let url_ = this.baseUrl + "/api/services/app/Personal/GetAddressByPsCode?";
        if (psCode !== undefined)
            url_ += "psCode=" + encodeURIComponent("" + psCode) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetAddressByPsCode(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAddressByPsCode(response_);
                } catch (e) {
                    return <Observable<GetAddressDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetAddressDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetAddressByPsCode(response: Response): Observable<GetAddressDto[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(GetAddressDto.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetAddressDto[]>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    updatePersonal(input: CreatePersonalDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Personal/UpdatePersonal";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUpdatePersonal(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdatePersonal(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdatePersonal(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @inputs (optional) 
     * @return Success
     */
    createOrUpdatePhone(inputs: CreatePhoneDto[]): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Personal/CreateOrUpdatePhone";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(inputs);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateOrUpdatePhone(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdatePhone(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdatePhone(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @inputs (optional) 
     * @return Success
     */
    createOrUpdateEmail(inputs: CreateEmailDto[]): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Personal/CreateOrUpdateEmail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(inputs);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateOrUpdateEmail(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateEmail(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateEmail(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @inputs (optional) 
     * @return Success
     */
    createOrUpdateAddress(inputs: CreateAddressDto[]): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Personal/CreateOrUpdateAddress";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(inputs);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateOrUpdateAddress(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateAddress(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateAddress(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    generatePsCode(): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/Personal/generatePsCode";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGeneratePsCode(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGeneratePsCode(response_);
                } catch (e) {
                    return <Observable<string>><any>Observable.throw(e);
                }
            } else
                return <Observable<string>><any>Observable.throw(response_);
        });
    }

    protected processGeneratePsCode(response: Response): Observable<string> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<string>(<any>null);
    }
}

@Injectable()
export class PersonalMemberServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @keyword (optional) 
     * @return Success
     */
    getAllPersonalMemberList(keyword: string): Observable<ListResultDtoOfGetAllPersonalMemberDto> {
        let url_ = this.baseUrl + "/api/services/app/PersonalMember/GetAllPersonalMemberList?";
        if (keyword !== undefined)
            url_ += "keyword=" + encodeURIComponent("" + keyword) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetAllPersonalMemberList(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllPersonalMemberList(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfGetAllPersonalMemberDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfGetAllPersonalMemberDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAllPersonalMemberList(response: Response): Observable<ListResultDtoOfGetAllPersonalMemberDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfGetAllPersonalMemberDto.fromJS(resultData200) : new ListResultDtoOfGetAllPersonalMemberDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfGetAllPersonalMemberDto>(<any>null);
    }

    /**
     * @scmCode (optional) 
     * @return Success
     */
    generateMemberCode(scmCode: string, isInstitute: boolean): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/PersonalMember/GenerateMemberCode?";
        if (scmCode !== undefined)
            url_ += "scmCode=" + encodeURIComponent("" + scmCode) + "&"; 
        if (isInstitute === undefined || isInstitute === null)
            throw new Error("The parameter 'isInstitute' must be defined and cannot be null.");
        else
            url_ += "isInstitute=" + encodeURIComponent("" + isInstitute) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGenerateMemberCode(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGenerateMemberCode(response_);
                } catch (e) {
                    return <Observable<string>><any>Observable.throw(e);
                }
            } else
                return <Observable<string>><any>Observable.throw(response_);
        });
    }

    protected processGenerateMemberCode(response: Response): Observable<string> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<string>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    updateMember(input: CreateMemberDto): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/PersonalMember/UpdateMember";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUpdateMember(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateMember(response_);
                } catch (e) {
                    return <Observable<string>><any>Observable.throw(e);
                }
            } else
                return <Observable<string>><any>Observable.throw(response_);
        });
    }

    protected processUpdateMember(response: Response): Observable<string> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<string>(<any>null);
    }

    /**
     * @entityCode (optional) 
     * @psCode (optional) 
     * @scmCode (optional) 
     * @memberCode (optional) 
     * @return Success
     */
    deleteMember(entityCode: string, psCode: string, scmCode: string, memberCode: string): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/PersonalMember/DeleteMember?";
        if (entityCode !== undefined)
            url_ += "entityCode=" + encodeURIComponent("" + entityCode) + "&"; 
        if (psCode !== undefined)
            url_ += "psCode=" + encodeURIComponent("" + psCode) + "&"; 
        if (scmCode !== undefined)
            url_ += "scmCode=" + encodeURIComponent("" + scmCode) + "&"; 
        if (memberCode !== undefined)
            url_ += "memberCode=" + encodeURIComponent("" + memberCode) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processDeleteMember(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteMember(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteMember(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class ProfileServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getCurrentUserProfileForEdit(): Observable<CurrentUserProfileEditDto> {
        let url_ = this.baseUrl + "/api/services/app/Profile/GetCurrentUserProfileForEdit";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetCurrentUserProfileForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCurrentUserProfileForEdit(response_);
                } catch (e) {
                    return <Observable<CurrentUserProfileEditDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<CurrentUserProfileEditDto>><any>Observable.throw(response_);
        });
    }

    protected processGetCurrentUserProfileForEdit(response: Response): Observable<CurrentUserProfileEditDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? CurrentUserProfileEditDto.fromJS(resultData200) : new CurrentUserProfileEditDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<CurrentUserProfileEditDto>(<any>null);
    }

    /**
     * @return Success
     */
    updateGoogleAuthenticatorKey(): Observable<UpdateGoogleAuthenticatorKeyOutput> {
        let url_ = this.baseUrl + "/api/services/app/Profile/UpdateGoogleAuthenticatorKey";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUpdateGoogleAuthenticatorKey(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateGoogleAuthenticatorKey(response_);
                } catch (e) {
                    return <Observable<UpdateGoogleAuthenticatorKeyOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<UpdateGoogleAuthenticatorKeyOutput>><any>Observable.throw(response_);
        });
    }

    protected processUpdateGoogleAuthenticatorKey(response: Response): Observable<UpdateGoogleAuthenticatorKeyOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? UpdateGoogleAuthenticatorKeyOutput.fromJS(resultData200) : new UpdateGoogleAuthenticatorKeyOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<UpdateGoogleAuthenticatorKeyOutput>(<any>null);
    }

    /**
     * @return Success
     */
    sendVerificationSms(): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Profile/SendVerificationSms";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processSendVerificationSms(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSendVerificationSms(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processSendVerificationSms(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    verifySmsCode(input: VerifySmsCodeInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Profile/VerifySmsCode";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processVerifySmsCode(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processVerifySmsCode(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processVerifySmsCode(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    updateCurrentUserProfile(input: CurrentUserProfileEditDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Profile/UpdateCurrentUserProfile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUpdateCurrentUserProfile(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateCurrentUserProfile(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateCurrentUserProfile(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    changePassword(input: ChangePasswordInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Profile/ChangePassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processChangePassword(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processChangePassword(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processChangePassword(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    updateProfilePicture(input: UpdateProfilePictureInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Profile/UpdateProfilePicture";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUpdateProfilePicture(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateProfilePicture(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateProfilePicture(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getPasswordComplexitySetting(): Observable<GetPasswordComplexitySettingOutput> {
        let url_ = this.baseUrl + "/api/services/app/Profile/GetPasswordComplexitySetting";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetPasswordComplexitySetting(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetPasswordComplexitySetting(response_);
                } catch (e) {
                    return <Observable<GetPasswordComplexitySettingOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetPasswordComplexitySettingOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetPasswordComplexitySetting(response: Response): Observable<GetPasswordComplexitySettingOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetPasswordComplexitySettingOutput.fromJS(resultData200) : new GetPasswordComplexitySettingOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetPasswordComplexitySettingOutput>(<any>null);
    }

    /**
     * @return Success
     */
    getProfilePicture(): Observable<GetProfilePictureOutput> {
        let url_ = this.baseUrl + "/api/services/app/Profile/GetProfilePicture";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetProfilePicture(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetProfilePicture(response_);
                } catch (e) {
                    return <Observable<GetProfilePictureOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetProfilePictureOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetProfilePicture(response: Response): Observable<GetProfilePictureOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetProfilePictureOutput.fromJS(resultData200) : new GetProfilePictureOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetProfilePictureOutput>(<any>null);
    }

    /**
     * @profilePictureId (optional) 
     * @tenantId (optional) 
     * @return Success
     */
    getFriendProfilePictureById(profilePictureId: string, userId: number, tenantId: number): Observable<GetProfilePictureOutput> {
        let url_ = this.baseUrl + "/api/services/app/Profile/GetFriendProfilePictureById?";
        if (profilePictureId !== undefined)
            url_ += "ProfilePictureId=" + encodeURIComponent("" + profilePictureId) + "&"; 
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined and cannot be null.");
        else
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&"; 
        if (tenantId !== undefined)
            url_ += "TenantId=" + encodeURIComponent("" + tenantId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetFriendProfilePictureById(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetFriendProfilePictureById(response_);
                } catch (e) {
                    return <Observable<GetProfilePictureOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetProfilePictureOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetFriendProfilePictureById(response: Response): Observable<GetProfilePictureOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetProfilePictureOutput.fromJS(resultData200) : new GetProfilePictureOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetProfilePictureOutput>(<any>null);
    }

    /**
     * @return Success
     */
    getProfilePictureById(profilePictureId: string): Observable<GetProfilePictureOutput> {
        let url_ = this.baseUrl + "/api/services/app/Profile/GetProfilePictureById?";
        if (profilePictureId === undefined || profilePictureId === null)
            throw new Error("The parameter 'profilePictureId' must be defined and cannot be null.");
        else
            url_ += "profilePictureId=" + encodeURIComponent("" + profilePictureId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetProfilePictureById(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetProfilePictureById(response_);
                } catch (e) {
                    return <Observable<GetProfilePictureOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetProfilePictureOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetProfilePictureById(response: Response): Observable<GetProfilePictureOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetProfilePictureOutput.fromJS(resultData200) : new GetProfilePictureOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetProfilePictureOutput>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    changeLanguage(input: ChangeUserLanguageDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Profile/ChangeLanguage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processChangeLanguage(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processChangeLanguage(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processChangeLanguage(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class RoleServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @permission (optional) 
     * @return Success
     */
    getRoles(permission: string): Observable<ListResultDtoOfRoleListDto> {
        let url_ = this.baseUrl + "/api/services/app/Role/GetRoles?";
        if (permission !== undefined)
            url_ += "Permission=" + encodeURIComponent("" + permission) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetRoles(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetRoles(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfRoleListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfRoleListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetRoles(response: Response): Observable<ListResultDtoOfRoleListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfRoleListDto.fromJS(resultData200) : new ListResultDtoOfRoleListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfRoleListDto>(<any>null);
    }

    /**
     * @id (optional) 
     * @return Success
     */
    getRoleForEdit(id: number): Observable<GetRoleForEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/Role/GetRoleForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetRoleForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetRoleForEdit(response_);
                } catch (e) {
                    return <Observable<GetRoleForEditOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetRoleForEditOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetRoleForEdit(response: Response): Observable<GetRoleForEditOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetRoleForEditOutput.fromJS(resultData200) : new GetRoleForEditOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetRoleForEditOutput>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    createOrUpdateRole(input: CreateOrUpdateRoleInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Role/CreateOrUpdateRole";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateOrUpdateRole(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateRole(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateRole(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteRole(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Role/DeleteRole?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processDeleteRole(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteRole(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteRole(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class SessionServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getCurrentLoginInformations(): Observable<GetCurrentLoginInformationsOutput> {
        let url_ = this.baseUrl + "/api/services/app/Session/GetCurrentLoginInformations";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetCurrentLoginInformations(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCurrentLoginInformations(response_);
                } catch (e) {
                    return <Observable<GetCurrentLoginInformationsOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetCurrentLoginInformationsOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetCurrentLoginInformations(response: Response): Observable<GetCurrentLoginInformationsOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetCurrentLoginInformationsOutput.fromJS(resultData200) : new GetCurrentLoginInformationsOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetCurrentLoginInformationsOutput>(<any>null);
    }

    /**
     * @return Success
     */
    updateUserSignInToken(): Observable<UpdateUserSignInTokenOutput> {
        let url_ = this.baseUrl + "/api/services/app/Session/UpdateUserSignInToken";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUpdateUserSignInToken(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateUserSignInToken(response_);
                } catch (e) {
                    return <Observable<UpdateUserSignInTokenOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<UpdateUserSignInTokenOutput>><any>Observable.throw(response_);
        });
    }

    protected processUpdateUserSignInToken(response: Response): Observable<UpdateUserSignInTokenOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? UpdateUserSignInTokenOutput.fromJS(resultData200) : new UpdateUserSignInTokenOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<UpdateUserSignInTokenOutput>(<any>null);
    }
}

@Injectable()
export class SubscriptionServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    upgradeTenantToEquivalentEdition(upgradeEditionId: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Subscription/UpgradeTenantToEquivalentEdition?";
        if (upgradeEditionId === undefined || upgradeEditionId === null)
            throw new Error("The parameter 'upgradeEditionId' must be defined and cannot be null.");
        else
            url_ += "upgradeEditionId=" + encodeURIComponent("" + upgradeEditionId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUpgradeTenantToEquivalentEdition(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpgradeTenantToEquivalentEdition(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpgradeTenantToEquivalentEdition(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class TenantServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @filter (optional) 
     * @subscriptionEndDateStart (optional) 
     * @subscriptionEndDateEnd (optional) 
     * @creationDateStart (optional) 
     * @creationDateEnd (optional) 
     * @editionId (optional) 
     * @sorting (optional) 
     * @return Success
     */
    getTenants(filter: string, subscriptionEndDateStart: moment.Moment, subscriptionEndDateEnd: moment.Moment, creationDateStart: moment.Moment, creationDateEnd: moment.Moment, editionId: number, editionIdSpecified: boolean, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfTenantListDto> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/GetTenants?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (subscriptionEndDateStart !== undefined)
            url_ += "SubscriptionEndDateStart=" + encodeURIComponent(subscriptionEndDateStart ? "" + subscriptionEndDateStart.toJSON() : "") + "&"; 
        if (subscriptionEndDateEnd !== undefined)
            url_ += "SubscriptionEndDateEnd=" + encodeURIComponent(subscriptionEndDateEnd ? "" + subscriptionEndDateEnd.toJSON() : "") + "&"; 
        if (creationDateStart !== undefined)
            url_ += "CreationDateStart=" + encodeURIComponent(creationDateStart ? "" + creationDateStart.toJSON() : "") + "&"; 
        if (creationDateEnd !== undefined)
            url_ += "CreationDateEnd=" + encodeURIComponent(creationDateEnd ? "" + creationDateEnd.toJSON() : "") + "&"; 
        if (editionId !== undefined)
            url_ += "EditionId=" + encodeURIComponent("" + editionId) + "&"; 
        if (editionIdSpecified === undefined || editionIdSpecified === null)
            throw new Error("The parameter 'editionIdSpecified' must be defined and cannot be null.");
        else
            url_ += "EditionIdSpecified=" + encodeURIComponent("" + editionIdSpecified) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount === undefined || maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' must be defined and cannot be null.");
        else
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount === undefined || skipCount === null)
            throw new Error("The parameter 'skipCount' must be defined and cannot be null.");
        else
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetTenants(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetTenants(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfTenantListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfTenantListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetTenants(response: Response): Observable<PagedResultDtoOfTenantListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfTenantListDto.fromJS(resultData200) : new PagedResultDtoOfTenantListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<PagedResultDtoOfTenantListDto>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    createTenant(input: CreateTenantInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/CreateTenant";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateTenant(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateTenant(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateTenant(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getTenantForEdit(id: number): Observable<TenantEditDto> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/GetTenantForEdit?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetTenantForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetTenantForEdit(response_);
                } catch (e) {
                    return <Observable<TenantEditDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<TenantEditDto>><any>Observable.throw(response_);
        });
    }

    protected processGetTenantForEdit(response: Response): Observable<TenantEditDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? TenantEditDto.fromJS(resultData200) : new TenantEditDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<TenantEditDto>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    updateTenant(input: TenantEditDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/UpdateTenant";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUpdateTenant(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateTenant(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateTenant(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteTenant(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/DeleteTenant?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processDeleteTenant(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteTenant(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteTenant(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getTenantFeaturesForEdit(id: number): Observable<GetTenantFeaturesEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/GetTenantFeaturesForEdit?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetTenantFeaturesForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetTenantFeaturesForEdit(response_);
                } catch (e) {
                    return <Observable<GetTenantFeaturesEditOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetTenantFeaturesEditOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetTenantFeaturesForEdit(response: Response): Observable<GetTenantFeaturesEditOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetTenantFeaturesEditOutput.fromJS(resultData200) : new GetTenantFeaturesEditOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetTenantFeaturesEditOutput>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    updateTenantFeatures(input: UpdateTenantFeaturesInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/UpdateTenantFeatures";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUpdateTenantFeatures(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateTenantFeatures(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateTenantFeatures(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    resetTenantSpecificFeatures(input: EntityDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/ResetTenantSpecificFeatures";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processResetTenantSpecificFeatures(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processResetTenantSpecificFeatures(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processResetTenantSpecificFeatures(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    unlockTenantAdmin(input: EntityDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/UnlockTenantAdmin";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUnlockTenantAdmin(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUnlockTenantAdmin(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUnlockTenantAdmin(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class TenantDashboardServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getMemberActivity(): Observable<GetMemberActivityOutput> {
        let url_ = this.baseUrl + "/api/services/app/TenantDashboard/GetMemberActivity";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetMemberActivity(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMemberActivity(response_);
                } catch (e) {
                    return <Observable<GetMemberActivityOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetMemberActivityOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetMemberActivity(response: Response): Observable<GetMemberActivityOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetMemberActivityOutput.fromJS(resultData200) : new GetMemberActivityOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetMemberActivityOutput>(<any>null);
    }

    /**
     * @return Success
     */
    getDashboardData(salesSummaryDatePeriod: SalesSummaryDatePeriod): Observable<GetDashboardDataOutput> {
        let url_ = this.baseUrl + "/api/services/app/TenantDashboard/GetDashboardData?";
        if (salesSummaryDatePeriod === undefined || salesSummaryDatePeriod === null)
            throw new Error("The parameter 'salesSummaryDatePeriod' must be defined and cannot be null.");
        else
            url_ += "SalesSummaryDatePeriod=" + encodeURIComponent("" + salesSummaryDatePeriod) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetDashboardData(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDashboardData(response_);
                } catch (e) {
                    return <Observable<GetDashboardDataOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetDashboardDataOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetDashboardData(response: Response): Observable<GetDashboardDataOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetDashboardDataOutput.fromJS(resultData200) : new GetDashboardDataOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetDashboardDataOutput>(<any>null);
    }

    /**
     * @return Success
     */
    getSalesSummary(salesSummaryDatePeriod: SalesSummaryDatePeriod2): Observable<GetSalesSummaryOutput> {
        let url_ = this.baseUrl + "/api/services/app/TenantDashboard/GetSalesSummary?";
        if (salesSummaryDatePeriod === undefined || salesSummaryDatePeriod === null)
            throw new Error("The parameter 'salesSummaryDatePeriod' must be defined and cannot be null.");
        else
            url_ += "SalesSummaryDatePeriod=" + encodeURIComponent("" + salesSummaryDatePeriod) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetSalesSummary(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetSalesSummary(response_);
                } catch (e) {
                    return <Observable<GetSalesSummaryOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetSalesSummaryOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetSalesSummary(response: Response): Observable<GetSalesSummaryOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetSalesSummaryOutput.fromJS(resultData200) : new GetSalesSummaryOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetSalesSummaryOutput>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    getWorldMap(input: any): Observable<GetWorldMapOutput> {
        let url_ = this.baseUrl + "/api/services/app/TenantDashboard/GetWorldMap?";
        if (input !== undefined)
            url_ += "input=" + encodeURIComponent("" + input) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetWorldMap(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetWorldMap(response_);
                } catch (e) {
                    return <Observable<GetWorldMapOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetWorldMapOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetWorldMap(response: Response): Observable<GetWorldMapOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetWorldMapOutput.fromJS(resultData200) : new GetWorldMapOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetWorldMapOutput>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    getGeneralStats(input: any): Observable<GetGeneralStatsOutput> {
        let url_ = this.baseUrl + "/api/services/app/TenantDashboard/GetGeneralStats?";
        if (input !== undefined)
            url_ += "input=" + encodeURIComponent("" + input) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetGeneralStats(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetGeneralStats(response_);
                } catch (e) {
                    return <Observable<GetGeneralStatsOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetGeneralStatsOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetGeneralStats(response: Response): Observable<GetGeneralStatsOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetGeneralStatsOutput.fromJS(resultData200) : new GetGeneralStatsOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetGeneralStatsOutput>(<any>null);
    }
}

@Injectable()
export class TenantRegistrationServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @input (optional) 
     * @return Success
     */
    registerTenant(input: RegisterTenantInput): Observable<RegisterTenantOutput> {
        let url_ = this.baseUrl + "/api/services/app/TenantRegistration/RegisterTenant";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processRegisterTenant(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processRegisterTenant(response_);
                } catch (e) {
                    return <Observable<RegisterTenantOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<RegisterTenantOutput>><any>Observable.throw(response_);
        });
    }

    protected processRegisterTenant(response: Response): Observable<RegisterTenantOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RegisterTenantOutput.fromJS(resultData200) : new RegisterTenantOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<RegisterTenantOutput>(<any>null);
    }

    /**
     * @return Success
     */
    getEditionsForSelect(): Observable<EditionsSelectOutput> {
        let url_ = this.baseUrl + "/api/services/app/TenantRegistration/GetEditionsForSelect";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetEditionsForSelect(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetEditionsForSelect(response_);
                } catch (e) {
                    return <Observable<EditionsSelectOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<EditionsSelectOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetEditionsForSelect(response: Response): Observable<EditionsSelectOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? EditionsSelectOutput.fromJS(resultData200) : new EditionsSelectOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<EditionsSelectOutput>(<any>null);
    }

    /**
     * @return Success
     */
    getEdition(editionId: number): Observable<EditionSelectDto> {
        let url_ = this.baseUrl + "/api/services/app/TenantRegistration/GetEdition?";
        if (editionId === undefined || editionId === null)
            throw new Error("The parameter 'editionId' must be defined and cannot be null.");
        else
            url_ += "editionId=" + encodeURIComponent("" + editionId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetEdition(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetEdition(response_);
                } catch (e) {
                    return <Observable<EditionSelectDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<EditionSelectDto>><any>Observable.throw(response_);
        });
    }

    protected processGetEdition(response: Response): Observable<EditionSelectDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? EditionSelectDto.fromJS(resultData200) : new EditionSelectDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<EditionSelectDto>(<any>null);
    }
}

@Injectable()
export class TenantSettingsServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAllSettings(): Observable<TenantSettingsEditDto> {
        let url_ = this.baseUrl + "/api/services/app/TenantSettings/GetAllSettings";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetAllSettings(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllSettings(response_);
                } catch (e) {
                    return <Observable<TenantSettingsEditDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<TenantSettingsEditDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAllSettings(response: Response): Observable<TenantSettingsEditDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? TenantSettingsEditDto.fromJS(resultData200) : new TenantSettingsEditDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<TenantSettingsEditDto>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    updateAllSettings(input: TenantSettingsEditDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TenantSettings/UpdateAllSettings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUpdateAllSettings(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateAllSettings(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateAllSettings(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    clearLogo(): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TenantSettings/ClearLogo";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processClearLogo(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processClearLogo(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processClearLogo(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    clearCustomCss(): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TenantSettings/ClearCustomCss";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processClearCustomCss(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processClearCustomCss(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processClearCustomCss(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    sendTestEmail(input: SendTestEmailInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TenantSettings/SendTestEmail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processSendTestEmail(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSendTestEmail(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processSendTestEmail(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class TimingServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getTimezones(defaultTimezoneScope: DefaultTimezoneScope): Observable<ListResultDtoOfNameValueDto> {
        let url_ = this.baseUrl + "/api/services/app/Timing/GetTimezones?";
        if (defaultTimezoneScope === undefined || defaultTimezoneScope === null)
            throw new Error("The parameter 'defaultTimezoneScope' must be defined and cannot be null.");
        else
            url_ += "DefaultTimezoneScope=" + encodeURIComponent("" + defaultTimezoneScope) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetTimezones(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetTimezones(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfNameValueDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfNameValueDto>><any>Observable.throw(response_);
        });
    }

    protected processGetTimezones(response: Response): Observable<ListResultDtoOfNameValueDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfNameValueDto.fromJS(resultData200) : new ListResultDtoOfNameValueDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfNameValueDto>(<any>null);
    }

    /**
     * @selectedTimezoneId (optional) 
     * @return Success
     */
    getTimezoneComboboxItems(selectedTimezoneId: string): Observable<ComboboxItemDto[]> {
        let url_ = this.baseUrl + "/api/services/app/Timing/GetTimezoneComboboxItems?";
        if (selectedTimezoneId !== undefined)
            url_ += "SelectedTimezoneId=" + encodeURIComponent("" + selectedTimezoneId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetTimezoneComboboxItems(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetTimezoneComboboxItems(response_);
                } catch (e) {
                    return <Observable<ComboboxItemDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<ComboboxItemDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetTimezoneComboboxItems(response: Response): Observable<ComboboxItemDto[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(ComboboxItemDto.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ComboboxItemDto[]>(<any>null);
    }
}

@Injectable()
export class TokenAuthServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @model (optional) 
     * @return Success
     */
    authenticate(model: AuthenticateModel): Observable<AuthenticateResultModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/Authenticate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processAuthenticate(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processAuthenticate(response_);
                } catch (e) {
                    return <Observable<AuthenticateResultModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<AuthenticateResultModel>><any>Observable.throw(response_);
        });
    }

    protected processAuthenticate(response: Response): Observable<AuthenticateResultModel> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AuthenticateResultModel.fromJS(resultData200) : new AuthenticateResultModel();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<AuthenticateResultModel>(<any>null);
    }

    /**
     * @model (optional) 
     * @return Success
     */
    sendTwoFactorAuthCode(model: SendTwoFactorAuthCodeModel): Observable<void> {
        let url_ = this.baseUrl + "/api/TokenAuth/SendTwoFactorAuthCode";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processSendTwoFactorAuthCode(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSendTwoFactorAuthCode(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processSendTwoFactorAuthCode(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @impersonationToken (optional) 
     * @return Success
     */
    impersonatedAuthenticate(impersonationToken: string): Observable<ImpersonatedAuthenticateResultModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/ImpersonatedAuthenticate?";
        if (impersonationToken !== undefined)
            url_ += "impersonationToken=" + encodeURIComponent("" + impersonationToken) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processImpersonatedAuthenticate(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processImpersonatedAuthenticate(response_);
                } catch (e) {
                    return <Observable<ImpersonatedAuthenticateResultModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<ImpersonatedAuthenticateResultModel>><any>Observable.throw(response_);
        });
    }

    protected processImpersonatedAuthenticate(response: Response): Observable<ImpersonatedAuthenticateResultModel> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ImpersonatedAuthenticateResultModel.fromJS(resultData200) : new ImpersonatedAuthenticateResultModel();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ImpersonatedAuthenticateResultModel>(<any>null);
    }

    /**
     * @switchAccountToken (optional) 
     * @return Success
     */
    linkedAccountAuthenticate(switchAccountToken: string): Observable<SwitchedAccountAuthenticateResultModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/LinkedAccountAuthenticate?";
        if (switchAccountToken !== undefined)
            url_ += "switchAccountToken=" + encodeURIComponent("" + switchAccountToken) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processLinkedAccountAuthenticate(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processLinkedAccountAuthenticate(response_);
                } catch (e) {
                    return <Observable<SwitchedAccountAuthenticateResultModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<SwitchedAccountAuthenticateResultModel>><any>Observable.throw(response_);
        });
    }

    protected processLinkedAccountAuthenticate(response: Response): Observable<SwitchedAccountAuthenticateResultModel> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? SwitchedAccountAuthenticateResultModel.fromJS(resultData200) : new SwitchedAccountAuthenticateResultModel();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<SwitchedAccountAuthenticateResultModel>(<any>null);
    }

    /**
     * @return Success
     */
    getExternalAuthenticationProviders(): Observable<ExternalLoginProviderInfoModel[]> {
        let url_ = this.baseUrl + "/api/TokenAuth/GetExternalAuthenticationProviders";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetExternalAuthenticationProviders(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetExternalAuthenticationProviders(response_);
                } catch (e) {
                    return <Observable<ExternalLoginProviderInfoModel[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<ExternalLoginProviderInfoModel[]>><any>Observable.throw(response_);
        });
    }

    protected processGetExternalAuthenticationProviders(response: Response): Observable<ExternalLoginProviderInfoModel[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(ExternalLoginProviderInfoModel.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ExternalLoginProviderInfoModel[]>(<any>null);
    }

    /**
     * @model (optional) 
     * @return Success
     */
    externalAuthenticate(model: ExternalAuthenticateModel): Observable<ExternalAuthenticateResultModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/ExternalAuthenticate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processExternalAuthenticate(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processExternalAuthenticate(response_);
                } catch (e) {
                    return <Observable<ExternalAuthenticateResultModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<ExternalAuthenticateResultModel>><any>Observable.throw(response_);
        });
    }

    protected processExternalAuthenticate(response: Response): Observable<ExternalAuthenticateResultModel> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ExternalAuthenticateResultModel.fromJS(resultData200) : new ExternalAuthenticateResultModel();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ExternalAuthenticateResultModel>(<any>null);
    }

    /**
     * @message (optional) 
     * @severity (optional) 
     * @return Success
     */
    testNotification(message: string, severity: string): Observable<void> {
        let url_ = this.baseUrl + "/api/TokenAuth/TestNotification?";
        if (message !== undefined)
            url_ += "message=" + encodeURIComponent("" + message) + "&"; 
        if (severity !== undefined)
            url_ += "severity=" + encodeURIComponent("" + severity) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processTestNotification(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processTestNotification(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processTestNotification(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class TrAddressServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @input (optional) 
     * @return Success
     */
    updateAddress(input: GetUpdateAddressInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TrAddress/UpdateAddress";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUpdateAddress(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateAddress(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateAddress(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @psCode (optional) 
     * @addrType (optional) 
     * @return Success
     */
    deleteAddress(psCode: string, refID: number, addrType: string): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TrAddress/DeleteAddress?";
        if (psCode !== undefined)
            url_ += "psCode=" + encodeURIComponent("" + psCode) + "&"; 
        if (refID === undefined || refID === null)
            throw new Error("The parameter 'refID' must be defined and cannot be null.");
        else
            url_ += "refID=" + encodeURIComponent("" + refID) + "&"; 
        if (addrType !== undefined)
            url_ += "addrType=" + encodeURIComponent("" + addrType) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processDeleteAddress(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteAddress(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteAddress(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class TrBankAccountServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @input (optional) 
     * @return Success
     */
    updateBankAccount(input: GetUpdateBankAccountInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TrBankAccount/UpdateBankAccount";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUpdateBankAccount(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateBankAccount(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateBankAccount(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @psCode (optional) 
     * @bankCode (optional) 
     * @return Success
     */
    deleteBankAccount(psCode: string, refID: number, bankCode: string): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TrBankAccount/DeleteBankAccount?";
        if (psCode !== undefined)
            url_ += "psCode=" + encodeURIComponent("" + psCode) + "&"; 
        if (refID === undefined || refID === null)
            throw new Error("The parameter 'refID' must be defined and cannot be null.");
        else
            url_ += "refID=" + encodeURIComponent("" + refID) + "&"; 
        if (bankCode !== undefined)
            url_ += "bankCode=" + encodeURIComponent("" + bankCode) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processDeleteBankAccount(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteBankAccount(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteBankAccount(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class TrBasePriceServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @input (optional) 
     * @return Success
     */
    uploadBasePrice(input: UploadBasePriceInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TrBasePrice/UploadBasePrice";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUploadBasePrice(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUploadBasePrice(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUploadBasePrice(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @projectCode (optional) 
     * @sorting (optional) 
     * @return Success
     */
    getAllTrBasePrice(projectCode: string, basePriceID: number, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfGetAllBasePriceListDto> {
        let url_ = this.baseUrl + "/api/services/app/TrBasePrice/GetAllTrBasePrice?";
        if (projectCode !== undefined)
            url_ += "ProjectCode=" + encodeURIComponent("" + projectCode) + "&"; 
        if (basePriceID === undefined || basePriceID === null)
            throw new Error("The parameter 'basePriceID' must be defined and cannot be null.");
        else
            url_ += "basePriceID=" + encodeURIComponent("" + basePriceID) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount === undefined || maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' must be defined and cannot be null.");
        else
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount === undefined || skipCount === null)
            throw new Error("The parameter 'skipCount' must be defined and cannot be null.");
        else
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetAllTrBasePrice(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllTrBasePrice(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfGetAllBasePriceListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfGetAllBasePriceListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAllTrBasePrice(response: Response): Observable<PagedResultDtoOfGetAllBasePriceListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfGetAllBasePriceListDto.fromJS(resultData200) : new PagedResultDtoOfGetAllBasePriceListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<PagedResultDtoOfGetAllBasePriceListDto>(<any>null);
    }
}

@Injectable()
export class TrCompanyServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @psCode (optional) 
     * @return Success
     */
    deleteTrCompany(psCode: string, refID: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TrCompany/DeleteTrCompany?";
        if (psCode !== undefined)
            url_ += "psCode=" + encodeURIComponent("" + psCode) + "&"; 
        if (refID === undefined || refID === null)
            throw new Error("The parameter 'refID' must be defined and cannot be null.");
        else
            url_ += "refID=" + encodeURIComponent("" + refID) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processDeleteTrCompany(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteTrCompany(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteTrCompany(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    updateTrCompany(input: CreateOrUpdateTrCompanyListDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TrCompany/UpdateTrCompany";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUpdateTrCompany(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateTrCompany(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateTrCompany(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class TrDealCloserServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getTasklistDealCloserByProject(projectId: number): Observable<GetTasklistDealCloserByProjectListDto[]> {
        let url_ = this.baseUrl + "/api/services/app/TrDealCloser/GetTasklistDealCloserByProject?";
        if (projectId === undefined || projectId === null)
            throw new Error("The parameter 'projectId' must be defined and cannot be null.");
        else
            url_ += "ProjectId=" + encodeURIComponent("" + projectId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetTasklistDealCloserByProject(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetTasklistDealCloserByProject(response_);
                } catch (e) {
                    return <Observable<GetTasklistDealCloserByProjectListDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetTasklistDealCloserByProjectListDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetTasklistDealCloserByProject(response: Response): Observable<GetTasklistDealCloserByProjectListDto[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(GetTasklistDealCloserByProjectListDto.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetTasklistDealCloserByProjectListDto[]>(<any>null);
    }

    /**
     * @return Success
     */
    getDropdownMemberFromPersonal(): Observable<GetMemberFromPersonalListDto[]> {
        let url_ = this.baseUrl + "/api/services/app/TrDealCloser/GetDropdownMemberFromPersonal";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetDropdownMemberFromPersonal(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDropdownMemberFromPersonal(response_);
                } catch (e) {
                    return <Observable<GetMemberFromPersonalListDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetMemberFromPersonalListDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetDropdownMemberFromPersonal(response: Response): Observable<GetMemberFromPersonalListDto[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(GetMemberFromPersonalListDto.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetMemberFromPersonalListDto[]>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    updateDealCloser(input: MemberFromPersonalInputDto, limitAsUplineNo: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TrDealCloser/UpdateDealCloser?";
        if (limitAsUplineNo === undefined || limitAsUplineNo === null)
            throw new Error("The parameter 'limitAsUplineNo' must be defined and cannot be null.");
        else
            url_ += "limitAsUplineNo=" + encodeURIComponent("" + limitAsUplineNo) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUpdateDealCloser(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateDealCloser(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateDealCloser(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @bookNo (optional) 
     * @return Success
     */
    getDataEditDealCloser(bookNo: string): Observable<GetDataEditDealCloserListDto> {
        let url_ = this.baseUrl + "/api/services/app/TrDealCloser/GetDataEditDealCloser?";
        if (bookNo !== undefined)
            url_ += "bookNo=" + encodeURIComponent("" + bookNo) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetDataEditDealCloser(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDataEditDealCloser(response_);
                } catch (e) {
                    return <Observable<GetDataEditDealCloserListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetDataEditDealCloserListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetDataEditDealCloser(response: Response): Observable<GetDataEditDealCloserListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetDataEditDealCloserListDto.fromJS(resultData200) : new GetDataEditDealCloserListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetDataEditDealCloserListDto>(<any>null);
    }
}

@Injectable()
export class TrDocumentServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @input (optional) 
     * @return Success
     */
    updateDocument(input: UpdateDocumentDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TrDocument/UpdateDocument";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUpdateDocument(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateDocument(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateDocument(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @psCode (optional) 
     * @documentType (optional) 
     * @return Success
     */
    deleteDocument(psCode: string, documentType: string): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TrDocument/deleteDocument?";
        if (psCode !== undefined)
            url_ += "psCode=" + encodeURIComponent("" + psCode) + "&"; 
        if (documentType !== undefined)
            url_ += "documentType=" + encodeURIComponent("" + documentType) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processDeleteDocument(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteDocument(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteDocument(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class TrEmailServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @inputs (optional) 
     * @return Success
     */
    updateEmail(inputs: GetUpdateEmailInputDto[]): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TrEmail/UpdateEmail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(inputs);

        let options_ : any = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUpdateEmail(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateEmail(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateEmail(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @entityCode (optional) 
     * @psCode (optional) 
     * @return Success
     */
    deleteEmail(entityCode: string, psCode: string, refID: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TrEmail/DeleteEmail?";
        if (entityCode !== undefined)
            url_ += "entityCode=" + encodeURIComponent("" + entityCode) + "&"; 
        if (psCode !== undefined)
            url_ += "psCode=" + encodeURIComponent("" + psCode) + "&"; 
        if (refID === undefined || refID === null)
            throw new Error("The parameter 'refID' must be defined and cannot be null.");
        else
            url_ += "refID=" + encodeURIComponent("" + refID) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processDeleteEmail(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteEmail(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteEmail(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class TrFamilyServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @psCode (optional) 
     * @return Success
     */
    deleteTrFamily(psCode: string, refID: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TrFamily/DeleteTrFamily?";
        if (psCode !== undefined)
            url_ += "psCode=" + encodeURIComponent("" + psCode) + "&"; 
        if (refID === undefined || refID === null)
            throw new Error("The parameter 'refID' must be defined and cannot be null.");
        else
            url_ += "refID=" + encodeURIComponent("" + refID) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processDeleteTrFamily(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteTrFamily(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteTrFamily(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    updateTrFamily(input: UpdateTrFamilyListDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TrFamily/UpdateTrFamily";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUpdateTrFamily(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateTrFamily(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateTrFamily(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class TrIDServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @psCode (optional) 
     * @return Success
     */
    deleteTrID(psCode: string, refID: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TrID/DeleteTrID?";
        if (psCode !== undefined)
            url_ += "psCode=" + encodeURIComponent("" + psCode) + "&"; 
        if (refID === undefined || refID === null)
            throw new Error("The parameter 'refID' must be defined and cannot be null.");
        else
            url_ += "refID=" + encodeURIComponent("" + refID) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processDeleteTrID(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteTrID(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteTrID(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    updateTrID(input: UpdateTrIDInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TrID/UpdateTrID";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUpdateTrID(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateTrID(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateTrID(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class TrKeyPeopleServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    deleteTrKeyPeople(trKeyPeopleID: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TrKeyPeople/DeleteTrKeyPeople?";
        if (trKeyPeopleID === undefined || trKeyPeopleID === null)
            throw new Error("The parameter 'trKeyPeopleID' must be defined and cannot be null.");
        else
            url_ += "trKeyPeopleID=" + encodeURIComponent("" + trKeyPeopleID) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processDeleteTrKeyPeople(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteTrKeyPeople(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteTrKeyPeople(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    updateTrJKeyPeople(input: UpdateTrJKeyPeopleInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TrKeyPeople/UpdateTrJKeyPeople";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUpdateTrJKeyPeople(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateTrJKeyPeople(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateTrJKeyPeople(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class TrPhoneServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @inputs (optional) 
     * @return Success
     */
    updateTrPhone(inputs: GetUpdateTrPhoneInputDto[]): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TrPhone/UpdateTrPhone";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(inputs);

        let options_ : any = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUpdateTrPhone(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateTrPhone(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateTrPhone(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @entityCode (optional) 
     * @psCode (optional) 
     * @return Success
     */
    deleteTrPhone(entityCode: string, psCode: string, refID: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TrPhone/DeleteTrPhone?";
        if (entityCode !== undefined)
            url_ += "entityCode=" + encodeURIComponent("" + entityCode) + "&"; 
        if (psCode !== undefined)
            url_ += "psCode=" + encodeURIComponent("" + psCode) + "&"; 
        if (refID === undefined || refID === null)
            throw new Error("The parameter 'refID' must be defined and cannot be null.");
        else
            url_ += "refID=" + encodeURIComponent("" + refID) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processDeleteTrPhone(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteTrPhone(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteTrPhone(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class UiCustomizationSettingsServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getUiManagementSettings(): Observable<UiCustomizationSettingsEditDto> {
        let url_ = this.baseUrl + "/api/services/app/UiCustomizationSettings/GetUiManagementSettings";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetUiManagementSettings(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetUiManagementSettings(response_);
                } catch (e) {
                    return <Observable<UiCustomizationSettingsEditDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<UiCustomizationSettingsEditDto>><any>Observable.throw(response_);
        });
    }

    protected processGetUiManagementSettings(response: Response): Observable<UiCustomizationSettingsEditDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? UiCustomizationSettingsEditDto.fromJS(resultData200) : new UiCustomizationSettingsEditDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<UiCustomizationSettingsEditDto>(<any>null);
    }

    /**
     * @settings (optional) 
     * @return Success
     */
    updateUiManagementSettings(settings: UiCustomizationSettingsEditDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/UiCustomizationSettings/UpdateUiManagementSettings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(settings);

        let options_ : any = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUpdateUiManagementSettings(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateUiManagementSettings(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateUiManagementSettings(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @settings (optional) 
     * @return Success
     */
    updateDefaultUiManagementSettings(settings: UiCustomizationSettingsEditDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/UiCustomizationSettings/UpdateDefaultUiManagementSettings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(settings);

        let options_ : any = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUpdateDefaultUiManagementSettings(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateDefaultUiManagementSettings(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateDefaultUiManagementSettings(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    useSystemDefaultSettings(): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/UiCustomizationSettings/UseSystemDefaultSettings";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUseSystemDefaultSettings(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUseSystemDefaultSettings(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUseSystemDefaultSettings(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class UserServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @filter (optional) 
     * @permission (optional) 
     * @role (optional) 
     * @sorting (optional) 
     * @return Success
     */
    getUsers(filter: string, permission: string, role: number, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfUserListDto> {
        let url_ = this.baseUrl + "/api/services/app/User/GetUsers?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (permission !== undefined)
            url_ += "Permission=" + encodeURIComponent("" + permission) + "&"; 
        if (role !== undefined)
            url_ += "Role=" + encodeURIComponent("" + role) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount === undefined || maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' must be defined and cannot be null.");
        else
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount === undefined || skipCount === null)
            throw new Error("The parameter 'skipCount' must be defined and cannot be null.");
        else
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetUsers(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetUsers(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfUserListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfUserListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetUsers(response: Response): Observable<PagedResultDtoOfUserListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfUserListDto.fromJS(resultData200) : new PagedResultDtoOfUserListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<PagedResultDtoOfUserListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getUsersToExcel(): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/User/GetUsersToExcel";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetUsersToExcel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetUsersToExcel(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processGetUsersToExcel(response: Response): Observable<FileDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<FileDto>(<any>null);
    }

    /**
     * @id (optional) 
     * @return Success
     */
    getUserForEdit(id: number): Observable<GetUserForEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/User/GetUserForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetUserForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetUserForEdit(response_);
                } catch (e) {
                    return <Observable<GetUserForEditOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetUserForEditOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetUserForEdit(response: Response): Observable<GetUserForEditOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetUserForEditOutput.fromJS(resultData200) : new GetUserForEditOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetUserForEditOutput>(<any>null);
    }

    /**
     * @return Success
     */
    getUserPermissionsForEdit(id: number): Observable<GetUserPermissionsForEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/User/GetUserPermissionsForEdit?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetUserPermissionsForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetUserPermissionsForEdit(response_);
                } catch (e) {
                    return <Observable<GetUserPermissionsForEditOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetUserPermissionsForEditOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetUserPermissionsForEdit(response: Response): Observable<GetUserPermissionsForEditOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetUserPermissionsForEditOutput.fromJS(resultData200) : new GetUserPermissionsForEditOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetUserPermissionsForEditOutput>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    resetUserSpecificPermissions(input: EntityDtoOfInt64): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/ResetUserSpecificPermissions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processResetUserSpecificPermissions(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processResetUserSpecificPermissions(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processResetUserSpecificPermissions(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    updateUserPermissions(input: UpdateUserPermissionsInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/UpdateUserPermissions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUpdateUserPermissions(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateUserPermissions(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateUserPermissions(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    createOrUpdateUser(input: CreateOrUpdateUserInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/CreateOrUpdateUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processCreateOrUpdateUser(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateUser(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateUser(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteUser(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/DeleteUser?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processDeleteUser(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteUser(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteUser(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    unlockUser(input: EntityDtoOfInt64): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/UnlockUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUnlockUser(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUnlockUser(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUnlockUser(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class UserLinkServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @input (optional) 
     * @return Success
     */
    linkToUser(input: LinkToUserInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/UserLink/LinkToUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processLinkToUser(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processLinkToUser(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processLinkToUser(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @sorting (optional) 
     * @return Success
     */
    getLinkedUsers(maxResultCount: number, skipCount: number, sorting: string): Observable<PagedResultDtoOfLinkedUserDto> {
        let url_ = this.baseUrl + "/api/services/app/UserLink/GetLinkedUsers?";
        if (maxResultCount === undefined || maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' must be defined and cannot be null.");
        else
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount === undefined || skipCount === null)
            throw new Error("The parameter 'skipCount' must be defined and cannot be null.");
        else
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetLinkedUsers(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetLinkedUsers(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfLinkedUserDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfLinkedUserDto>><any>Observable.throw(response_);
        });
    }

    protected processGetLinkedUsers(response: Response): Observable<PagedResultDtoOfLinkedUserDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfLinkedUserDto.fromJS(resultData200) : new PagedResultDtoOfLinkedUserDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<PagedResultDtoOfLinkedUserDto>(<any>null);
    }

    /**
     * @return Success
     */
    getRecentlyUsedLinkedUsers(): Observable<ListResultDtoOfLinkedUserDto> {
        let url_ = this.baseUrl + "/api/services/app/UserLink/GetRecentlyUsedLinkedUsers";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetRecentlyUsedLinkedUsers(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetRecentlyUsedLinkedUsers(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfLinkedUserDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfLinkedUserDto>><any>Observable.throw(response_);
        });
    }

    protected processGetRecentlyUsedLinkedUsers(response: Response): Observable<ListResultDtoOfLinkedUserDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfLinkedUserDto.fromJS(resultData200) : new ListResultDtoOfLinkedUserDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfLinkedUserDto>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    unlinkUser(input: UnlinkUserInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/UserLink/UnlinkUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processUnlinkUser(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUnlinkUser(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUnlinkUser(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class UserLoginServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getRecentUserLoginAttempts(): Observable<ListResultDtoOfUserLoginAttemptDto> {
        let url_ = this.baseUrl + "/api/services/app/UserLogin/GetRecentUserLoginAttempts";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetRecentUserLoginAttempts(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetRecentUserLoginAttempts(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfUserLoginAttemptDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfUserLoginAttemptDto>><any>Observable.throw(response_);
        });
    }

    protected processGetRecentUserLoginAttempts(response: Response): Observable<ListResultDtoOfUserLoginAttemptDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfUserLoginAttemptDto.fromJS(resultData200) : new ListResultDtoOfUserLoginAttemptDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfUserLoginAttemptDto>(<any>null);
    }
}

@Injectable()
export class WebLogServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getLatestWebLogs(): Observable<GetLatestWebLogsOutput> {
        let url_ = this.baseUrl + "/api/services/app/WebLog/GetLatestWebLogs";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processGetLatestWebLogs(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetLatestWebLogs(response_);
                } catch (e) {
                    return <Observable<GetLatestWebLogsOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetLatestWebLogsOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetLatestWebLogs(response: Response): Observable<GetLatestWebLogsOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetLatestWebLogsOutput.fromJS(resultData200) : new GetLatestWebLogsOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetLatestWebLogsOutput>(<any>null);
    }

    /**
     * @return Success
     */
    downloadWebLogs(): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/WebLog/DownloadWebLogs";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_ : any) => {
            return this.processDownloadWebLogs(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDownloadWebLogs(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processDownloadWebLogs(response: Response): Observable<FileDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<FileDto>(<any>null);
    }
}

export class IsTenantAvailableInput implements IIsTenantAvailableInput {
    tenancyName: string;

    constructor(data?: IIsTenantAvailableInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenancyName = data["tenancyName"];
        }
    }

    static fromJS(data: any): IsTenantAvailableInput {
        let result = new IsTenantAvailableInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        return data; 
    }
}

export interface IIsTenantAvailableInput {
    tenancyName: string;
}

export class IsTenantAvailableOutput implements IIsTenantAvailableOutput {
    state: IsTenantAvailableOutputState;
    tenantId: number;
    serverRootAddress: string;

    constructor(data?: IIsTenantAvailableOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.state = data["state"];
            this.tenantId = data["tenantId"];
            this.serverRootAddress = data["serverRootAddress"];
        }
    }

    static fromJS(data: any): IsTenantAvailableOutput {
        let result = new IsTenantAvailableOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["state"] = this.state;
        data["tenantId"] = this.tenantId;
        data["serverRootAddress"] = this.serverRootAddress;
        return data; 
    }
}

export interface IIsTenantAvailableOutput {
    state: IsTenantAvailableOutputState;
    tenantId: number;
    serverRootAddress: string;
}

export class RegisterInput implements IRegisterInput {
    name: string;
    surname: string;
    userName: string;
    emailAddress: string;
    password: string;
    captchaResponse: string;

    constructor(data?: IRegisterInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.surname = data["surname"];
            this.userName = data["userName"];
            this.emailAddress = data["emailAddress"];
            this.password = data["password"];
            this.captchaResponse = data["captchaResponse"];
        }
    }

    static fromJS(data: any): RegisterInput {
        let result = new RegisterInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["userName"] = this.userName;
        data["emailAddress"] = this.emailAddress;
        data["password"] = this.password;
        data["captchaResponse"] = this.captchaResponse;
        return data; 
    }
}

export interface IRegisterInput {
    name: string;
    surname: string;
    userName: string;
    emailAddress: string;
    password: string;
    captchaResponse: string;
}

export class RegisterOutput implements IRegisterOutput {
    canLogin: boolean;

    constructor(data?: IRegisterOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.canLogin = data["canLogin"];
        }
    }

    static fromJS(data: any): RegisterOutput {
        let result = new RegisterOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["canLogin"] = this.canLogin;
        return data; 
    }
}

export interface IRegisterOutput {
    canLogin: boolean;
}

export class SendPasswordResetCodeInput implements ISendPasswordResetCodeInput {
    emailAddress: string;

    constructor(data?: ISendPasswordResetCodeInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.emailAddress = data["emailAddress"];
        }
    }

    static fromJS(data: any): SendPasswordResetCodeInput {
        let result = new SendPasswordResetCodeInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["emailAddress"] = this.emailAddress;
        return data; 
    }
}

export interface ISendPasswordResetCodeInput {
    emailAddress: string;
}

export class ResetPasswordInput implements IResetPasswordInput {
    userId: number;
    resetCode: string;
    password: string;
    returnUrl: string;
    singleSignIn: string;

    constructor(data?: IResetPasswordInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            this.resetCode = data["resetCode"];
            this.password = data["password"];
            this.returnUrl = data["returnUrl"];
            this.singleSignIn = data["singleSignIn"];
        }
    }

    static fromJS(data: any): ResetPasswordInput {
        let result = new ResetPasswordInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["resetCode"] = this.resetCode;
        data["password"] = this.password;
        data["returnUrl"] = this.returnUrl;
        data["singleSignIn"] = this.singleSignIn;
        return data; 
    }
}

export interface IResetPasswordInput {
    userId: number;
    resetCode: string;
    password: string;
    returnUrl: string;
    singleSignIn: string;
}

export class ResetPasswordOutput implements IResetPasswordOutput {
    canLogin: boolean;
    userName: string;

    constructor(data?: IResetPasswordOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.canLogin = data["canLogin"];
            this.userName = data["userName"];
        }
    }

    static fromJS(data: any): ResetPasswordOutput {
        let result = new ResetPasswordOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["canLogin"] = this.canLogin;
        data["userName"] = this.userName;
        return data; 
    }
}

export interface IResetPasswordOutput {
    canLogin: boolean;
    userName: string;
}

export class SendEmailActivationLinkInput implements ISendEmailActivationLinkInput {
    emailAddress: string;

    constructor(data?: ISendEmailActivationLinkInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.emailAddress = data["emailAddress"];
        }
    }

    static fromJS(data: any): SendEmailActivationLinkInput {
        let result = new SendEmailActivationLinkInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["emailAddress"] = this.emailAddress;
        return data; 
    }
}

export interface ISendEmailActivationLinkInput {
    emailAddress: string;
}

export class ActivateEmailInput implements IActivateEmailInput {
    userId: number;
    confirmationCode: string;

    constructor(data?: IActivateEmailInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            this.confirmationCode = data["confirmationCode"];
        }
    }

    static fromJS(data: any): ActivateEmailInput {
        let result = new ActivateEmailInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["confirmationCode"] = this.confirmationCode;
        return data; 
    }
}

export interface IActivateEmailInput {
    userId: number;
    confirmationCode: string;
}

export class ImpersonateInput implements IImpersonateInput {
    tenantId: number;
    userId: number;

    constructor(data?: IImpersonateInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.userId = data["userId"];
        }
    }

    static fromJS(data: any): ImpersonateInput {
        let result = new ImpersonateInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["userId"] = this.userId;
        return data; 
    }
}

export interface IImpersonateInput {
    tenantId: number;
    userId: number;
}

export class ImpersonateOutput implements IImpersonateOutput {
    impersonationToken: string;
    tenancyName: string;

    constructor(data?: IImpersonateOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.impersonationToken = data["impersonationToken"];
            this.tenancyName = data["tenancyName"];
        }
    }

    static fromJS(data: any): ImpersonateOutput {
        let result = new ImpersonateOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["impersonationToken"] = this.impersonationToken;
        data["tenancyName"] = this.tenancyName;
        return data; 
    }
}

export interface IImpersonateOutput {
    impersonationToken: string;
    tenancyName: string;
}

export class SwitchToLinkedAccountInput implements ISwitchToLinkedAccountInput {
    targetTenantId: number;
    targetUserId: number;

    constructor(data?: ISwitchToLinkedAccountInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.targetTenantId = data["targetTenantId"];
            this.targetUserId = data["targetUserId"];
        }
    }

    static fromJS(data: any): SwitchToLinkedAccountInput {
        let result = new SwitchToLinkedAccountInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["targetTenantId"] = this.targetTenantId;
        data["targetUserId"] = this.targetUserId;
        return data; 
    }
}

export interface ISwitchToLinkedAccountInput {
    targetTenantId: number;
    targetUserId: number;
}

export class SwitchToLinkedAccountOutput implements ISwitchToLinkedAccountOutput {
    switchAccountToken: string;
    tenancyName: string;

    constructor(data?: ISwitchToLinkedAccountOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.switchAccountToken = data["switchAccountToken"];
            this.tenancyName = data["tenancyName"];
        }
    }

    static fromJS(data: any): SwitchToLinkedAccountOutput {
        let result = new SwitchToLinkedAccountOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["switchAccountToken"] = this.switchAccountToken;
        data["tenancyName"] = this.tenancyName;
        return data; 
    }
}

export interface ISwitchToLinkedAccountOutput {
    switchAccountToken: string;
    tenancyName: string;
}

export class PagedResultDtoOfAuditLogListDto implements IPagedResultDtoOfAuditLogListDto {
    totalCount: number;
    items: AuditLogListDto[];

    constructor(data?: IPagedResultDtoOfAuditLogListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(AuditLogListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfAuditLogListDto {
        let result = new PagedResultDtoOfAuditLogListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfAuditLogListDto {
    totalCount: number;
    items: AuditLogListDto[];
}

export class AuditLogListDto implements IAuditLogListDto {
    userId: number;
    userName: string;
    impersonatorTenantId: number;
    impersonatorUserId: number;
    serviceName: string;
    methodName: string;
    parameters: string;
    executionTime: moment.Moment;
    executionDuration: number;
    clientIpAddress: string;
    clientName: string;
    browserInfo: string;
    exception: string;
    customData: string;
    id: number;

    constructor(data?: IAuditLogListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            this.userName = data["userName"];
            this.impersonatorTenantId = data["impersonatorTenantId"];
            this.impersonatorUserId = data["impersonatorUserId"];
            this.serviceName = data["serviceName"];
            this.methodName = data["methodName"];
            this.parameters = data["parameters"];
            this.executionTime = data["executionTime"] ? moment(data["executionTime"].toString()) : <any>undefined;
            this.executionDuration = data["executionDuration"];
            this.clientIpAddress = data["clientIpAddress"];
            this.clientName = data["clientName"];
            this.browserInfo = data["browserInfo"];
            this.exception = data["exception"];
            this.customData = data["customData"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): AuditLogListDto {
        let result = new AuditLogListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["userName"] = this.userName;
        data["impersonatorTenantId"] = this.impersonatorTenantId;
        data["impersonatorUserId"] = this.impersonatorUserId;
        data["serviceName"] = this.serviceName;
        data["methodName"] = this.methodName;
        data["parameters"] = this.parameters;
        data["executionTime"] = this.executionTime ? this.executionTime.toISOString() : <any>undefined;
        data["executionDuration"] = this.executionDuration;
        data["clientIpAddress"] = this.clientIpAddress;
        data["clientName"] = this.clientName;
        data["browserInfo"] = this.browserInfo;
        data["exception"] = this.exception;
        data["customData"] = this.customData;
        data["id"] = this.id;
        return data; 
    }
}

export interface IAuditLogListDto {
    userId: number;
    userName: string;
    impersonatorTenantId: number;
    impersonatorUserId: number;
    serviceName: string;
    methodName: string;
    parameters: string;
    executionTime: moment.Moment;
    executionDuration: number;
    clientIpAddress: string;
    clientName: string;
    browserInfo: string;
    exception: string;
    customData: string;
    id: number;
}

export class FileDto implements IFileDto {
    fileName: string;
    fileType: string;
    fileToken: string;

    constructor(data?: IFileDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.fileName = data["fileName"];
            this.fileType = data["fileType"];
            this.fileToken = data["fileToken"];
        }
    }

    static fromJS(data: any): FileDto {
        let result = new FileDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileName"] = this.fileName;
        data["fileType"] = this.fileType;
        data["fileToken"] = this.fileToken;
        return data; 
    }
}

export interface IFileDto {
    fileName: string;
    fileType: string;
    fileToken: string;
}

export class ListResultDtoOfCacheDto implements IListResultDtoOfCacheDto {
    items: CacheDto[];

    constructor(data?: IListResultDtoOfCacheDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(CacheDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfCacheDto {
        let result = new ListResultDtoOfCacheDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfCacheDto {
    items: CacheDto[];
}

export class CacheDto implements ICacheDto {
    name: string;

    constructor(data?: ICacheDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
        }
    }

    static fromJS(data: any): CacheDto {
        let result = new CacheDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data; 
    }
}

export interface ICacheDto {
    name: string;
}

export class EntityDtoOfString implements IEntityDtoOfString {
    id: string;

    constructor(data?: IEntityDtoOfString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
        }
    }

    static fromJS(data: any): EntityDtoOfString {
        let result = new EntityDtoOfString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }
}

export interface IEntityDtoOfString {
    id: string;
}

export class GetUserChatFriendsWithSettingsOutput implements IGetUserChatFriendsWithSettingsOutput {
    serverTime: moment.Moment;
    friends: FriendDto[];

    constructor(data?: IGetUserChatFriendsWithSettingsOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.serverTime = data["serverTime"] ? moment(data["serverTime"].toString()) : <any>undefined;
            if (data["friends"] && data["friends"].constructor === Array) {
                this.friends = [];
                for (let item of data["friends"])
                    this.friends.push(FriendDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetUserChatFriendsWithSettingsOutput {
        let result = new GetUserChatFriendsWithSettingsOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["serverTime"] = this.serverTime ? this.serverTime.toISOString() : <any>undefined;
        if (this.friends && this.friends.constructor === Array) {
            data["friends"] = [];
            for (let item of this.friends)
                data["friends"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetUserChatFriendsWithSettingsOutput {
    serverTime: moment.Moment;
    friends: FriendDto[];
}

export class FriendDto implements IFriendDto {
    friendUserId: number;
    friendTenantId: number;
    friendUserName: string;
    friendTenancyName: string;
    friendProfilePictureId: string;
    unreadMessageCount: number;
    isOnline: boolean;
    state: FriendDtoState;

    constructor(data?: IFriendDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.friendUserId = data["friendUserId"];
            this.friendTenantId = data["friendTenantId"];
            this.friendUserName = data["friendUserName"];
            this.friendTenancyName = data["friendTenancyName"];
            this.friendProfilePictureId = data["friendProfilePictureId"];
            this.unreadMessageCount = data["unreadMessageCount"];
            this.isOnline = data["isOnline"];
            this.state = data["state"];
        }
    }

    static fromJS(data: any): FriendDto {
        let result = new FriendDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["friendUserId"] = this.friendUserId;
        data["friendTenantId"] = this.friendTenantId;
        data["friendUserName"] = this.friendUserName;
        data["friendTenancyName"] = this.friendTenancyName;
        data["friendProfilePictureId"] = this.friendProfilePictureId;
        data["unreadMessageCount"] = this.unreadMessageCount;
        data["isOnline"] = this.isOnline;
        data["state"] = this.state;
        return data; 
    }
}

export interface IFriendDto {
    friendUserId: number;
    friendTenantId: number;
    friendUserName: string;
    friendTenancyName: string;
    friendProfilePictureId: string;
    unreadMessageCount: number;
    isOnline: boolean;
    state: FriendDtoState;
}

export class ListResultDtoOfChatMessageDto implements IListResultDtoOfChatMessageDto {
    items: ChatMessageDto[];

    constructor(data?: IListResultDtoOfChatMessageDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(ChatMessageDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfChatMessageDto {
        let result = new ListResultDtoOfChatMessageDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfChatMessageDto {
    items: ChatMessageDto[];
}

export class ChatMessageDto implements IChatMessageDto {
    userId: number;
    tenantId: number;
    targetUserId: number;
    targetTenantId: number;
    side: ChatMessageDtoSide;
    readState: ChatMessageDtoReadState;
    receiverReadState: ChatMessageDtoReceiverReadState;
    message: string;
    creationTime: moment.Moment;
    sharedMessageId: string;
    id: number;

    constructor(data?: IChatMessageDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            this.tenantId = data["tenantId"];
            this.targetUserId = data["targetUserId"];
            this.targetTenantId = data["targetTenantId"];
            this.side = data["side"];
            this.readState = data["readState"];
            this.receiverReadState = data["receiverReadState"];
            this.message = data["message"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.sharedMessageId = data["sharedMessageId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): ChatMessageDto {
        let result = new ChatMessageDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["tenantId"] = this.tenantId;
        data["targetUserId"] = this.targetUserId;
        data["targetTenantId"] = this.targetTenantId;
        data["side"] = this.side;
        data["readState"] = this.readState;
        data["receiverReadState"] = this.receiverReadState;
        data["message"] = this.message;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["sharedMessageId"] = this.sharedMessageId;
        data["id"] = this.id;
        return data; 
    }
}

export interface IChatMessageDto {
    userId: number;
    tenantId: number;
    targetUserId: number;
    targetTenantId: number;
    side: ChatMessageDtoSide;
    readState: ChatMessageDtoReadState;
    receiverReadState: ChatMessageDtoReceiverReadState;
    message: string;
    creationTime: moment.Moment;
    sharedMessageId: string;
    id: number;
}

export class MarkAllUnreadMessagesOfUserAsReadInput implements IMarkAllUnreadMessagesOfUserAsReadInput {
    tenantId: number;
    userId: number;

    constructor(data?: IMarkAllUnreadMessagesOfUserAsReadInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.userId = data["userId"];
        }
    }

    static fromJS(data: any): MarkAllUnreadMessagesOfUserAsReadInput {
        let result = new MarkAllUnreadMessagesOfUserAsReadInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["userId"] = this.userId;
        return data; 
    }
}

export interface IMarkAllUnreadMessagesOfUserAsReadInput {
    tenantId: number;
    userId: number;
}

export class ListResultDtoOfSubscribableEditionComboboxItemDto implements IListResultDtoOfSubscribableEditionComboboxItemDto {
    items: SubscribableEditionComboboxItemDto[];

    constructor(data?: IListResultDtoOfSubscribableEditionComboboxItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(SubscribableEditionComboboxItemDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfSubscribableEditionComboboxItemDto {
        let result = new ListResultDtoOfSubscribableEditionComboboxItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfSubscribableEditionComboboxItemDto {
    items: SubscribableEditionComboboxItemDto[];
}

export class SubscribableEditionComboboxItemDto implements ISubscribableEditionComboboxItemDto {
    isFree: boolean;
    value: string;
    displayText: string;
    isSelected: boolean;

    constructor(data?: ISubscribableEditionComboboxItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.isFree = data["isFree"];
            this.value = data["value"];
            this.displayText = data["displayText"];
            this.isSelected = data["isSelected"];
        }
    }

    static fromJS(data: any): SubscribableEditionComboboxItemDto {
        let result = new SubscribableEditionComboboxItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isFree"] = this.isFree;
        data["value"] = this.value;
        data["displayText"] = this.displayText;
        data["isSelected"] = this.isSelected;
        return data; 
    }
}

export interface ISubscribableEditionComboboxItemDto {
    isFree: boolean;
    value: string;
    displayText: string;
    isSelected: boolean;
}

export class FindUsersInput implements IFindUsersInput {
    tenantId: number;
    maxResultCount: number;
    skipCount: number;
    filter: string;

    constructor(data?: IFindUsersInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.maxResultCount = data["maxResultCount"];
            this.skipCount = data["skipCount"];
            this.filter = data["filter"];
        }
    }

    static fromJS(data: any): FindUsersInput {
        let result = new FindUsersInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["filter"] = this.filter;
        return data; 
    }
}

export interface IFindUsersInput {
    tenantId: number;
    maxResultCount: number;
    skipCount: number;
    filter: string;
}

export class PagedResultDtoOfNameValueDto implements IPagedResultDtoOfNameValueDto {
    totalCount: number;
    items: NameValueDto[];

    constructor(data?: IPagedResultDtoOfNameValueDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(NameValueDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfNameValueDto {
        let result = new PagedResultDtoOfNameValueDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfNameValueDto {
    totalCount: number;
    items: NameValueDto[];
}

export class NameValueDto implements INameValueDto {
    name: string;
    value: string;

    constructor(data?: INameValueDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.value = data["value"];
        }
    }

    static fromJS(data: any): NameValueDto {
        let result = new NameValueDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["value"] = this.value;
        return data; 
    }
}

export interface INameValueDto {
    name: string;
    value: string;
}

export class GetDefaultEditionNameOutput implements IGetDefaultEditionNameOutput {
    name: string;

    constructor(data?: IGetDefaultEditionNameOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
        }
    }

    static fromJS(data: any): GetDefaultEditionNameOutput {
        let result = new GetDefaultEditionNameOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data; 
    }
}

export interface IGetDefaultEditionNameOutput {
    name: string;
}

export class DateToStringOutput implements IDateToStringOutput {
    dateString: string;

    constructor(data?: IDateToStringOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.dateString = data["dateString"];
        }
    }

    static fromJS(data: any): DateToStringOutput {
        let result = new DateToStringOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dateString"] = this.dateString;
        return data; 
    }
}

export interface IDateToStringOutput {
    dateString: string;
}

export class NameValueOfString implements INameValueOfString {
    name: string;
    value: string;

    constructor(data?: INameValueOfString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.value = data["value"];
        }
    }

    static fromJS(data: any): NameValueOfString {
        let result = new NameValueOfString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["value"] = this.value;
        return data; 
    }
}

export interface INameValueOfString {
    name: string;
    value: string;
}

export class StringOutput implements IStringOutput {
    output: string;

    constructor(data?: IStringOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.output = data["output"];
        }
    }

    static fromJS(data: any): StringOutput {
        let result = new StringOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["output"] = this.output;
        return data; 
    }
}

export interface IStringOutput {
    output: string;
}

export class ListResultDtoOfEditionListDto implements IListResultDtoOfEditionListDto {
    items: EditionListDto[];

    constructor(data?: IListResultDtoOfEditionListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(EditionListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfEditionListDto {
        let result = new ListResultDtoOfEditionListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfEditionListDto {
    items: EditionListDto[];
}

export class EditionListDto implements IEditionListDto {
    name: string;
    displayName: string;
    creationTime: moment.Moment;
    id: number;

    constructor(data?: IEditionListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): EditionListDto {
        let result = new EditionListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface IEditionListDto {
    name: string;
    displayName: string;
    creationTime: moment.Moment;
    id: number;
}

export class GetEditionEditOutput implements IGetEditionEditOutput {
    edition: EditionEditDto;
    featureValues: NameValueDto[];
    features: FlatFeatureDto[];

    constructor(data?: IGetEditionEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.edition = data["edition"] ? EditionEditDto.fromJS(data["edition"]) : <any>undefined;
            if (data["featureValues"] && data["featureValues"].constructor === Array) {
                this.featureValues = [];
                for (let item of data["featureValues"])
                    this.featureValues.push(NameValueDto.fromJS(item));
            }
            if (data["features"] && data["features"].constructor === Array) {
                this.features = [];
                for (let item of data["features"])
                    this.features.push(FlatFeatureDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetEditionEditOutput {
        let result = new GetEditionEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["edition"] = this.edition ? this.edition.toJSON() : <any>undefined;
        if (this.featureValues && this.featureValues.constructor === Array) {
            data["featureValues"] = [];
            for (let item of this.featureValues)
                data["featureValues"].push(item.toJSON());
        }
        if (this.features && this.features.constructor === Array) {
            data["features"] = [];
            for (let item of this.features)
                data["features"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetEditionEditOutput {
    edition: EditionEditDto;
    featureValues: NameValueDto[];
    features: FlatFeatureDto[];
}

export class EditionEditDto implements IEditionEditDto {
    id: number;
    displayName: string;
    monthlyPrice: number;
    annualPrice: number;
    trialDayCount: number;
    waitingDayAfterExpire: number;
    expiringEditionId: number;

    constructor(data?: IEditionEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.displayName = data["displayName"];
            this.monthlyPrice = data["monthlyPrice"];
            this.annualPrice = data["annualPrice"];
            this.trialDayCount = data["trialDayCount"];
            this.waitingDayAfterExpire = data["waitingDayAfterExpire"];
            this.expiringEditionId = data["expiringEditionId"];
        }
    }

    static fromJS(data: any): EditionEditDto {
        let result = new EditionEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["displayName"] = this.displayName;
        data["monthlyPrice"] = this.monthlyPrice;
        data["annualPrice"] = this.annualPrice;
        data["trialDayCount"] = this.trialDayCount;
        data["waitingDayAfterExpire"] = this.waitingDayAfterExpire;
        data["expiringEditionId"] = this.expiringEditionId;
        return data; 
    }
}

export interface IEditionEditDto {
    id: number;
    displayName: string;
    monthlyPrice: number;
    annualPrice: number;
    trialDayCount: number;
    waitingDayAfterExpire: number;
    expiringEditionId: number;
}

export class FlatFeatureDto implements IFlatFeatureDto {
    parentName: string;
    name: string;
    displayName: string;
    description: string;
    defaultValue: string;
    inputType: FeatureInputTypeDto;

    constructor(data?: IFlatFeatureDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.parentName = data["parentName"];
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.description = data["description"];
            this.defaultValue = data["defaultValue"];
            this.inputType = data["inputType"] ? FeatureInputTypeDto.fromJS(data["inputType"]) : <any>undefined;
        }
    }

    static fromJS(data: any): FlatFeatureDto {
        let result = new FlatFeatureDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["parentName"] = this.parentName;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["defaultValue"] = this.defaultValue;
        data["inputType"] = this.inputType ? this.inputType.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IFlatFeatureDto {
    parentName: string;
    name: string;
    displayName: string;
    description: string;
    defaultValue: string;
    inputType: FeatureInputTypeDto;
}

export class FeatureInputTypeDto implements IFeatureInputTypeDto {
    name: string;
    attributes: { [key: string] : any; };
    validator: IValueValidator;
    itemSource: LocalizableComboboxItemSourceDto;

    constructor(data?: IFeatureInputTypeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            if (data["attributes"]) {
                this.attributes = {};
                for (let key in data["attributes"]) {
                    if (data["attributes"].hasOwnProperty(key))
                        this.attributes[key] = data["attributes"][key];
                }
            }
            this.validator = data["validator"] ? IValueValidator.fromJS(data["validator"]) : <any>undefined;
            this.itemSource = data["itemSource"] ? LocalizableComboboxItemSourceDto.fromJS(data["itemSource"]) : <any>undefined;
        }
    }

    static fromJS(data: any): FeatureInputTypeDto {
        let result = new FeatureInputTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (this.attributes) {
            data["attributes"] = {};
            for (let key in this.attributes) {
                if (this.attributes.hasOwnProperty(key))
                    data["attributes"][key] = this.attributes[key];
            }
        }
        data["validator"] = this.validator ? this.validator.toJSON() : <any>undefined;
        data["itemSource"] = this.itemSource ? this.itemSource.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IFeatureInputTypeDto {
    name: string;
    attributes: { [key: string] : any; };
    validator: IValueValidator;
    itemSource: LocalizableComboboxItemSourceDto;
}

export class IValueValidator implements IIValueValidator {
    name: string;
    attributes: { [key: string] : any; };

    constructor(data?: IIValueValidator) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            if (data["attributes"]) {
                this.attributes = {};
                for (let key in data["attributes"]) {
                    if (data["attributes"].hasOwnProperty(key))
                        this.attributes[key] = data["attributes"][key];
                }
            }
        }
    }

    static fromJS(data: any): IValueValidator {
        let result = new IValueValidator();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (this.attributes) {
            data["attributes"] = {};
            for (let key in this.attributes) {
                if (this.attributes.hasOwnProperty(key))
                    data["attributes"][key] = this.attributes[key];
            }
        }
        return data; 
    }
}

export interface IIValueValidator {
    name: string;
    attributes: { [key: string] : any; };
}

export class LocalizableComboboxItemSourceDto implements ILocalizableComboboxItemSourceDto {
    items: LocalizableComboboxItemDto[];

    constructor(data?: ILocalizableComboboxItemSourceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(LocalizableComboboxItemDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LocalizableComboboxItemSourceDto {
        let result = new LocalizableComboboxItemSourceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ILocalizableComboboxItemSourceDto {
    items: LocalizableComboboxItemDto[];
}

export class LocalizableComboboxItemDto implements ILocalizableComboboxItemDto {
    value: string;
    displayText: string;

    constructor(data?: ILocalizableComboboxItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.value = data["value"];
            this.displayText = data["displayText"];
        }
    }

    static fromJS(data: any): LocalizableComboboxItemDto {
        let result = new LocalizableComboboxItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["displayText"] = this.displayText;
        return data; 
    }
}

export interface ILocalizableComboboxItemDto {
    value: string;
    displayText: string;
}

export class CreateOrUpdateEditionDto implements ICreateOrUpdateEditionDto {
    edition: EditionEditDto = new EditionEditDto();
    featureValues: NameValueDto[] = [];

    constructor(data?: ICreateOrUpdateEditionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.edition = data["edition"] ? EditionEditDto.fromJS(data["edition"]) : new EditionEditDto();
            if (data["featureValues"] && data["featureValues"].constructor === Array) {
                this.featureValues = [];
                for (let item of data["featureValues"])
                    this.featureValues.push(NameValueDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateOrUpdateEditionDto {
        let result = new CreateOrUpdateEditionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["edition"] = this.edition ? this.edition.toJSON() : <any>undefined;
        if (this.featureValues && this.featureValues.constructor === Array) {
            data["featureValues"] = [];
            for (let item of this.featureValues)
                data["featureValues"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICreateOrUpdateEditionDto {
    edition: EditionEditDto;
    featureValues: NameValueDto[];
}

export class CreateFriendshipRequestInput implements ICreateFriendshipRequestInput {
    userId: number;
    tenantId: number;

    constructor(data?: ICreateFriendshipRequestInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            this.tenantId = data["tenantId"];
        }
    }

    static fromJS(data: any): CreateFriendshipRequestInput {
        let result = new CreateFriendshipRequestInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["tenantId"] = this.tenantId;
        return data; 
    }
}

export interface ICreateFriendshipRequestInput {
    userId: number;
    tenantId: number;
}

export class CreateFriendshipRequestByUserNameInput implements ICreateFriendshipRequestByUserNameInput {
    tenancyName: string;
    userName: string;

    constructor(data?: ICreateFriendshipRequestByUserNameInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenancyName = data["tenancyName"];
            this.userName = data["userName"];
        }
    }

    static fromJS(data: any): CreateFriendshipRequestByUserNameInput {
        let result = new CreateFriendshipRequestByUserNameInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["userName"] = this.userName;
        return data; 
    }
}

export interface ICreateFriendshipRequestByUserNameInput {
    tenancyName: string;
    userName: string;
}

export class BlockUserInput implements IBlockUserInput {
    userId: number;
    tenantId: number;

    constructor(data?: IBlockUserInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            this.tenantId = data["tenantId"];
        }
    }

    static fromJS(data: any): BlockUserInput {
        let result = new BlockUserInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["tenantId"] = this.tenantId;
        return data; 
    }
}

export interface IBlockUserInput {
    userId: number;
    tenantId: number;
}

export class UnblockUserInput implements IUnblockUserInput {
    userId: number;
    tenantId: number;

    constructor(data?: IUnblockUserInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            this.tenantId = data["tenantId"];
        }
    }

    static fromJS(data: any): UnblockUserInput {
        let result = new UnblockUserInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["tenantId"] = this.tenantId;
        return data; 
    }
}

export interface IUnblockUserInput {
    userId: number;
    tenantId: number;
}

export class AcceptFriendshipRequestInput implements IAcceptFriendshipRequestInput {
    userId: number;
    tenantId: number;

    constructor(data?: IAcceptFriendshipRequestInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            this.tenantId = data["tenantId"];
        }
    }

    static fromJS(data: any): AcceptFriendshipRequestInput {
        let result = new AcceptFriendshipRequestInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["tenantId"] = this.tenantId;
        return data; 
    }
}

export interface IAcceptFriendshipRequestInput {
    userId: number;
    tenantId: number;
}

export class GetMsUnitByClusterIDListDto implements IGetMsUnitByClusterIDListDto {
    unitCode: string;
    unitNo: string;

    constructor(data?: IGetMsUnitByClusterIDListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.unitCode = data["unitCode"];
            this.unitNo = data["unitNo"];
        }
    }

    static fromJS(data: any): GetMsUnitByClusterIDListDto {
        let result = new GetMsUnitByClusterIDListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["unitCode"] = this.unitCode;
        data["unitNo"] = this.unitNo;
        return data; 
    }
}

export interface IGetMsUnitByClusterIDListDto {
    unitCode: string;
    unitNo: string;
}

export class GetMsUnitByProjectClusterDto implements IGetMsUnitByProjectClusterDto {
    unitNo: string;
    combinedUnitNo: string;
    unitCertCode: string;
    remarks: string;
    prevUnitNo: string;
    entityID: number;
    unitCodeID: number;
    unitCode: string;
    areaID: number;
    projectID: number;
    categoryID: number;
    clusterID: number;
    productID: number;
    detailID: number;
    zoningID: number;
    facingID: number;
    unitStatusID: number;
    rentalStatusID: number;
    termMainID: number;
    tokenNo: number;

    constructor(data?: IGetMsUnitByProjectClusterDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.unitNo = data["unitNo"];
            this.combinedUnitNo = data["combinedUnitNo"];
            this.unitCertCode = data["unitCertCode"];
            this.remarks = data["remarks"];
            this.prevUnitNo = data["prevUnitNo"];
            this.entityID = data["entityID"];
            this.unitCodeID = data["unitCodeID"];
            this.unitCode = data["unitCode"];
            this.areaID = data["areaID"];
            this.projectID = data["projectID"];
            this.categoryID = data["categoryID"];
            this.clusterID = data["clusterID"];
            this.productID = data["productID"];
            this.detailID = data["detailID"];
            this.zoningID = data["zoningID"];
            this.facingID = data["facingID"];
            this.unitStatusID = data["unitStatusID"];
            this.rentalStatusID = data["rentalStatusID"];
            this.termMainID = data["termMainID"];
            this.tokenNo = data["tokenNo"];
        }
    }

    static fromJS(data: any): GetMsUnitByProjectClusterDto {
        let result = new GetMsUnitByProjectClusterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["unitNo"] = this.unitNo;
        data["combinedUnitNo"] = this.combinedUnitNo;
        data["unitCertCode"] = this.unitCertCode;
        data["remarks"] = this.remarks;
        data["prevUnitNo"] = this.prevUnitNo;
        data["entityID"] = this.entityID;
        data["unitCodeID"] = this.unitCodeID;
        data["unitCode"] = this.unitCode;
        data["areaID"] = this.areaID;
        data["projectID"] = this.projectID;
        data["categoryID"] = this.categoryID;
        data["clusterID"] = this.clusterID;
        data["productID"] = this.productID;
        data["detailID"] = this.detailID;
        data["zoningID"] = this.zoningID;
        data["facingID"] = this.facingID;
        data["unitStatusID"] = this.unitStatusID;
        data["rentalStatusID"] = this.rentalStatusID;
        data["termMainID"] = this.termMainID;
        data["tokenNo"] = this.tokenNo;
        return data; 
    }
}

export interface IGetMsUnitByProjectClusterDto {
    unitNo: string;
    combinedUnitNo: string;
    unitCertCode: string;
    remarks: string;
    prevUnitNo: string;
    entityID: number;
    unitCodeID: number;
    unitCode: string;
    areaID: number;
    projectID: number;
    categoryID: number;
    clusterID: number;
    productID: number;
    detailID: number;
    zoningID: number;
    facingID: number;
    unitStatusID: number;
    rentalStatusID: number;
    termMainID: number;
    tokenNo: number;
}

export class GetMsUnitByProjectIdClusterIdDto implements IGetMsUnitByProjectIdClusterIdDto {
    projectID: number;
    clusterID: number;

    constructor(data?: IGetMsUnitByProjectIdClusterIdDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.projectID = data["projectID"];
            this.clusterID = data["clusterID"];
        }
    }

    static fromJS(data: any): GetMsUnitByProjectIdClusterIdDto {
        let result = new GetMsUnitByProjectIdClusterIdDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["projectID"] = this.projectID;
        data["clusterID"] = this.clusterID;
        return data; 
    }
}

export interface IGetMsUnitByProjectIdClusterIdDto {
    projectID: number;
    clusterID: number;
}

export class GetMsUnitByClusterIdInputListDto implements IGetMsUnitByClusterIdInputListDto {
    clusterID: number;
    projectID: number;

    constructor(data?: IGetMsUnitByClusterIdInputListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.clusterID = data["clusterID"];
            this.projectID = data["projectID"];
        }
    }

    static fromJS(data: any): GetMsUnitByClusterIdInputListDto {
        let result = new GetMsUnitByClusterIdInputListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["clusterID"] = this.clusterID;
        data["projectID"] = this.projectID;
        return data; 
    }
}

export interface IGetMsUnitByClusterIdInputListDto {
    clusterID: number;
    projectID: number;
}

export class ExportToExcelGeneratePriceListDto implements IExportToExcelGeneratePriceListDto {
    arrayTerm: string;
    productName: string;
    unitCode: string;
    unitNo: string;
    interConnectable: string;
    type: string;
    typeBR: string;
    sizeSemiGross: number;
    facing: string;
    view: string;
    bookingFee: number;
    grossPrice: number;
    netPrice: number;
    xCash: number;
    xKpa: number;
    x12x: number;
    selisih1: number;
    selisih2: number;
    downPayment10KpaInstallment12: number;
    installmentPerMonth12: number;
    x24x: number;
    downPayment20KpaInstallment24: number;
    installmentPerMonth24: number;
    x36x: number;
    downPayment20KpaInstallment36: number;
    installmentPerMonth36: number;
    termMainID: number;

    constructor(data?: IExportToExcelGeneratePriceListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.arrayTerm = data["arrayTerm"];
            this.productName = data["productName"];
            this.unitCode = data["unitCode"];
            this.unitNo = data["unitNo"];
            this.interConnectable = data["interConnectable"];
            this.type = data["type"];
            this.typeBR = data["typeBR"];
            this.sizeSemiGross = data["sizeSemiGross"];
            this.facing = data["facing"];
            this.view = data["view"];
            this.bookingFee = data["bookingFee"];
            this.grossPrice = data["grossPrice"];
            this.netPrice = data["netPrice"];
            this.xCash = data["xCash"];
            this.xKpa = data["xKpa"];
            this.x12x = data["x12x"];
            this.selisih1 = data["selisih1"];
            this.selisih2 = data["selisih2"];
            this.downPayment10KpaInstallment12 = data["downPayment10KpaInstallment12"];
            this.installmentPerMonth12 = data["installmentPerMonth12"];
            this.x24x = data["x24x"];
            this.downPayment20KpaInstallment24 = data["downPayment20KpaInstallment24"];
            this.installmentPerMonth24 = data["installmentPerMonth24"];
            this.x36x = data["x36x"];
            this.downPayment20KpaInstallment36 = data["downPayment20KpaInstallment36"];
            this.installmentPerMonth36 = data["installmentPerMonth36"];
            this.termMainID = data["termMainID"];
        }
    }

    static fromJS(data: any): ExportToExcelGeneratePriceListDto {
        let result = new ExportToExcelGeneratePriceListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["arrayTerm"] = this.arrayTerm;
        data["productName"] = this.productName;
        data["unitCode"] = this.unitCode;
        data["unitNo"] = this.unitNo;
        data["interConnectable"] = this.interConnectable;
        data["type"] = this.type;
        data["typeBR"] = this.typeBR;
        data["sizeSemiGross"] = this.sizeSemiGross;
        data["facing"] = this.facing;
        data["view"] = this.view;
        data["bookingFee"] = this.bookingFee;
        data["grossPrice"] = this.grossPrice;
        data["netPrice"] = this.netPrice;
        data["xCash"] = this.xCash;
        data["xKpa"] = this.xKpa;
        data["x12x"] = this.x12x;
        data["selisih1"] = this.selisih1;
        data["selisih2"] = this.selisih2;
        data["downPayment10KpaInstallment12"] = this.downPayment10KpaInstallment12;
        data["installmentPerMonth12"] = this.installmentPerMonth12;
        data["x24x"] = this.x24x;
        data["downPayment20KpaInstallment24"] = this.downPayment20KpaInstallment24;
        data["installmentPerMonth24"] = this.installmentPerMonth24;
        data["x36x"] = this.x36x;
        data["downPayment20KpaInstallment36"] = this.downPayment20KpaInstallment36;
        data["installmentPerMonth36"] = this.installmentPerMonth36;
        data["termMainID"] = this.termMainID;
        return data; 
    }
}

export interface IExportToExcelGeneratePriceListDto {
    arrayTerm: string;
    productName: string;
    unitCode: string;
    unitNo: string;
    interConnectable: string;
    type: string;
    typeBR: string;
    sizeSemiGross: number;
    facing: string;
    view: string;
    bookingFee: number;
    grossPrice: number;
    netPrice: number;
    xCash: number;
    xKpa: number;
    x12x: number;
    selisih1: number;
    selisih2: number;
    downPayment10KpaInstallment12: number;
    installmentPerMonth12: number;
    x24x: number;
    downPayment20KpaInstallment24: number;
    installmentPerMonth24: number;
    x36x: number;
    downPayment20KpaInstallment36: number;
    installmentPerMonth36: number;
    termMainID: number;
}

export class ExportToExcelUploadPriceListDto implements IExportToExcelUploadPriceListDto {
    arrayTerm: string;
    productName: string;
    unitCode: string;
    unitNo: string;
    price: number;
    termName: string;
    bookingFee: number;
    termMainID: number;

    constructor(data?: IExportToExcelUploadPriceListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.arrayTerm = data["arrayTerm"];
            this.productName = data["productName"];
            this.unitCode = data["unitCode"];
            this.unitNo = data["unitNo"];
            this.price = data["price"];
            this.termName = data["termName"];
            this.bookingFee = data["bookingFee"];
            this.termMainID = data["termMainID"];
        }
    }

    static fromJS(data: any): ExportToExcelUploadPriceListDto {
        let result = new ExportToExcelUploadPriceListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["arrayTerm"] = this.arrayTerm;
        data["productName"] = this.productName;
        data["unitCode"] = this.unitCode;
        data["unitNo"] = this.unitNo;
        data["price"] = this.price;
        data["termName"] = this.termName;
        data["bookingFee"] = this.bookingFee;
        data["termMainID"] = this.termMainID;
        return data; 
    }
}

export interface IExportToExcelUploadPriceListDto {
    arrayTerm: string;
    productName: string;
    unitCode: string;
    unitNo: string;
    price: number;
    termName: string;
    bookingFee: number;
    termMainID: number;
}

export class GetGeneratePriceListTermListDto implements IGetGeneratePriceListTermListDto {
    termRemarks: string;
    disc: number;

    constructor(data?: IGetGeneratePriceListTermListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.termRemarks = data["termRemarks"];
            this.disc = data["disc"];
        }
    }

    static fromJS(data: any): GetGeneratePriceListTermListDto {
        let result = new GetGeneratePriceListTermListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["termRemarks"] = this.termRemarks;
        data["disc"] = this.disc;
        return data; 
    }
}

export interface IGetGeneratePriceListTermListDto {
    termRemarks: string;
    disc: number;
}

export class HostDashboardData implements IHostDashboardData {
    newTenantsCount: number;
    newSubscriptionAmount: number;
    dashboardPlaceholder1: number;
    dashboardPlaceholder2: number;
    incomeStatistics: IncomeStastistic[];
    editionStatistics: TenantEdition[];
    expiringTenants: ExpiringTenant[];
    recentTenants: RecentTenant[];
    maxExpiringTenantsShownCount: number;
    maxRecentTenantsShownCount: number;
    subscriptionEndAlertDayCount: number;
    recentTenantsDayCount: number;
    subscriptionEndDateStart: moment.Moment;
    subscriptionEndDateEnd: moment.Moment;
    tenantCreationStartDate: moment.Moment;

    constructor(data?: IHostDashboardData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.newTenantsCount = data["newTenantsCount"];
            this.newSubscriptionAmount = data["newSubscriptionAmount"];
            this.dashboardPlaceholder1 = data["dashboardPlaceholder1"];
            this.dashboardPlaceholder2 = data["dashboardPlaceholder2"];
            if (data["incomeStatistics"] && data["incomeStatistics"].constructor === Array) {
                this.incomeStatistics = [];
                for (let item of data["incomeStatistics"])
                    this.incomeStatistics.push(IncomeStastistic.fromJS(item));
            }
            if (data["editionStatistics"] && data["editionStatistics"].constructor === Array) {
                this.editionStatistics = [];
                for (let item of data["editionStatistics"])
                    this.editionStatistics.push(TenantEdition.fromJS(item));
            }
            if (data["expiringTenants"] && data["expiringTenants"].constructor === Array) {
                this.expiringTenants = [];
                for (let item of data["expiringTenants"])
                    this.expiringTenants.push(ExpiringTenant.fromJS(item));
            }
            if (data["recentTenants"] && data["recentTenants"].constructor === Array) {
                this.recentTenants = [];
                for (let item of data["recentTenants"])
                    this.recentTenants.push(RecentTenant.fromJS(item));
            }
            this.maxExpiringTenantsShownCount = data["maxExpiringTenantsShownCount"];
            this.maxRecentTenantsShownCount = data["maxRecentTenantsShownCount"];
            this.subscriptionEndAlertDayCount = data["subscriptionEndAlertDayCount"];
            this.recentTenantsDayCount = data["recentTenantsDayCount"];
            this.subscriptionEndDateStart = data["subscriptionEndDateStart"] ? moment(data["subscriptionEndDateStart"].toString()) : <any>undefined;
            this.subscriptionEndDateEnd = data["subscriptionEndDateEnd"] ? moment(data["subscriptionEndDateEnd"].toString()) : <any>undefined;
            this.tenantCreationStartDate = data["tenantCreationStartDate"] ? moment(data["tenantCreationStartDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): HostDashboardData {
        let result = new HostDashboardData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["newTenantsCount"] = this.newTenantsCount;
        data["newSubscriptionAmount"] = this.newSubscriptionAmount;
        data["dashboardPlaceholder1"] = this.dashboardPlaceholder1;
        data["dashboardPlaceholder2"] = this.dashboardPlaceholder2;
        if (this.incomeStatistics && this.incomeStatistics.constructor === Array) {
            data["incomeStatistics"] = [];
            for (let item of this.incomeStatistics)
                data["incomeStatistics"].push(item.toJSON());
        }
        if (this.editionStatistics && this.editionStatistics.constructor === Array) {
            data["editionStatistics"] = [];
            for (let item of this.editionStatistics)
                data["editionStatistics"].push(item.toJSON());
        }
        if (this.expiringTenants && this.expiringTenants.constructor === Array) {
            data["expiringTenants"] = [];
            for (let item of this.expiringTenants)
                data["expiringTenants"].push(item.toJSON());
        }
        if (this.recentTenants && this.recentTenants.constructor === Array) {
            data["recentTenants"] = [];
            for (let item of this.recentTenants)
                data["recentTenants"].push(item.toJSON());
        }
        data["maxExpiringTenantsShownCount"] = this.maxExpiringTenantsShownCount;
        data["maxRecentTenantsShownCount"] = this.maxRecentTenantsShownCount;
        data["subscriptionEndAlertDayCount"] = this.subscriptionEndAlertDayCount;
        data["recentTenantsDayCount"] = this.recentTenantsDayCount;
        data["subscriptionEndDateStart"] = this.subscriptionEndDateStart ? this.subscriptionEndDateStart.toISOString() : <any>undefined;
        data["subscriptionEndDateEnd"] = this.subscriptionEndDateEnd ? this.subscriptionEndDateEnd.toISOString() : <any>undefined;
        data["tenantCreationStartDate"] = this.tenantCreationStartDate ? this.tenantCreationStartDate.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IHostDashboardData {
    newTenantsCount: number;
    newSubscriptionAmount: number;
    dashboardPlaceholder1: number;
    dashboardPlaceholder2: number;
    incomeStatistics: IncomeStastistic[];
    editionStatistics: TenantEdition[];
    expiringTenants: ExpiringTenant[];
    recentTenants: RecentTenant[];
    maxExpiringTenantsShownCount: number;
    maxRecentTenantsShownCount: number;
    subscriptionEndAlertDayCount: number;
    recentTenantsDayCount: number;
    subscriptionEndDateStart: moment.Moment;
    subscriptionEndDateEnd: moment.Moment;
    tenantCreationStartDate: moment.Moment;
}

export class IncomeStastistic implements IIncomeStastistic {
    label: string;
    date: moment.Moment;
    amount: number;

    constructor(data?: IIncomeStastistic) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.label = data["label"];
            this.date = data["date"] ? moment(data["date"].toString()) : <any>undefined;
            this.amount = data["amount"];
        }
    }

    static fromJS(data: any): IncomeStastistic {
        let result = new IncomeStastistic();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["label"] = this.label;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["amount"] = this.amount;
        return data; 
    }
}

export interface IIncomeStastistic {
    label: string;
    date: moment.Moment;
    amount: number;
}

export class TenantEdition implements ITenantEdition {
    label: string;
    value: number;

    constructor(data?: ITenantEdition) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.label = data["label"];
            this.value = data["value"];
        }
    }

    static fromJS(data: any): TenantEdition {
        let result = new TenantEdition();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["label"] = this.label;
        data["value"] = this.value;
        return data; 
    }
}

export interface ITenantEdition {
    label: string;
    value: number;
}

export class ExpiringTenant implements IExpiringTenant {
    tenantName: string;
    remainingDayCount: number;

    constructor(data?: IExpiringTenant) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantName = data["tenantName"];
            this.remainingDayCount = data["remainingDayCount"];
        }
    }

    static fromJS(data: any): ExpiringTenant {
        let result = new ExpiringTenant();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantName"] = this.tenantName;
        data["remainingDayCount"] = this.remainingDayCount;
        return data; 
    }
}

export interface IExpiringTenant {
    tenantName: string;
    remainingDayCount: number;
}

export class RecentTenant implements IRecentTenant {
    id: number;
    name: string;
    creationTime: moment.Moment;

    constructor(data?: IRecentTenant) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): RecentTenant {
        let result = new RecentTenant();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IRecentTenant {
    id: number;
    name: string;
    creationTime: moment.Moment;
}

export class GetIncomeStatisticsDataOutput implements IGetIncomeStatisticsDataOutput {
    incomeStatistics: IncomeStastistic[];

    constructor(data?: IGetIncomeStatisticsDataOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["incomeStatistics"] && data["incomeStatistics"].constructor === Array) {
                this.incomeStatistics = [];
                for (let item of data["incomeStatistics"])
                    this.incomeStatistics.push(IncomeStastistic.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetIncomeStatisticsDataOutput {
        let result = new GetIncomeStatisticsDataOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.incomeStatistics && this.incomeStatistics.constructor === Array) {
            data["incomeStatistics"] = [];
            for (let item of this.incomeStatistics)
                data["incomeStatistics"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetIncomeStatisticsDataOutput {
    incomeStatistics: IncomeStastistic[];
}

export class GetEditionTenantStatisticsOutput implements IGetEditionTenantStatisticsOutput {
    editionStatistics: TenantEdition[];

    constructor(data?: IGetEditionTenantStatisticsOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["editionStatistics"] && data["editionStatistics"].constructor === Array) {
                this.editionStatistics = [];
                for (let item of data["editionStatistics"])
                    this.editionStatistics.push(TenantEdition.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetEditionTenantStatisticsOutput {
        let result = new GetEditionTenantStatisticsOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.editionStatistics && this.editionStatistics.constructor === Array) {
            data["editionStatistics"] = [];
            for (let item of this.editionStatistics)
                data["editionStatistics"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetEditionTenantStatisticsOutput {
    editionStatistics: TenantEdition[];
}

export class HostSettingsEditDto implements IHostSettingsEditDto {
    general: GeneralSettingsEditDto = new GeneralSettingsEditDto();
    userManagement: HostUserManagementSettingsEditDto = new HostUserManagementSettingsEditDto();
    email: EmailSettingsEditDto = new EmailSettingsEditDto();
    tenantManagement: TenantManagementSettingsEditDto = new TenantManagementSettingsEditDto();
    security: SecuritySettingsEditDto = new SecuritySettingsEditDto();
    billing: HostBillingSettingsEditDto;

    constructor(data?: IHostSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.general = data["general"] ? GeneralSettingsEditDto.fromJS(data["general"]) : new GeneralSettingsEditDto();
            this.userManagement = data["userManagement"] ? HostUserManagementSettingsEditDto.fromJS(data["userManagement"]) : new HostUserManagementSettingsEditDto();
            this.email = data["email"] ? EmailSettingsEditDto.fromJS(data["email"]) : new EmailSettingsEditDto();
            this.tenantManagement = data["tenantManagement"] ? TenantManagementSettingsEditDto.fromJS(data["tenantManagement"]) : new TenantManagementSettingsEditDto();
            this.security = data["security"] ? SecuritySettingsEditDto.fromJS(data["security"]) : new SecuritySettingsEditDto();
            this.billing = data["billing"] ? HostBillingSettingsEditDto.fromJS(data["billing"]) : <any>undefined;
        }
    }

    static fromJS(data: any): HostSettingsEditDto {
        let result = new HostSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["general"] = this.general ? this.general.toJSON() : <any>undefined;
        data["userManagement"] = this.userManagement ? this.userManagement.toJSON() : <any>undefined;
        data["email"] = this.email ? this.email.toJSON() : <any>undefined;
        data["tenantManagement"] = this.tenantManagement ? this.tenantManagement.toJSON() : <any>undefined;
        data["security"] = this.security ? this.security.toJSON() : <any>undefined;
        data["billing"] = this.billing ? this.billing.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IHostSettingsEditDto {
    general: GeneralSettingsEditDto;
    userManagement: HostUserManagementSettingsEditDto;
    email: EmailSettingsEditDto;
    tenantManagement: TenantManagementSettingsEditDto;
    security: SecuritySettingsEditDto;
    billing: HostBillingSettingsEditDto;
}

export class GeneralSettingsEditDto implements IGeneralSettingsEditDto {
    timezone: string;
    timezoneForComparison: string;

    constructor(data?: IGeneralSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.timezone = data["timezone"];
            this.timezoneForComparison = data["timezoneForComparison"];
        }
    }

    static fromJS(data: any): GeneralSettingsEditDto {
        let result = new GeneralSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["timezone"] = this.timezone;
        data["timezoneForComparison"] = this.timezoneForComparison;
        return data; 
    }
}

export interface IGeneralSettingsEditDto {
    timezone: string;
    timezoneForComparison: string;
}

export class HostUserManagementSettingsEditDto implements IHostUserManagementSettingsEditDto {
    isEmailConfirmationRequiredForLogin: boolean;
    smsVerificationEnabled: boolean;

    constructor(data?: IHostUserManagementSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.isEmailConfirmationRequiredForLogin = data["isEmailConfirmationRequiredForLogin"];
            this.smsVerificationEnabled = data["smsVerificationEnabled"];
        }
    }

    static fromJS(data: any): HostUserManagementSettingsEditDto {
        let result = new HostUserManagementSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isEmailConfirmationRequiredForLogin"] = this.isEmailConfirmationRequiredForLogin;
        data["smsVerificationEnabled"] = this.smsVerificationEnabled;
        return data; 
    }
}

export interface IHostUserManagementSettingsEditDto {
    isEmailConfirmationRequiredForLogin: boolean;
    smsVerificationEnabled: boolean;
}

export class EmailSettingsEditDto implements IEmailSettingsEditDto {
    defaultFromAddress: string;
    defaultFromDisplayName: string;
    smtpHost: string;
    smtpPort: number;
    smtpUserName: string;
    smtpPassword: string;
    smtpDomain: string;
    smtpEnableSsl: boolean;
    smtpUseDefaultCredentials: boolean;

    constructor(data?: IEmailSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.defaultFromAddress = data["defaultFromAddress"];
            this.defaultFromDisplayName = data["defaultFromDisplayName"];
            this.smtpHost = data["smtpHost"];
            this.smtpPort = data["smtpPort"];
            this.smtpUserName = data["smtpUserName"];
            this.smtpPassword = data["smtpPassword"];
            this.smtpDomain = data["smtpDomain"];
            this.smtpEnableSsl = data["smtpEnableSsl"];
            this.smtpUseDefaultCredentials = data["smtpUseDefaultCredentials"];
        }
    }

    static fromJS(data: any): EmailSettingsEditDto {
        let result = new EmailSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["defaultFromAddress"] = this.defaultFromAddress;
        data["defaultFromDisplayName"] = this.defaultFromDisplayName;
        data["smtpHost"] = this.smtpHost;
        data["smtpPort"] = this.smtpPort;
        data["smtpUserName"] = this.smtpUserName;
        data["smtpPassword"] = this.smtpPassword;
        data["smtpDomain"] = this.smtpDomain;
        data["smtpEnableSsl"] = this.smtpEnableSsl;
        data["smtpUseDefaultCredentials"] = this.smtpUseDefaultCredentials;
        return data; 
    }
}

export interface IEmailSettingsEditDto {
    defaultFromAddress: string;
    defaultFromDisplayName: string;
    smtpHost: string;
    smtpPort: number;
    smtpUserName: string;
    smtpPassword: string;
    smtpDomain: string;
    smtpEnableSsl: boolean;
    smtpUseDefaultCredentials: boolean;
}

export class TenantManagementSettingsEditDto implements ITenantManagementSettingsEditDto {
    allowSelfRegistration: boolean;
    isNewRegisteredTenantActiveByDefault: boolean;
    useCaptchaOnRegistration: boolean;
    defaultEditionId: number;

    constructor(data?: ITenantManagementSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.allowSelfRegistration = data["allowSelfRegistration"];
            this.isNewRegisteredTenantActiveByDefault = data["isNewRegisteredTenantActiveByDefault"];
            this.useCaptchaOnRegistration = data["useCaptchaOnRegistration"];
            this.defaultEditionId = data["defaultEditionId"];
        }
    }

    static fromJS(data: any): TenantManagementSettingsEditDto {
        let result = new TenantManagementSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["allowSelfRegistration"] = this.allowSelfRegistration;
        data["isNewRegisteredTenantActiveByDefault"] = this.isNewRegisteredTenantActiveByDefault;
        data["useCaptchaOnRegistration"] = this.useCaptchaOnRegistration;
        data["defaultEditionId"] = this.defaultEditionId;
        return data; 
    }
}

export interface ITenantManagementSettingsEditDto {
    allowSelfRegistration: boolean;
    isNewRegisteredTenantActiveByDefault: boolean;
    useCaptchaOnRegistration: boolean;
    defaultEditionId: number;
}

export class SecuritySettingsEditDto implements ISecuritySettingsEditDto {
    useDefaultPasswordComplexitySettings: boolean;
    passwordComplexity: PasswordComplexitySetting;
    defaultPasswordComplexity: PasswordComplexitySetting;
    userLockOut: UserLockOutSettingsEditDto;
    twoFactorLogin: TwoFactorLoginSettingsEditDto;

    constructor(data?: ISecuritySettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.useDefaultPasswordComplexitySettings = data["useDefaultPasswordComplexitySettings"];
            this.passwordComplexity = data["passwordComplexity"] ? PasswordComplexitySetting.fromJS(data["passwordComplexity"]) : <any>undefined;
            this.defaultPasswordComplexity = data["defaultPasswordComplexity"] ? PasswordComplexitySetting.fromJS(data["defaultPasswordComplexity"]) : <any>undefined;
            this.userLockOut = data["userLockOut"] ? UserLockOutSettingsEditDto.fromJS(data["userLockOut"]) : <any>undefined;
            this.twoFactorLogin = data["twoFactorLogin"] ? TwoFactorLoginSettingsEditDto.fromJS(data["twoFactorLogin"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SecuritySettingsEditDto {
        let result = new SecuritySettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["useDefaultPasswordComplexitySettings"] = this.useDefaultPasswordComplexitySettings;
        data["passwordComplexity"] = this.passwordComplexity ? this.passwordComplexity.toJSON() : <any>undefined;
        data["defaultPasswordComplexity"] = this.defaultPasswordComplexity ? this.defaultPasswordComplexity.toJSON() : <any>undefined;
        data["userLockOut"] = this.userLockOut ? this.userLockOut.toJSON() : <any>undefined;
        data["twoFactorLogin"] = this.twoFactorLogin ? this.twoFactorLogin.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ISecuritySettingsEditDto {
    useDefaultPasswordComplexitySettings: boolean;
    passwordComplexity: PasswordComplexitySetting;
    defaultPasswordComplexity: PasswordComplexitySetting;
    userLockOut: UserLockOutSettingsEditDto;
    twoFactorLogin: TwoFactorLoginSettingsEditDto;
}

export class HostBillingSettingsEditDto implements IHostBillingSettingsEditDto {
    legalName: string;
    address: string;

    constructor(data?: IHostBillingSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.legalName = data["legalName"];
            this.address = data["address"];
        }
    }

    static fromJS(data: any): HostBillingSettingsEditDto {
        let result = new HostBillingSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["legalName"] = this.legalName;
        data["address"] = this.address;
        return data; 
    }
}

export interface IHostBillingSettingsEditDto {
    legalName: string;
    address: string;
}

export class PasswordComplexitySetting implements IPasswordComplexitySetting {
    requireDigit: boolean;
    requireLowercase: boolean;
    requireNonAlphanumeric: boolean;
    requireUppercase: boolean;
    requiredLength: number;

    constructor(data?: IPasswordComplexitySetting) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.requireDigit = data["requireDigit"];
            this.requireLowercase = data["requireLowercase"];
            this.requireNonAlphanumeric = data["requireNonAlphanumeric"];
            this.requireUppercase = data["requireUppercase"];
            this.requiredLength = data["requiredLength"];
        }
    }

    static fromJS(data: any): PasswordComplexitySetting {
        let result = new PasswordComplexitySetting();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["requireDigit"] = this.requireDigit;
        data["requireLowercase"] = this.requireLowercase;
        data["requireNonAlphanumeric"] = this.requireNonAlphanumeric;
        data["requireUppercase"] = this.requireUppercase;
        data["requiredLength"] = this.requiredLength;
        return data; 
    }
}

export interface IPasswordComplexitySetting {
    requireDigit: boolean;
    requireLowercase: boolean;
    requireNonAlphanumeric: boolean;
    requireUppercase: boolean;
    requiredLength: number;
}

export class UserLockOutSettingsEditDto implements IUserLockOutSettingsEditDto {
    isEnabled: boolean;
    maxFailedAccessAttemptsBeforeLockout: number;
    defaultAccountLockoutSeconds: number;

    constructor(data?: IUserLockOutSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.isEnabled = data["isEnabled"];
            this.maxFailedAccessAttemptsBeforeLockout = data["maxFailedAccessAttemptsBeforeLockout"];
            this.defaultAccountLockoutSeconds = data["defaultAccountLockoutSeconds"];
        }
    }

    static fromJS(data: any): UserLockOutSettingsEditDto {
        let result = new UserLockOutSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isEnabled"] = this.isEnabled;
        data["maxFailedAccessAttemptsBeforeLockout"] = this.maxFailedAccessAttemptsBeforeLockout;
        data["defaultAccountLockoutSeconds"] = this.defaultAccountLockoutSeconds;
        return data; 
    }
}

export interface IUserLockOutSettingsEditDto {
    isEnabled: boolean;
    maxFailedAccessAttemptsBeforeLockout: number;
    defaultAccountLockoutSeconds: number;
}

export class TwoFactorLoginSettingsEditDto implements ITwoFactorLoginSettingsEditDto {
    isEnabledForApplication: boolean;
    isEnabled: boolean;
    isEmailProviderEnabled: boolean;
    isSmsProviderEnabled: boolean;
    isRememberBrowserEnabled: boolean;
    isGoogleAuthenticatorEnabled: boolean;

    constructor(data?: ITwoFactorLoginSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.isEnabledForApplication = data["isEnabledForApplication"];
            this.isEnabled = data["isEnabled"];
            this.isEmailProviderEnabled = data["isEmailProviderEnabled"];
            this.isSmsProviderEnabled = data["isSmsProviderEnabled"];
            this.isRememberBrowserEnabled = data["isRememberBrowserEnabled"];
            this.isGoogleAuthenticatorEnabled = data["isGoogleAuthenticatorEnabled"];
        }
    }

    static fromJS(data: any): TwoFactorLoginSettingsEditDto {
        let result = new TwoFactorLoginSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isEnabledForApplication"] = this.isEnabledForApplication;
        data["isEnabled"] = this.isEnabled;
        data["isEmailProviderEnabled"] = this.isEmailProviderEnabled;
        data["isSmsProviderEnabled"] = this.isSmsProviderEnabled;
        data["isRememberBrowserEnabled"] = this.isRememberBrowserEnabled;
        data["isGoogleAuthenticatorEnabled"] = this.isGoogleAuthenticatorEnabled;
        return data; 
    }
}

export interface ITwoFactorLoginSettingsEditDto {
    isEnabledForApplication: boolean;
    isEnabled: boolean;
    isEmailProviderEnabled: boolean;
    isSmsProviderEnabled: boolean;
    isRememberBrowserEnabled: boolean;
    isGoogleAuthenticatorEnabled: boolean;
}

export class SendTestEmailInput implements ISendTestEmailInput {
    emailAddress: string;

    constructor(data?: ISendTestEmailInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.emailAddress = data["emailAddress"];
        }
    }

    static fromJS(data: any): SendTestEmailInput {
        let result = new SendTestEmailInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["emailAddress"] = this.emailAddress;
        return data; 
    }
}

export interface ISendTestEmailInput {
    emailAddress: string;
}

export class ListResultDtoOfGetAllIDTypeListDto implements IListResultDtoOfGetAllIDTypeListDto {
    items: GetAllIDTypeListDto[];

    constructor(data?: IListResultDtoOfGetAllIDTypeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetAllIDTypeListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetAllIDTypeListDto {
        let result = new ListResultDtoOfGetAllIDTypeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetAllIDTypeListDto {
    items: GetAllIDTypeListDto[];
}

export class GetAllIDTypeListDto implements IGetAllIDTypeListDto {
    idType: string;
    idTypeName: string;

    constructor(data?: IGetAllIDTypeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.idType = data["idType"];
            this.idTypeName = data["idTypeName"];
        }
    }

    static fromJS(data: any): GetAllIDTypeListDto {
        let result = new GetAllIDTypeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idType"] = this.idType;
        data["idTypeName"] = this.idTypeName;
        return data; 
    }
}

export interface IGetAllIDTypeListDto {
    idType: string;
    idTypeName: string;
}

export class InstallDto implements IInstallDto {
    connectionString: string;
    adminPassword: string;
    webSiteUrl: string;
    serverUrl: string;
    defaultLanguage: string;
    smtpSettings: EmailSettingsEditDto;
    billInfo: HostBillingSettingsEditDto;

    constructor(data?: IInstallDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.connectionString = data["connectionString"];
            this.adminPassword = data["adminPassword"];
            this.webSiteUrl = data["webSiteUrl"];
            this.serverUrl = data["serverUrl"];
            this.defaultLanguage = data["defaultLanguage"];
            this.smtpSettings = data["smtpSettings"] ? EmailSettingsEditDto.fromJS(data["smtpSettings"]) : <any>undefined;
            this.billInfo = data["billInfo"] ? HostBillingSettingsEditDto.fromJS(data["billInfo"]) : <any>undefined;
        }
    }

    static fromJS(data: any): InstallDto {
        let result = new InstallDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["connectionString"] = this.connectionString;
        data["adminPassword"] = this.adminPassword;
        data["webSiteUrl"] = this.webSiteUrl;
        data["serverUrl"] = this.serverUrl;
        data["defaultLanguage"] = this.defaultLanguage;
        data["smtpSettings"] = this.smtpSettings ? this.smtpSettings.toJSON() : <any>undefined;
        data["billInfo"] = this.billInfo ? this.billInfo.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IInstallDto {
    connectionString: string;
    adminPassword: string;
    webSiteUrl: string;
    serverUrl: string;
    defaultLanguage: string;
    smtpSettings: EmailSettingsEditDto;
    billInfo: HostBillingSettingsEditDto;
}

export class AppSettingsJsonDto implements IAppSettingsJsonDto {
    connectionString: string;
    webSiteUrl: string;
    serverSiteUrl: string;
    languages: NameValue[];

    constructor(data?: IAppSettingsJsonDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.connectionString = data["connectionString"];
            this.webSiteUrl = data["webSiteUrl"];
            this.serverSiteUrl = data["serverSiteUrl"];
            if (data["languages"] && data["languages"].constructor === Array) {
                this.languages = [];
                for (let item of data["languages"])
                    this.languages.push(NameValue.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AppSettingsJsonDto {
        let result = new AppSettingsJsonDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["connectionString"] = this.connectionString;
        data["webSiteUrl"] = this.webSiteUrl;
        data["serverSiteUrl"] = this.serverSiteUrl;
        if (this.languages && this.languages.constructor === Array) {
            data["languages"] = [];
            for (let item of this.languages)
                data["languages"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IAppSettingsJsonDto {
    connectionString: string;
    webSiteUrl: string;
    serverSiteUrl: string;
    languages: NameValue[];
}

export class NameValue implements INameValue {
    name: string;
    value: string;

    constructor(data?: INameValue) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.value = data["value"];
        }
    }

    static fromJS(data: any): NameValue {
        let result = new NameValue();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["value"] = this.value;
        return data; 
    }
}

export interface INameValue {
    name: string;
    value: string;
}

export class CheckDatabaseOutput implements ICheckDatabaseOutput {
    isDatabaseExist: boolean;

    constructor(data?: ICheckDatabaseOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.isDatabaseExist = data["isDatabaseExist"];
        }
    }

    static fromJS(data: any): CheckDatabaseOutput {
        let result = new CheckDatabaseOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isDatabaseExist"] = this.isDatabaseExist;
        return data; 
    }
}

export interface ICheckDatabaseOutput {
    isDatabaseExist: boolean;
}

export class InvoiceDto implements IInvoiceDto {
    amount: number;
    editionDisplayName: string;
    invoiceNo: string;
    invoiceDate: moment.Moment;
    tenantLegalName: string;
    tenantAddress: string[];
    tenantTaxNo: string;
    hostLegalName: string;
    hostAddress: string[];

    constructor(data?: IInvoiceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.amount = data["amount"];
            this.editionDisplayName = data["editionDisplayName"];
            this.invoiceNo = data["invoiceNo"];
            this.invoiceDate = data["invoiceDate"] ? moment(data["invoiceDate"].toString()) : <any>undefined;
            this.tenantLegalName = data["tenantLegalName"];
            if (data["tenantAddress"] && data["tenantAddress"].constructor === Array) {
                this.tenantAddress = [];
                for (let item of data["tenantAddress"])
                    this.tenantAddress.push(item);
            }
            this.tenantTaxNo = data["tenantTaxNo"];
            this.hostLegalName = data["hostLegalName"];
            if (data["hostAddress"] && data["hostAddress"].constructor === Array) {
                this.hostAddress = [];
                for (let item of data["hostAddress"])
                    this.hostAddress.push(item);
            }
        }
    }

    static fromJS(data: any): InvoiceDto {
        let result = new InvoiceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["amount"] = this.amount;
        data["editionDisplayName"] = this.editionDisplayName;
        data["invoiceNo"] = this.invoiceNo;
        data["invoiceDate"] = this.invoiceDate ? this.invoiceDate.toISOString() : <any>undefined;
        data["tenantLegalName"] = this.tenantLegalName;
        if (this.tenantAddress && this.tenantAddress.constructor === Array) {
            data["tenantAddress"] = [];
            for (let item of this.tenantAddress)
                data["tenantAddress"].push(item);
        }
        data["tenantTaxNo"] = this.tenantTaxNo;
        data["hostLegalName"] = this.hostLegalName;
        if (this.hostAddress && this.hostAddress.constructor === Array) {
            data["hostAddress"] = [];
            for (let item of this.hostAddress)
                data["hostAddress"].push(item);
        }
        return data; 
    }
}

export interface IInvoiceDto {
    amount: number;
    editionDisplayName: string;
    invoiceNo: string;
    invoiceDate: moment.Moment;
    tenantLegalName: string;
    tenantAddress: string[];
    tenantTaxNo: string;
    hostLegalName: string;
    hostAddress: string[];
}

export class CreateInvoiceDto implements ICreateInvoiceDto {
    subscriptionPaymentId: number;

    constructor(data?: ICreateInvoiceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.subscriptionPaymentId = data["subscriptionPaymentId"];
        }
    }

    static fromJS(data: any): CreateInvoiceDto {
        let result = new CreateInvoiceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["subscriptionPaymentId"] = this.subscriptionPaymentId;
        return data; 
    }
}

export interface ICreateInvoiceDto {
    subscriptionPaymentId: number;
}

export class GetLanguagesOutput implements IGetLanguagesOutput {
    defaultLanguageName: string;
    items: ApplicationLanguageListDto[];

    constructor(data?: IGetLanguagesOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.defaultLanguageName = data["defaultLanguageName"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(ApplicationLanguageListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetLanguagesOutput {
        let result = new GetLanguagesOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["defaultLanguageName"] = this.defaultLanguageName;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetLanguagesOutput {
    defaultLanguageName: string;
    items: ApplicationLanguageListDto[];
}

export class ApplicationLanguageListDto implements IApplicationLanguageListDto {
    tenantId: number;
    name: string;
    displayName: string;
    icon: string;
    isDisabled: boolean;
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: moment.Moment;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;
    id: number;

    constructor(data?: IApplicationLanguageListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.icon = data["icon"];
            this.isDisabled = data["isDisabled"];
            this.isDeleted = data["isDeleted"];
            this.deleterUserId = data["deleterUserId"];
            this.deletionTime = data["deletionTime"] ? moment(data["deletionTime"].toString()) : <any>undefined;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): ApplicationLanguageListDto {
        let result = new ApplicationLanguageListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["icon"] = this.icon;
        data["isDisabled"] = this.isDisabled;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }
}

export interface IApplicationLanguageListDto {
    tenantId: number;
    name: string;
    displayName: string;
    icon: string;
    isDisabled: boolean;
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: moment.Moment;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;
    id: number;
}

export class GetLanguageForEditOutput implements IGetLanguageForEditOutput {
    language: ApplicationLanguageEditDto;
    languageNames: ComboboxItemDto[];
    flags: ComboboxItemDto[];

    constructor(data?: IGetLanguageForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.language = data["language"] ? ApplicationLanguageEditDto.fromJS(data["language"]) : <any>undefined;
            if (data["languageNames"] && data["languageNames"].constructor === Array) {
                this.languageNames = [];
                for (let item of data["languageNames"])
                    this.languageNames.push(ComboboxItemDto.fromJS(item));
            }
            if (data["flags"] && data["flags"].constructor === Array) {
                this.flags = [];
                for (let item of data["flags"])
                    this.flags.push(ComboboxItemDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetLanguageForEditOutput {
        let result = new GetLanguageForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["language"] = this.language ? this.language.toJSON() : <any>undefined;
        if (this.languageNames && this.languageNames.constructor === Array) {
            data["languageNames"] = [];
            for (let item of this.languageNames)
                data["languageNames"].push(item.toJSON());
        }
        if (this.flags && this.flags.constructor === Array) {
            data["flags"] = [];
            for (let item of this.flags)
                data["flags"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetLanguageForEditOutput {
    language: ApplicationLanguageEditDto;
    languageNames: ComboboxItemDto[];
    flags: ComboboxItemDto[];
}

export class ApplicationLanguageEditDto implements IApplicationLanguageEditDto {
    id: number;
    name: string;
    icon: string;
    isEnabled: boolean;

    constructor(data?: IApplicationLanguageEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.icon = data["icon"];
            this.isEnabled = data["isEnabled"];
        }
    }

    static fromJS(data: any): ApplicationLanguageEditDto {
        let result = new ApplicationLanguageEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["icon"] = this.icon;
        data["isEnabled"] = this.isEnabled;
        return data; 
    }
}

export interface IApplicationLanguageEditDto {
    id: number;
    name: string;
    icon: string;
    isEnabled: boolean;
}

export class ComboboxItemDto implements IComboboxItemDto {
    value: string;
    displayText: string;
    isSelected: boolean;

    constructor(data?: IComboboxItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.value = data["value"];
            this.displayText = data["displayText"];
            this.isSelected = data["isSelected"];
        }
    }

    static fromJS(data: any): ComboboxItemDto {
        let result = new ComboboxItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["displayText"] = this.displayText;
        data["isSelected"] = this.isSelected;
        return data; 
    }
}

export interface IComboboxItemDto {
    value: string;
    displayText: string;
    isSelected: boolean;
}

export class CreateOrUpdateLanguageInput implements ICreateOrUpdateLanguageInput {
    language: ApplicationLanguageEditDto = new ApplicationLanguageEditDto();

    constructor(data?: ICreateOrUpdateLanguageInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.language = data["language"] ? ApplicationLanguageEditDto.fromJS(data["language"]) : new ApplicationLanguageEditDto();
        }
    }

    static fromJS(data: any): CreateOrUpdateLanguageInput {
        let result = new CreateOrUpdateLanguageInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["language"] = this.language ? this.language.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ICreateOrUpdateLanguageInput {
    language: ApplicationLanguageEditDto;
}

export class SetDefaultLanguageInput implements ISetDefaultLanguageInput {
    name: string;

    constructor(data?: ISetDefaultLanguageInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
        }
    }

    static fromJS(data: any): SetDefaultLanguageInput {
        let result = new SetDefaultLanguageInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data; 
    }
}

export interface ISetDefaultLanguageInput {
    name: string;
}

export class PagedResultDtoOfLanguageTextListDto implements IPagedResultDtoOfLanguageTextListDto {
    totalCount: number;
    items: LanguageTextListDto[];

    constructor(data?: IPagedResultDtoOfLanguageTextListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(LanguageTextListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfLanguageTextListDto {
        let result = new PagedResultDtoOfLanguageTextListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfLanguageTextListDto {
    totalCount: number;
    items: LanguageTextListDto[];
}

export class LanguageTextListDto implements ILanguageTextListDto {
    key: string;
    baseValue: string;
    targetValue: string;

    constructor(data?: ILanguageTextListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.key = data["key"];
            this.baseValue = data["baseValue"];
            this.targetValue = data["targetValue"];
        }
    }

    static fromJS(data: any): LanguageTextListDto {
        let result = new LanguageTextListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key;
        data["baseValue"] = this.baseValue;
        data["targetValue"] = this.targetValue;
        return data; 
    }
}

export interface ILanguageTextListDto {
    key: string;
    baseValue: string;
    targetValue: string;
}

export class UpdateLanguageTextInput implements IUpdateLanguageTextInput {
    languageName: string;
    sourceName: string;
    key: string;
    value: string;

    constructor(data?: IUpdateLanguageTextInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.languageName = data["languageName"];
            this.sourceName = data["sourceName"];
            this.key = data["key"];
            this.value = data["value"];
        }
    }

    static fromJS(data: any): UpdateLanguageTextInput {
        let result = new UpdateLanguageTextInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["languageName"] = this.languageName;
        data["sourceName"] = this.sourceName;
        data["key"] = this.key;
        data["value"] = this.value;
        return data; 
    }
}

export interface IUpdateLanguageTextInput {
    languageName: string;
    sourceName: string;
    key: string;
    value: string;
}

export class ListResultDtoOfGetLkAddrTypeDropdownListDto implements IListResultDtoOfGetLkAddrTypeDropdownListDto {
    items: GetLkAddrTypeDropdownListDto[];

    constructor(data?: IListResultDtoOfGetLkAddrTypeDropdownListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetLkAddrTypeDropdownListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetLkAddrTypeDropdownListDto {
        let result = new ListResultDtoOfGetLkAddrTypeDropdownListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetLkAddrTypeDropdownListDto {
    items: GetLkAddrTypeDropdownListDto[];
}

export class GetLkAddrTypeDropdownListDto implements IGetLkAddrTypeDropdownListDto {
    addrType: string;
    addrTypeName: string;

    constructor(data?: IGetLkAddrTypeDropdownListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.addrType = data["addrType"];
            this.addrTypeName = data["addrTypeName"];
        }
    }

    static fromJS(data: any): GetLkAddrTypeDropdownListDto {
        let result = new GetLkAddrTypeDropdownListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["addrType"] = this.addrType;
        data["addrTypeName"] = this.addrTypeName;
        return data; 
    }
}

export interface IGetLkAddrTypeDropdownListDto {
    addrType: string;
    addrTypeName: string;
}

export class ListResultDtoOfGetAllBankTypeListDto implements IListResultDtoOfGetAllBankTypeListDto {
    items: GetAllBankTypeListDto[];

    constructor(data?: IListResultDtoOfGetAllBankTypeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetAllBankTypeListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetAllBankTypeListDto {
        let result = new ListResultDtoOfGetAllBankTypeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetAllBankTypeListDto {
    items: GetAllBankTypeListDto[];
}

export class GetAllBankTypeListDto implements IGetAllBankTypeListDto {
    bankType: string;
    bankTypeName: string;

    constructor(data?: IGetAllBankTypeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.bankType = data["bankType"];
            this.bankTypeName = data["bankTypeName"];
        }
    }

    static fromJS(data: any): GetAllBankTypeListDto {
        let result = new GetAllBankTypeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bankType"] = this.bankType;
        data["bankTypeName"] = this.bankTypeName;
        return data; 
    }
}

export interface IGetAllBankTypeListDto {
    bankType: string;
    bankTypeName: string;
}

export class ListResultDtoOfGetAllBloodListDto implements IListResultDtoOfGetAllBloodListDto {
    items: GetAllBloodListDto[];

    constructor(data?: IListResultDtoOfGetAllBloodListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetAllBloodListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetAllBloodListDto {
        let result = new ListResultDtoOfGetAllBloodListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetAllBloodListDto {
    items: GetAllBloodListDto[];
}

export class GetAllBloodListDto implements IGetAllBloodListDto {
    bloodCode: string;
    bloodName: string;

    constructor(data?: IGetAllBloodListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.bloodCode = data["bloodCode"];
            this.bloodName = data["bloodName"];
        }
    }

    static fromJS(data: any): GetAllBloodListDto {
        let result = new GetAllBloodListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bloodCode"] = this.bloodCode;
        data["bloodName"] = this.bloodName;
        return data; 
    }
}

export interface IGetAllBloodListDto {
    bloodCode: string;
    bloodName: string;
}

export class ListResultDtoOfGetAllCountryListDto implements IListResultDtoOfGetAllCountryListDto {
    items: GetAllCountryListDto[];

    constructor(data?: IListResultDtoOfGetAllCountryListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetAllCountryListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetAllCountryListDto {
        let result = new ListResultDtoOfGetAllCountryListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetAllCountryListDto {
    items: GetAllCountryListDto[];
}

export class GetAllCountryListDto implements IGetAllCountryListDto {
    country: string;
    ppatkCountryCode: string;

    constructor(data?: IGetAllCountryListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.country = data["country"];
            this.ppatkCountryCode = data["ppatkCountryCode"];
        }
    }

    static fromJS(data: any): GetAllCountryListDto {
        let result = new GetAllCountryListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["country"] = this.country;
        data["ppatkCountryCode"] = this.ppatkCountryCode;
        return data; 
    }
}

export interface IGetAllCountryListDto {
    country: string;
    ppatkCountryCode: string;
}

export class ListResultDtoOfGetAllMsFacingList implements IListResultDtoOfGetAllMsFacingList {
    items: GetAllMsFacingList[];

    constructor(data?: IListResultDtoOfGetAllMsFacingList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetAllMsFacingList.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetAllMsFacingList {
        let result = new ListResultDtoOfGetAllMsFacingList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetAllMsFacingList {
    items: GetAllMsFacingList[];
}

export class GetAllMsFacingList implements IGetAllMsFacingList {
    id: number;
    facingCode: string;
    facingName: string;

    constructor(data?: IGetAllMsFacingList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.facingCode = data["facingCode"];
            this.facingName = data["facingName"];
        }
    }

    static fromJS(data: any): GetAllMsFacingList {
        let result = new GetAllMsFacingList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["facingCode"] = this.facingCode;
        data["facingName"] = this.facingName;
        return data; 
    }
}

export interface IGetAllMsFacingList {
    id: number;
    facingCode: string;
    facingName: string;
}

export class ListResultDtoOfGetLkFamilyStatusDropdownListDto implements IListResultDtoOfGetLkFamilyStatusDropdownListDto {
    items: GetLkFamilyStatusDropdownListDto[];

    constructor(data?: IListResultDtoOfGetLkFamilyStatusDropdownListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetLkFamilyStatusDropdownListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetLkFamilyStatusDropdownListDto {
        let result = new ListResultDtoOfGetLkFamilyStatusDropdownListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetLkFamilyStatusDropdownListDto {
    items: GetLkFamilyStatusDropdownListDto[];
}

export class GetLkFamilyStatusDropdownListDto implements IGetLkFamilyStatusDropdownListDto {
    famStatus: string;
    famStatusName: string;

    constructor(data?: IGetLkFamilyStatusDropdownListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.famStatus = data["famStatus"];
            this.famStatusName = data["famStatusName"];
        }
    }

    static fromJS(data: any): GetLkFamilyStatusDropdownListDto {
        let result = new GetLkFamilyStatusDropdownListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["famStatus"] = this.famStatus;
        data["famStatusName"] = this.famStatusName;
        return data; 
    }
}

export interface IGetLkFamilyStatusDropdownListDto {
    famStatus: string;
    famStatusName: string;
}

export class ListResultDtoOfGetLkGradeDropdownListDto implements IListResultDtoOfGetLkGradeDropdownListDto {
    items: GetLkGradeDropdownListDto[];

    constructor(data?: IListResultDtoOfGetLkGradeDropdownListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetLkGradeDropdownListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetLkGradeDropdownListDto {
        let result = new ListResultDtoOfGetLkGradeDropdownListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetLkGradeDropdownListDto {
    items: GetLkGradeDropdownListDto[];
}

export class GetLkGradeDropdownListDto implements IGetLkGradeDropdownListDto {
    gradeCode: string;
    gradeName: string;

    constructor(data?: IGetLkGradeDropdownListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.gradeCode = data["gradeCode"];
            this.gradeName = data["gradeName"];
        }
    }

    static fromJS(data: any): GetLkGradeDropdownListDto {
        let result = new GetLkGradeDropdownListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["gradeCode"] = this.gradeCode;
        data["gradeName"] = this.gradeName;
        return data; 
    }
}

export interface IGetLkGradeDropdownListDto {
    gradeCode: string;
    gradeName: string;
}

export class ListResultDtoOfGetAllLkKeyPeopleDropdwonListDto implements IListResultDtoOfGetAllLkKeyPeopleDropdwonListDto {
    items: GetAllLkKeyPeopleDropdwonListDto[];

    constructor(data?: IListResultDtoOfGetAllLkKeyPeopleDropdwonListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetAllLkKeyPeopleDropdwonListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetAllLkKeyPeopleDropdwonListDto {
        let result = new ListResultDtoOfGetAllLkKeyPeopleDropdwonListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetAllLkKeyPeopleDropdwonListDto {
    items: GetAllLkKeyPeopleDropdwonListDto[];
}

export class GetAllLkKeyPeopleDropdwonListDto implements IGetAllLkKeyPeopleDropdwonListDto {
    id: number;
    keyPeopleDesc: string;

    constructor(data?: IGetAllLkKeyPeopleDropdwonListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.keyPeopleDesc = data["keyPeopleDesc"];
        }
    }

    static fromJS(data: any): GetAllLkKeyPeopleDropdwonListDto {
        let result = new GetAllLkKeyPeopleDropdwonListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["keyPeopleDesc"] = this.keyPeopleDesc;
        return data; 
    }
}

export interface IGetAllLkKeyPeopleDropdwonListDto {
    id: number;
    keyPeopleDesc: string;
}

export class ListResultDtoOfGetAllMarStatusListDto implements IListResultDtoOfGetAllMarStatusListDto {
    items: GetAllMarStatusListDto[];

    constructor(data?: IListResultDtoOfGetAllMarStatusListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetAllMarStatusListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetAllMarStatusListDto {
        let result = new ListResultDtoOfGetAllMarStatusListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetAllMarStatusListDto {
    items: GetAllMarStatusListDto[];
}

export class GetAllMarStatusListDto implements IGetAllMarStatusListDto {
    marStatus: string;
    marStatusName: string;

    constructor(data?: IGetAllMarStatusListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.marStatus = data["marStatus"];
            this.marStatusName = data["marStatusName"];
        }
    }

    static fromJS(data: any): GetAllMarStatusListDto {
        let result = new GetAllMarStatusListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["marStatus"] = this.marStatus;
        data["marStatusName"] = this.marStatusName;
        return data; 
    }
}

export interface IGetAllMarStatusListDto {
    marStatus: string;
    marStatusName: string;
}

export class ListResultDtoOfGetAllReligionListDto implements IListResultDtoOfGetAllReligionListDto {
    items: GetAllReligionListDto[];

    constructor(data?: IListResultDtoOfGetAllReligionListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetAllReligionListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetAllReligionListDto {
        let result = new ListResultDtoOfGetAllReligionListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetAllReligionListDto {
    items: GetAllReligionListDto[];
}

export class GetAllReligionListDto implements IGetAllReligionListDto {
    relCode: string;
    relName: string;

    constructor(data?: IGetAllReligionListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.relCode = data["relCode"];
            this.relName = data["relName"];
        }
    }

    static fromJS(data: any): GetAllReligionListDto {
        let result = new GetAllReligionListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["relCode"] = this.relCode;
        data["relName"] = this.relName;
        return data; 
    }
}

export interface IGetAllReligionListDto {
    relCode: string;
    relName: string;
}

export class ListResultDtoOfGetAllSpecListDto implements IListResultDtoOfGetAllSpecListDto {
    items: GetAllSpecListDto[];

    constructor(data?: IListResultDtoOfGetAllSpecListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetAllSpecListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetAllSpecListDto {
        let result = new ListResultDtoOfGetAllSpecListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetAllSpecListDto {
    items: GetAllSpecListDto[];
}

export class GetAllSpecListDto implements IGetAllSpecListDto {
    specCode: string;
    specName: string;

    constructor(data?: IGetAllSpecListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.specCode = data["specCode"];
            this.specName = data["specName"];
        }
    }

    static fromJS(data: any): GetAllSpecListDto {
        let result = new GetAllSpecListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["specCode"] = this.specCode;
        data["specName"] = this.specName;
        return data; 
    }
}

export interface IGetAllSpecListDto {
    specCode: string;
    specName: string;
}

export class GetPSASMainListDto implements IGetPSASMainListDto {
    itemName: string;
    companyName: string;
    area: number;
    netPriceMKT: number;
    netPriceComm: number;
    netNetPrice: number;
    projectName: string;
    productName: string;
    territory: string;
    termCode: string;
    termNo: number;
    name: string;
    address: string;
    npwp: string;
    phone: string;
    psCode: string;
    salesEvent: string;
    transactionCome: string;
    bankName: string;
    ammount: number;
    noRekening: string;
    schema: string;
    memberID: string;
    memberName: string;
    bookDate: moment.Moment;
    status: string;
    cancelDate: moment.Moment;
    remarks: string;
    psasStatus: string;
    reason: string;

    constructor(data?: IGetPSASMainListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.itemName = data["itemName"];
            this.companyName = data["companyName"];
            this.area = data["area"];
            this.netPriceMKT = data["netPriceMKT"];
            this.netPriceComm = data["netPriceComm"];
            this.netNetPrice = data["netNetPrice"];
            this.projectName = data["projectName"];
            this.productName = data["productName"];
            this.territory = data["territory"];
            this.termCode = data["termCode"];
            this.termNo = data["termNo"];
            this.name = data["name"];
            this.address = data["address"];
            this.npwp = data["npwp"];
            this.phone = data["phone"];
            this.psCode = data["psCode"];
            this.salesEvent = data["salesEvent"];
            this.transactionCome = data["transactionCome"];
            this.bankName = data["bankName"];
            this.ammount = data["ammount"];
            this.noRekening = data["noRekening"];
            this.schema = data["schema"];
            this.memberID = data["memberID"];
            this.memberName = data["memberName"];
            this.bookDate = data["bookDate"] ? moment(data["bookDate"].toString()) : <any>undefined;
            this.status = data["status"];
            this.cancelDate = data["cancelDate"] ? moment(data["cancelDate"].toString()) : <any>undefined;
            this.remarks = data["remarks"];
            this.psasStatus = data["psasStatus"];
            this.reason = data["reason"];
        }
    }

    static fromJS(data: any): GetPSASMainListDto {
        let result = new GetPSASMainListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["itemName"] = this.itemName;
        data["companyName"] = this.companyName;
        data["area"] = this.area;
        data["netPriceMKT"] = this.netPriceMKT;
        data["netPriceComm"] = this.netPriceComm;
        data["netNetPrice"] = this.netNetPrice;
        data["projectName"] = this.projectName;
        data["productName"] = this.productName;
        data["territory"] = this.territory;
        data["termCode"] = this.termCode;
        data["termNo"] = this.termNo;
        data["name"] = this.name;
        data["address"] = this.address;
        data["npwp"] = this.npwp;
        data["phone"] = this.phone;
        data["psCode"] = this.psCode;
        data["salesEvent"] = this.salesEvent;
        data["transactionCome"] = this.transactionCome;
        data["bankName"] = this.bankName;
        data["ammount"] = this.ammount;
        data["noRekening"] = this.noRekening;
        data["schema"] = this.schema;
        data["memberID"] = this.memberID;
        data["memberName"] = this.memberName;
        data["bookDate"] = this.bookDate ? this.bookDate.toISOString() : <any>undefined;
        data["status"] = this.status;
        data["cancelDate"] = this.cancelDate ? this.cancelDate.toISOString() : <any>undefined;
        data["remarks"] = this.remarks;
        data["psasStatus"] = this.psasStatus;
        data["reason"] = this.reason;
        return data; 
    }
}

export interface IGetPSASMainListDto {
    itemName: string;
    companyName: string;
    area: number;
    netPriceMKT: number;
    netPriceComm: number;
    netNetPrice: number;
    projectName: string;
    productName: string;
    territory: string;
    termCode: string;
    termNo: number;
    name: string;
    address: string;
    npwp: string;
    phone: string;
    psCode: string;
    salesEvent: string;
    transactionCome: string;
    bankName: string;
    ammount: number;
    noRekening: string;
    schema: string;
    memberID: string;
    memberName: string;
    bookDate: moment.Moment;
    status: string;
    cancelDate: moment.Moment;
    remarks: string;
    psasStatus: string;
    reason: string;
}

export class ExportMarketingFactorListDto implements IExportMarketingFactorListDto {
    schemeName: string;
    unit: DataUnitDto[];

    constructor(data?: IExportMarketingFactorListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.schemeName = data["schemeName"];
            if (data["unit"] && data["unit"].constructor === Array) {
                this.unit = [];
                for (let item of data["unit"])
                    this.unit.push(DataUnitDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ExportMarketingFactorListDto {
        let result = new ExportMarketingFactorListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemeName"] = this.schemeName;
        if (this.unit && this.unit.constructor === Array) {
            data["unit"] = [];
            for (let item of this.unit)
                data["unit"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IExportMarketingFactorListDto {
    schemeName: string;
    unit: DataUnitDto[];
}

export class DataUnitDto implements IDataUnitDto {
    unitCode: string;
    unitNo: string;
    priceM2: string;

    constructor(data?: IDataUnitDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.unitCode = data["unitCode"];
            this.unitNo = data["unitNo"];
            this.priceM2 = data["priceM2"];
        }
    }

    static fromJS(data: any): DataUnitDto {
        let result = new DataUnitDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["unitCode"] = this.unitCode;
        data["unitNo"] = this.unitNo;
        data["priceM2"] = this.priceM2;
        return data; 
    }
}

export interface IDataUnitDto {
    unitCode: string;
    unitNo: string;
    priceM2: string;
}

export class CreateMsAccountInput implements ICreateMsAccountInput {
    id: number;
    entityID: number;
    projectID: number;
    accName: string;
    accCode: string;
    accNo: string;
    companyID: number;
    bankBranchID: number;
    bankID: number;
    projectName: string;
    isActive: boolean;

    constructor(data?: ICreateMsAccountInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.entityID = data["entityID"];
            this.projectID = data["projectID"];
            this.accName = data["accName"];
            this.accCode = data["accCode"];
            this.accNo = data["accNo"];
            this.companyID = data["companyID"];
            this.bankBranchID = data["bankBranchID"];
            this.bankID = data["bankID"];
            this.projectName = data["projectName"];
            this.isActive = data["isActive"];
        }
    }

    static fromJS(data: any): CreateMsAccountInput {
        let result = new CreateMsAccountInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["entityID"] = this.entityID;
        data["projectID"] = this.projectID;
        data["accName"] = this.accName;
        data["accCode"] = this.accCode;
        data["accNo"] = this.accNo;
        data["companyID"] = this.companyID;
        data["bankBranchID"] = this.bankBranchID;
        data["bankID"] = this.bankID;
        data["projectName"] = this.projectName;
        data["isActive"] = this.isActive;
        return data; 
    }
}

export interface ICreateMsAccountInput {
    id: number;
    entityID: number;
    projectID: number;
    accName: string;
    accCode: string;
    accNo: string;
    companyID: number;
    bankBranchID: number;
    bankID: number;
    projectName: string;
    isActive: boolean;
}

export class ListResultDtoOfGetAllAccountListDto implements IListResultDtoOfGetAllAccountListDto {
    items: GetAllAccountListDto[];

    constructor(data?: IListResultDtoOfGetAllAccountListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetAllAccountListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetAllAccountListDto {
        let result = new ListResultDtoOfGetAllAccountListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetAllAccountListDto {
    items: GetAllAccountListDto[];
}

export class GetAllAccountListDto implements IGetAllAccountListDto {
    accountID: number;
    projectName: string;
    projectID: number;
    accName: string;
    accNo: string;
    companyID: number;
    companyName: string;
    bankBranchID: number;
    bankBranchName: string;
    bankID: number;
    bankName: string;
    isActive: boolean;
    accCode: string;

    constructor(data?: IGetAllAccountListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.accountID = data["accountID"];
            this.projectName = data["projectName"];
            this.projectID = data["projectID"];
            this.accName = data["accName"];
            this.accNo = data["accNo"];
            this.companyID = data["companyID"];
            this.companyName = data["companyName"];
            this.bankBranchID = data["bankBranchID"];
            this.bankBranchName = data["bankBranchName"];
            this.bankID = data["bankID"];
            this.bankName = data["bankName"];
            this.isActive = data["isActive"];
            this.accCode = data["accCode"];
        }
    }

    static fromJS(data: any): GetAllAccountListDto {
        let result = new GetAllAccountListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accountID"] = this.accountID;
        data["projectName"] = this.projectName;
        data["projectID"] = this.projectID;
        data["accName"] = this.accName;
        data["accNo"] = this.accNo;
        data["companyID"] = this.companyID;
        data["companyName"] = this.companyName;
        data["bankBranchID"] = this.bankBranchID;
        data["bankBranchName"] = this.bankBranchName;
        data["bankID"] = this.bankID;
        data["bankName"] = this.bankName;
        data["isActive"] = this.isActive;
        data["accCode"] = this.accCode;
        return data; 
    }
}

export interface IGetAllAccountListDto {
    accountID: number;
    projectName: string;
    projectID: number;
    accName: string;
    accNo: string;
    companyID: number;
    companyName: string;
    bankBranchID: number;
    bankBranchName: string;
    bankID: number;
    bankName: string;
    isActive: boolean;
    accCode: string;
}

export class CreateMsAreaInput implements ICreateMsAreaInput {
    entityCode: string;
    areaCode: string;
    cityID: number;
    regionName: string;

    constructor(data?: ICreateMsAreaInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.entityCode = data["entityCode"];
            this.areaCode = data["areaCode"];
            this.cityID = data["cityID"];
            this.regionName = data["regionName"];
        }
    }

    static fromJS(data: any): CreateMsAreaInput {
        let result = new CreateMsAreaInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["entityCode"] = this.entityCode;
        data["areaCode"] = this.areaCode;
        data["cityID"] = this.cityID;
        data["regionName"] = this.regionName;
        return data; 
    }
}

export interface ICreateMsAreaInput {
    entityCode: string;
    areaCode: string;
    cityID: number;
    regionName: string;
}

export class ListResultDtoOfGetMsAreaListDto implements IListResultDtoOfGetMsAreaListDto {
    items: GetMsAreaListDto[];

    constructor(data?: IListResultDtoOfGetMsAreaListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetMsAreaListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetMsAreaListDto {
        let result = new ListResultDtoOfGetMsAreaListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetMsAreaListDto {
    items: GetMsAreaListDto[];
}

export class GetMsAreaListDto implements IGetMsAreaListDto {
    id: number;
    areaCode: string;
    territoryID: number;
    territoryName: string;
    countyID: number;
    countyName: string;
    cityID: number;
    cityName: string;
    regionName: string;

    constructor(data?: IGetMsAreaListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.areaCode = data["areaCode"];
            this.territoryID = data["territoryID"];
            this.territoryName = data["territoryName"];
            this.countyID = data["countyID"];
            this.countyName = data["countyName"];
            this.cityID = data["cityID"];
            this.cityName = data["cityName"];
            this.regionName = data["regionName"];
        }
    }

    static fromJS(data: any): GetMsAreaListDto {
        let result = new GetMsAreaListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["areaCode"] = this.areaCode;
        data["territoryID"] = this.territoryID;
        data["territoryName"] = this.territoryName;
        data["countyID"] = this.countyID;
        data["countyName"] = this.countyName;
        data["cityID"] = this.cityID;
        data["cityName"] = this.cityName;
        data["regionName"] = this.regionName;
        return data; 
    }
}

export interface IGetMsAreaListDto {
    id: number;
    areaCode: string;
    territoryID: number;
    territoryName: string;
    countyID: number;
    countyName: string;
    cityID: number;
    cityName: string;
    regionName: string;
}

export class UpdateMsAreaInput implements IUpdateMsAreaInput {
    id: number;
    areaCode: string;
    cityID: number;
    regionName: string;

    constructor(data?: IUpdateMsAreaInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.areaCode = data["areaCode"];
            this.cityID = data["cityID"];
            this.regionName = data["regionName"];
        }
    }

    static fromJS(data: any): UpdateMsAreaInput {
        let result = new UpdateMsAreaInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["areaCode"] = this.areaCode;
        data["cityID"] = this.cityID;
        data["regionName"] = this.regionName;
        return data; 
    }
}

export interface IUpdateMsAreaInput {
    id: number;
    areaCode: string;
    cityID: number;
    regionName: string;
}

export class CreateMsBankInput implements ICreateMsBankInput {
    entityID: number;
    bankName: string;
    bankCode: string;
    bankLevelCode: string;
    parentBankCode: string;
    divertToRO: boolean;
    address: string;
    phone: string;
    fax: string;
    headName: string;
    deputyName1: string;
    deputyName2: string;
    att: string;
    groupBankCode: string;
    relationOfficerEmail: string;
    isActive: boolean;
    bankTypeID: number;
    swiftCode: string;

    constructor(data?: ICreateMsBankInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.entityID = data["entityID"];
            this.bankName = data["bankName"];
            this.bankCode = data["bankCode"];
            this.bankLevelCode = data["bankLevelCode"];
            this.parentBankCode = data["parentBankCode"];
            this.divertToRO = data["divertToRO"];
            this.address = data["address"];
            this.phone = data["phone"];
            this.fax = data["fax"];
            this.headName = data["headName"];
            this.deputyName1 = data["deputyName1"];
            this.deputyName2 = data["deputyName2"];
            this.att = data["att"];
            this.groupBankCode = data["groupBankCode"];
            this.relationOfficerEmail = data["relationOfficerEmail"];
            this.isActive = data["isActive"];
            this.bankTypeID = data["bankTypeID"];
            this.swiftCode = data["swiftCode"];
        }
    }

    static fromJS(data: any): CreateMsBankInput {
        let result = new CreateMsBankInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["entityID"] = this.entityID;
        data["bankName"] = this.bankName;
        data["bankCode"] = this.bankCode;
        data["bankLevelCode"] = this.bankLevelCode;
        data["parentBankCode"] = this.parentBankCode;
        data["divertToRO"] = this.divertToRO;
        data["address"] = this.address;
        data["phone"] = this.phone;
        data["fax"] = this.fax;
        data["headName"] = this.headName;
        data["deputyName1"] = this.deputyName1;
        data["deputyName2"] = this.deputyName2;
        data["att"] = this.att;
        data["groupBankCode"] = this.groupBankCode;
        data["relationOfficerEmail"] = this.relationOfficerEmail;
        data["isActive"] = this.isActive;
        data["bankTypeID"] = this.bankTypeID;
        data["swiftCode"] = this.swiftCode;
        return data; 
    }
}

export interface ICreateMsBankInput {
    entityID: number;
    bankName: string;
    bankCode: string;
    bankLevelCode: string;
    parentBankCode: string;
    divertToRO: boolean;
    address: string;
    phone: string;
    fax: string;
    headName: string;
    deputyName1: string;
    deputyName2: string;
    att: string;
    groupBankCode: string;
    relationOfficerEmail: string;
    isActive: boolean;
    bankTypeID: number;
    swiftCode: string;
}

export class ListResultDtoOfGetAllBankListDto implements IListResultDtoOfGetAllBankListDto {
    items: GetAllBankListDto[];

    constructor(data?: IListResultDtoOfGetAllBankListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetAllBankListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetAllBankListDto {
        let result = new ListResultDtoOfGetAllBankListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetAllBankListDto {
    items: GetAllBankListDto[];
}

export class GetAllBankListDto implements IGetAllBankListDto {
    bankID: number;
    bankName: string;
    bankCode: string;
    bankTypeID: number;
    bankTypeName: string;
    swiftCode: string;
    isActive: boolean;

    constructor(data?: IGetAllBankListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.bankID = data["bankID"];
            this.bankName = data["bankName"];
            this.bankCode = data["bankCode"];
            this.bankTypeID = data["bankTypeID"];
            this.bankTypeName = data["bankTypeName"];
            this.swiftCode = data["swiftCode"];
            this.isActive = data["isActive"];
        }
    }

    static fromJS(data: any): GetAllBankListDto {
        let result = new GetAllBankListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bankID"] = this.bankID;
        data["bankName"] = this.bankName;
        data["bankCode"] = this.bankCode;
        data["bankTypeID"] = this.bankTypeID;
        data["bankTypeName"] = this.bankTypeName;
        data["swiftCode"] = this.swiftCode;
        data["isActive"] = this.isActive;
        return data; 
    }
}

export interface IGetAllBankListDto {
    bankID: number;
    bankName: string;
    bankCode: string;
    bankTypeID: number;
    bankTypeName: string;
    swiftCode: string;
    isActive: boolean;
}

export class ListResultDtoOfGetBankDropDownListDto implements IListResultDtoOfGetBankDropDownListDto {
    items: GetBankDropDownListDto[];

    constructor(data?: IListResultDtoOfGetBankDropDownListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetBankDropDownListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetBankDropDownListDto {
        let result = new ListResultDtoOfGetBankDropDownListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetBankDropDownListDto {
    items: GetBankDropDownListDto[];
}

export class GetBankDropDownListDto implements IGetBankDropDownListDto {
    bankID: number;
    bankName: string;

    constructor(data?: IGetBankDropDownListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.bankID = data["bankID"];
            this.bankName = data["bankName"];
        }
    }

    static fromJS(data: any): GetBankDropDownListDto {
        let result = new GetBankDropDownListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bankID"] = this.bankID;
        data["bankName"] = this.bankName;
        return data; 
    }
}

export interface IGetBankDropDownListDto {
    bankID: number;
    bankName: string;
}

export class ListResultDtoOfGetTypeBankDropDownListDto implements IListResultDtoOfGetTypeBankDropDownListDto {
    items: GetTypeBankDropDownListDto[];

    constructor(data?: IListResultDtoOfGetTypeBankDropDownListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetTypeBankDropDownListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetTypeBankDropDownListDto {
        let result = new ListResultDtoOfGetTypeBankDropDownListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetTypeBankDropDownListDto {
    items: GetTypeBankDropDownListDto[];
}

export class GetTypeBankDropDownListDto implements IGetTypeBankDropDownListDto {
    bankTypeID: number;
    typeName: string;

    constructor(data?: IGetTypeBankDropDownListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.bankTypeID = data["bankTypeID"];
            this.typeName = data["typeName"];
        }
    }

    static fromJS(data: any): GetTypeBankDropDownListDto {
        let result = new GetTypeBankDropDownListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bankTypeID"] = this.bankTypeID;
        data["typeName"] = this.typeName;
        return data; 
    }
}

export interface IGetTypeBankDropDownListDto {
    bankTypeID: number;
    typeName: string;
}

export class CreateMsBankBranchInputDto implements ICreateMsBankBranchInputDto {
    bankBranchCode: string;
    bankBranchName: string;
    picName: string;
    picPosition: string;
    phone: string;
    email: string;
    isActive: boolean;
    bankID: number;
    bankBranchTypeID: number;

    constructor(data?: ICreateMsBankBranchInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.bankBranchCode = data["bankBranchCode"];
            this.bankBranchName = data["bankBranchName"];
            this.picName = data["picName"];
            this.picPosition = data["picPosition"];
            this.phone = data["phone"];
            this.email = data["email"];
            this.isActive = data["isActive"];
            this.bankID = data["bankID"];
            this.bankBranchTypeID = data["bankBranchTypeID"];
        }
    }

    static fromJS(data: any): CreateMsBankBranchInputDto {
        let result = new CreateMsBankBranchInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bankBranchCode"] = this.bankBranchCode;
        data["bankBranchName"] = this.bankBranchName;
        data["picName"] = this.picName;
        data["picPosition"] = this.picPosition;
        data["phone"] = this.phone;
        data["email"] = this.email;
        data["isActive"] = this.isActive;
        data["bankID"] = this.bankID;
        data["bankBranchTypeID"] = this.bankBranchTypeID;
        return data; 
    }
}

export interface ICreateMsBankBranchInputDto {
    bankBranchCode: string;
    bankBranchName: string;
    picName: string;
    picPosition: string;
    phone: string;
    email: string;
    isActive: boolean;
    bankID: number;
    bankBranchTypeID: number;
}

export class ListResultDtoOfGetBankBranchTypeListDto implements IListResultDtoOfGetBankBranchTypeListDto {
    items: GetBankBranchTypeListDto[];

    constructor(data?: IListResultDtoOfGetBankBranchTypeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetBankBranchTypeListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetBankBranchTypeListDto {
        let result = new ListResultDtoOfGetBankBranchTypeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetBankBranchTypeListDto {
    items: GetBankBranchTypeListDto[];
}

export class GetBankBranchTypeListDto implements IGetBankBranchTypeListDto {
    bankBranchTypeID: number;
    typeName: string;

    constructor(data?: IGetBankBranchTypeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.bankBranchTypeID = data["bankBranchTypeID"];
            this.typeName = data["typeName"];
        }
    }

    static fromJS(data: any): GetBankBranchTypeListDto {
        let result = new GetBankBranchTypeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bankBranchTypeID"] = this.bankBranchTypeID;
        data["typeName"] = this.typeName;
        return data; 
    }
}

export interface IGetBankBranchTypeListDto {
    bankBranchTypeID: number;
    typeName: string;
}

export class ListResultDtoOfGetBankBranchListDto implements IListResultDtoOfGetBankBranchListDto {
    items: GetBankBranchListDto[];

    constructor(data?: IListResultDtoOfGetBankBranchListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetBankBranchListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetBankBranchListDto {
        let result = new ListResultDtoOfGetBankBranchListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetBankBranchListDto {
    items: GetBankBranchListDto[];
}

export class GetBankBranchListDto implements IGetBankBranchListDto {
    id: number;
    entityID: number;
    bankBranchCode: string;
    bankBranchName: string;
    bankBranchType: string;
    bankBranchTypeID: number;
    picName: string;
    picPosition: string;
    phone: string;
    email: string;
    isActive: boolean;
    bankID: number;
    bankName: string;
    jenisKantorBank: string;

    constructor(data?: IGetBankBranchListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.entityID = data["entityID"];
            this.bankBranchCode = data["bankBranchCode"];
            this.bankBranchName = data["bankBranchName"];
            this.bankBranchType = data["bankBranchType"];
            this.bankBranchTypeID = data["bankBranchTypeID"];
            this.picName = data["picName"];
            this.picPosition = data["picPosition"];
            this.phone = data["phone"];
            this.email = data["email"];
            this.isActive = data["isActive"];
            this.bankID = data["bankID"];
            this.bankName = data["bankName"];
            this.jenisKantorBank = data["jenisKantorBank"];
        }
    }

    static fromJS(data: any): GetBankBranchListDto {
        let result = new GetBankBranchListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["entityID"] = this.entityID;
        data["bankBranchCode"] = this.bankBranchCode;
        data["bankBranchName"] = this.bankBranchName;
        data["bankBranchType"] = this.bankBranchType;
        data["bankBranchTypeID"] = this.bankBranchTypeID;
        data["picName"] = this.picName;
        data["picPosition"] = this.picPosition;
        data["phone"] = this.phone;
        data["email"] = this.email;
        data["isActive"] = this.isActive;
        data["bankID"] = this.bankID;
        data["bankName"] = this.bankName;
        data["jenisKantorBank"] = this.jenisKantorBank;
        return data; 
    }
}

export interface IGetBankBranchListDto {
    id: number;
    entityID: number;
    bankBranchCode: string;
    bankBranchName: string;
    bankBranchType: string;
    bankBranchTypeID: number;
    picName: string;
    picPosition: string;
    phone: string;
    email: string;
    isActive: boolean;
    bankID: number;
    bankName: string;
    jenisKantorBank: string;
}

export class UpdateMsBankBranchInputDto implements IUpdateMsBankBranchInputDto {
    id: number;
    bankBranchCode: string;
    bankBranchName: string;
    picName: string;
    picPosition: string;
    phone: string;
    email: string;
    isActive: boolean;
    bankID: number;
    bankBranchTypeID: number;

    constructor(data?: IUpdateMsBankBranchInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.bankBranchCode = data["bankBranchCode"];
            this.bankBranchName = data["bankBranchName"];
            this.picName = data["picName"];
            this.picPosition = data["picPosition"];
            this.phone = data["phone"];
            this.email = data["email"];
            this.isActive = data["isActive"];
            this.bankID = data["bankID"];
            this.bankBranchTypeID = data["bankBranchTypeID"];
        }
    }

    static fromJS(data: any): UpdateMsBankBranchInputDto {
        let result = new UpdateMsBankBranchInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["bankBranchCode"] = this.bankBranchCode;
        data["bankBranchName"] = this.bankBranchName;
        data["picName"] = this.picName;
        data["picPosition"] = this.picPosition;
        data["phone"] = this.phone;
        data["email"] = this.email;
        data["isActive"] = this.isActive;
        data["bankID"] = this.bankID;
        data["bankBranchTypeID"] = this.bankBranchTypeID;
        return data; 
    }
}

export interface IUpdateMsBankBranchInputDto {
    id: number;
    bankBranchCode: string;
    bankBranchName: string;
    picName: string;
    picPosition: string;
    phone: string;
    email: string;
    isActive: boolean;
    bankID: number;
    bankBranchTypeID: number;
}

export class ListResultDtoOfGetAllBankPersonalsListDto implements IListResultDtoOfGetAllBankPersonalsListDto {
    items: GetAllBankPersonalsListDto[];

    constructor(data?: IListResultDtoOfGetAllBankPersonalsListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetAllBankPersonalsListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetAllBankPersonalsListDto {
        let result = new ListResultDtoOfGetAllBankPersonalsListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetAllBankPersonalsListDto {
    items: GetAllBankPersonalsListDto[];
}

export class GetAllBankPersonalsListDto implements IGetAllBankPersonalsListDto {
    bankCode: string;
    bankName: string;

    constructor(data?: IGetAllBankPersonalsListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.bankCode = data["bankCode"];
            this.bankName = data["bankName"];
        }
    }

    static fromJS(data: any): GetAllBankPersonalsListDto {
        let result = new GetAllBankPersonalsListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bankCode"] = this.bankCode;
        data["bankName"] = this.bankName;
        return data; 
    }
}

export interface IGetAllBankPersonalsListDto {
    bankCode: string;
    bankName: string;
}

export class MsBobotCommListDto implements IMsBobotCommListDto {
    id: number;
    entityCode: string;
    scmCode: string;
    projectCode: string;
    clusterCode: string;
    clusterID: number;
    projectID: number;
    schemaID: number;
    entityID: number;
    pctBobot: number;
    isActive: boolean;
    isComplete: boolean;
    clusterName: string;
    projectName: string;

    constructor(data?: IMsBobotCommListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.entityCode = data["entityCode"];
            this.scmCode = data["scmCode"];
            this.projectCode = data["projectCode"];
            this.clusterCode = data["clusterCode"];
            this.clusterID = data["clusterID"];
            this.projectID = data["projectID"];
            this.schemaID = data["schemaID"];
            this.entityID = data["entityID"];
            this.pctBobot = data["pctBobot"];
            this.isActive = data["isActive"];
            this.isComplete = data["isComplete"];
            this.clusterName = data["clusterName"];
            this.projectName = data["projectName"];
        }
    }

    static fromJS(data: any): MsBobotCommListDto {
        let result = new MsBobotCommListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["entityCode"] = this.entityCode;
        data["scmCode"] = this.scmCode;
        data["projectCode"] = this.projectCode;
        data["clusterCode"] = this.clusterCode;
        data["clusterID"] = this.clusterID;
        data["projectID"] = this.projectID;
        data["schemaID"] = this.schemaID;
        data["entityID"] = this.entityID;
        data["pctBobot"] = this.pctBobot;
        data["isActive"] = this.isActive;
        data["isComplete"] = this.isComplete;
        data["clusterName"] = this.clusterName;
        data["projectName"] = this.projectName;
        return data; 
    }
}

export interface IMsBobotCommListDto {
    id: number;
    entityCode: string;
    scmCode: string;
    projectCode: string;
    clusterCode: string;
    clusterID: number;
    projectID: number;
    schemaID: number;
    entityID: number;
    pctBobot: number;
    isActive: boolean;
    isComplete: boolean;
    clusterName: string;
    projectName: string;
}

export class ListResultDtoOfMsBobotCommListDto implements IListResultDtoOfMsBobotCommListDto {
    items: MsBobotCommListDto[];

    constructor(data?: IListResultDtoOfMsBobotCommListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(MsBobotCommListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfMsBobotCommListDto {
        let result = new ListResultDtoOfMsBobotCommListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfMsBobotCommListDto {
    items: MsBobotCommListDto[];
}

export class ListResultDtoOfGetAllCategoryListDto implements IListResultDtoOfGetAllCategoryListDto {
    items: GetAllCategoryListDto[];

    constructor(data?: IListResultDtoOfGetAllCategoryListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetAllCategoryListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetAllCategoryListDto {
        let result = new ListResultDtoOfGetAllCategoryListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetAllCategoryListDto {
    items: GetAllCategoryListDto[];
}

export class GetAllCategoryListDto implements IGetAllCategoryListDto {
    categoryID: number;
    categoryName: string;
    categoryCode: string;
    isActive: boolean;

    constructor(data?: IGetAllCategoryListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.categoryID = data["categoryID"];
            this.categoryName = data["categoryName"];
            this.categoryCode = data["categoryCode"];
            this.isActive = data["isActive"];
        }
    }

    static fromJS(data: any): GetAllCategoryListDto {
        let result = new GetAllCategoryListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["categoryID"] = this.categoryID;
        data["categoryName"] = this.categoryName;
        data["categoryCode"] = this.categoryCode;
        data["isActive"] = this.isActive;
        return data; 
    }
}

export interface IGetAllCategoryListDto {
    categoryID: number;
    categoryName: string;
    categoryCode: string;
    isActive: boolean;
}

export class CreateCategoryInputDto implements ICreateCategoryInputDto {
    categoryName: string;
    categoryCode: string;
    isActive: boolean;

    constructor(data?: ICreateCategoryInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.categoryName = data["categoryName"];
            this.categoryCode = data["categoryCode"];
            this.isActive = data["isActive"];
        }
    }

    static fromJS(data: any): CreateCategoryInputDto {
        let result = new CreateCategoryInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["categoryName"] = this.categoryName;
        data["categoryCode"] = this.categoryCode;
        data["isActive"] = this.isActive;
        return data; 
    }
}

export interface ICreateCategoryInputDto {
    categoryName: string;
    categoryCode: string;
    isActive: boolean;
}

export class ListResultDtoOfGetCategoryDropdownListDto implements IListResultDtoOfGetCategoryDropdownListDto {
    items: GetCategoryDropdownListDto[];

    constructor(data?: IListResultDtoOfGetCategoryDropdownListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetCategoryDropdownListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetCategoryDropdownListDto {
        let result = new ListResultDtoOfGetCategoryDropdownListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetCategoryDropdownListDto {
    items: GetCategoryDropdownListDto[];
}

export class GetCategoryDropdownListDto implements IGetCategoryDropdownListDto {
    categoryID: number;
    categoryName: string;

    constructor(data?: IGetCategoryDropdownListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.categoryID = data["categoryID"];
            this.categoryName = data["categoryName"];
        }
    }

    static fromJS(data: any): GetCategoryDropdownListDto {
        let result = new GetCategoryDropdownListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["categoryID"] = this.categoryID;
        data["categoryName"] = this.categoryName;
        return data; 
    }
}

export interface IGetCategoryDropdownListDto {
    categoryID: number;
    categoryName: string;
}

export class GetCreateMsCityInputDto implements IGetCreateMsCityInputDto {
    cityName: string;
    countyID: number;

    constructor(data?: IGetCreateMsCityInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.cityName = data["cityName"];
            this.countyID = data["countyID"];
        }
    }

    static fromJS(data: any): GetCreateMsCityInputDto {
        let result = new GetCreateMsCityInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cityName"] = this.cityName;
        data["countyID"] = this.countyID;
        return data; 
    }
}

export interface IGetCreateMsCityInputDto {
    cityName: string;
    countyID: number;
}

export class ListResultDtoOfGetMsCityListDto implements IListResultDtoOfGetMsCityListDto {
    items: GetMsCityListDto[];

    constructor(data?: IListResultDtoOfGetMsCityListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetMsCityListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetMsCityListDto {
        let result = new ListResultDtoOfGetMsCityListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetMsCityListDto {
    items: GetMsCityListDto[];
}

export class GetMsCityListDto implements IGetMsCityListDto {
    cityID: number;
    cityName: string;
    countyID: number;

    constructor(data?: IGetMsCityListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.cityID = data["cityID"];
            this.cityName = data["cityName"];
            this.countyID = data["countyID"];
        }
    }

    static fromJS(data: any): GetMsCityListDto {
        let result = new GetMsCityListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cityID"] = this.cityID;
        data["cityName"] = this.cityName;
        data["countyID"] = this.countyID;
        return data; 
    }
}

export interface IGetMsCityListDto {
    cityID: number;
    cityName: string;
    countyID: number;
}

export class ListResultDtoOfGetClusterDropdownListDto implements IListResultDtoOfGetClusterDropdownListDto {
    items: GetClusterDropdownListDto[];

    constructor(data?: IListResultDtoOfGetClusterDropdownListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetClusterDropdownListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetClusterDropdownListDto {
        let result = new ListResultDtoOfGetClusterDropdownListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetClusterDropdownListDto {
    items: GetClusterDropdownListDto[];
}

export class GetClusterDropdownListDto implements IGetClusterDropdownListDto {
    clusterID: number;
    clusterCode: string;
    clusterName: string;

    constructor(data?: IGetClusterDropdownListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.clusterID = data["clusterID"];
            this.clusterCode = data["clusterCode"];
            this.clusterName = data["clusterName"];
        }
    }

    static fromJS(data: any): GetClusterDropdownListDto {
        let result = new GetClusterDropdownListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["clusterID"] = this.clusterID;
        data["clusterCode"] = this.clusterCode;
        data["clusterName"] = this.clusterName;
        return data; 
    }
}

export interface IGetClusterDropdownListDto {
    clusterID: number;
    clusterCode: string;
    clusterName: string;
}

export class CreateMsCompanyInput implements ICreateMsCompanyInput {
    coCode: string;
    coName: string;
    address: string;
    email: string;
    phoneNo: string;
    faxNo: string;
    npwp: string;
    npwpAddress: string;
    kppName: string;
    kppTTD: string;
    pkp: string;
    pkpDate: moment.Moment;
    image: string;
    isActive: boolean;
    postCodeID: number;
    fileName: string;

    constructor(data?: ICreateMsCompanyInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.coCode = data["coCode"];
            this.coName = data["coName"];
            this.address = data["address"];
            this.email = data["email"];
            this.phoneNo = data["phoneNo"];
            this.faxNo = data["faxNo"];
            this.npwp = data["npwp"];
            this.npwpAddress = data["npwpAddress"];
            this.kppName = data["kppName"];
            this.kppTTD = data["kppTTD"];
            this.pkp = data["pkp"];
            this.pkpDate = data["pkpDate"] ? moment(data["pkpDate"].toString()) : <any>undefined;
            this.image = data["image"];
            this.isActive = data["isActive"];
            this.postCodeID = data["postCodeID"];
            this.fileName = data["fileName"];
        }
    }

    static fromJS(data: any): CreateMsCompanyInput {
        let result = new CreateMsCompanyInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["coCode"] = this.coCode;
        data["coName"] = this.coName;
        data["address"] = this.address;
        data["email"] = this.email;
        data["phoneNo"] = this.phoneNo;
        data["faxNo"] = this.faxNo;
        data["npwp"] = this.npwp;
        data["npwpAddress"] = this.npwpAddress;
        data["kppName"] = this.kppName;
        data["kppTTD"] = this.kppTTD;
        data["pkp"] = this.pkp;
        data["pkpDate"] = this.pkpDate ? this.pkpDate.toISOString() : <any>undefined;
        data["image"] = this.image;
        data["isActive"] = this.isActive;
        data["postCodeID"] = this.postCodeID;
        data["fileName"] = this.fileName;
        return data; 
    }
}

export interface ICreateMsCompanyInput {
    coCode: string;
    coName: string;
    address: string;
    email: string;
    phoneNo: string;
    faxNo: string;
    npwp: string;
    npwpAddress: string;
    kppName: string;
    kppTTD: string;
    pkp: string;
    pkpDate: moment.Moment;
    image: string;
    isActive: boolean;
    postCodeID: number;
    fileName: string;
}

export class GetDetailMsCompanyListDto implements IGetDetailMsCompanyListDto {
    companyInformationDto: CompanyInformationDto;
    documentInformationDto: DocumentInformationDto;
    bankInformationDto: BankInformationDto[];

    constructor(data?: IGetDetailMsCompanyListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.companyInformationDto = data["companyInformationDto"] ? CompanyInformationDto.fromJS(data["companyInformationDto"]) : <any>undefined;
            this.documentInformationDto = data["documentInformationDto"] ? DocumentInformationDto.fromJS(data["documentInformationDto"]) : <any>undefined;
            if (data["bankInformationDto"] && data["bankInformationDto"].constructor === Array) {
                this.bankInformationDto = [];
                for (let item of data["bankInformationDto"])
                    this.bankInformationDto.push(BankInformationDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetDetailMsCompanyListDto {
        let result = new GetDetailMsCompanyListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["companyInformationDto"] = this.companyInformationDto ? this.companyInformationDto.toJSON() : <any>undefined;
        data["documentInformationDto"] = this.documentInformationDto ? this.documentInformationDto.toJSON() : <any>undefined;
        if (this.bankInformationDto && this.bankInformationDto.constructor === Array) {
            data["bankInformationDto"] = [];
            for (let item of this.bankInformationDto)
                data["bankInformationDto"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetDetailMsCompanyListDto {
    companyInformationDto: CompanyInformationDto;
    documentInformationDto: DocumentInformationDto;
    bankInformationDto: BankInformationDto[];
}

export class CompanyInformationDto implements ICompanyInformationDto {
    coCode: string;
    coName: string;
    address: string;
    email: string;
    phoneNo: string;
    faxNo: string;
    isActive: boolean;
    image: string;
    countryID: number;
    townID: number;
    postCodeID: number;
    countryName: string;
    townName: string;
    postCode: string;

    constructor(data?: ICompanyInformationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.coCode = data["coCode"];
            this.coName = data["coName"];
            this.address = data["address"];
            this.email = data["email"];
            this.phoneNo = data["phoneNo"];
            this.faxNo = data["faxNo"];
            this.isActive = data["isActive"];
            this.image = data["image"];
            this.countryID = data["countryID"];
            this.townID = data["townID"];
            this.postCodeID = data["postCodeID"];
            this.countryName = data["countryName"];
            this.townName = data["townName"];
            this.postCode = data["postCode"];
        }
    }

    static fromJS(data: any): CompanyInformationDto {
        let result = new CompanyInformationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["coCode"] = this.coCode;
        data["coName"] = this.coName;
        data["address"] = this.address;
        data["email"] = this.email;
        data["phoneNo"] = this.phoneNo;
        data["faxNo"] = this.faxNo;
        data["isActive"] = this.isActive;
        data["image"] = this.image;
        data["countryID"] = this.countryID;
        data["townID"] = this.townID;
        data["postCodeID"] = this.postCodeID;
        data["countryName"] = this.countryName;
        data["townName"] = this.townName;
        data["postCode"] = this.postCode;
        return data; 
    }
}

export interface ICompanyInformationDto {
    coCode: string;
    coName: string;
    address: string;
    email: string;
    phoneNo: string;
    faxNo: string;
    isActive: boolean;
    image: string;
    countryID: number;
    townID: number;
    postCodeID: number;
    countryName: string;
    townName: string;
    postCode: string;
}

export class DocumentInformationDto implements IDocumentInformationDto {
    npwp: string;
    npwpAddress: string;
    kppName: string;
    kppTTD: string;
    pkp: string;
    pkpDate: moment.Moment;

    constructor(data?: IDocumentInformationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.npwp = data["npwp"];
            this.npwpAddress = data["npwpAddress"];
            this.kppName = data["kppName"];
            this.kppTTD = data["kppTTD"];
            this.pkp = data["pkp"];
            this.pkpDate = data["pkpDate"] ? moment(data["pkpDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): DocumentInformationDto {
        let result = new DocumentInformationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["npwp"] = this.npwp;
        data["npwpAddress"] = this.npwpAddress;
        data["kppName"] = this.kppName;
        data["kppTTD"] = this.kppTTD;
        data["pkp"] = this.pkp;
        data["pkpDate"] = this.pkpDate ? this.pkpDate.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IDocumentInformationDto {
    npwp: string;
    npwpAddress: string;
    kppName: string;
    kppTTD: string;
    pkp: string;
    pkpDate: moment.Moment;
}

export class BankInformationDto implements IBankInformationDto {
    bankName: string;
    branchName: string;
    accName: string;
    accNo: string;

    constructor(data?: IBankInformationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.bankName = data["bankName"];
            this.branchName = data["branchName"];
            this.accName = data["accName"];
            this.accNo = data["accNo"];
        }
    }

    static fromJS(data: any): BankInformationDto {
        let result = new BankInformationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bankName"] = this.bankName;
        data["branchName"] = this.branchName;
        data["accName"] = this.accName;
        data["accNo"] = this.accNo;
        return data; 
    }
}

export interface IBankInformationDto {
    bankName: string;
    branchName: string;
    accName: string;
    accNo: string;
}

export class ListResultDtoOfGetMsCompanyListDto implements IListResultDtoOfGetMsCompanyListDto {
    items: GetMsCompanyListDto[];

    constructor(data?: IListResultDtoOfGetMsCompanyListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetMsCompanyListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetMsCompanyListDto {
        let result = new ListResultDtoOfGetMsCompanyListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetMsCompanyListDto {
    items: GetMsCompanyListDto[];
}

export class GetMsCompanyListDto implements IGetMsCompanyListDto {
    id: number;
    coName: string;
    address: string;
    email: string;
    phoneNo: string;
    isActive: boolean;

    constructor(data?: IGetMsCompanyListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.coName = data["coName"];
            this.address = data["address"];
            this.email = data["email"];
            this.phoneNo = data["phoneNo"];
            this.isActive = data["isActive"];
        }
    }

    static fromJS(data: any): GetMsCompanyListDto {
        let result = new GetMsCompanyListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["coName"] = this.coName;
        data["address"] = this.address;
        data["email"] = this.email;
        data["phoneNo"] = this.phoneNo;
        data["isActive"] = this.isActive;
        return data; 
    }
}

export interface IGetMsCompanyListDto {
    id: number;
    coName: string;
    address: string;
    email: string;
    phoneNo: string;
    isActive: boolean;
}

export class ListResultDtoOfGetCountryListDto implements IListResultDtoOfGetCountryListDto {
    items: GetCountryListDto[];

    constructor(data?: IListResultDtoOfGetCountryListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetCountryListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetCountryListDto {
        let result = new ListResultDtoOfGetCountryListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetCountryListDto {
    items: GetCountryListDto[];
}

export class GetCountryListDto implements IGetCountryListDto {
    id: number;
    countryName: string;
    countryCode: string;

    constructor(data?: IGetCountryListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.countryName = data["countryName"];
            this.countryCode = data["countryCode"];
        }
    }

    static fromJS(data: any): GetCountryListDto {
        let result = new GetCountryListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["countryName"] = this.countryName;
        data["countryCode"] = this.countryCode;
        return data; 
    }
}

export interface IGetCountryListDto {
    id: number;
    countryName: string;
    countryCode: string;
}

export class ListResultDtoOfGetTownListDto implements IListResultDtoOfGetTownListDto {
    items: GetTownListDto[];

    constructor(data?: IListResultDtoOfGetTownListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetTownListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetTownListDto {
        let result = new ListResultDtoOfGetTownListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetTownListDto {
    items: GetTownListDto[];
}

export class GetTownListDto implements IGetTownListDto {
    id: number;
    countryID: number;
    townName: string;
    townCode: string;

    constructor(data?: IGetTownListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.countryID = data["countryID"];
            this.townName = data["townName"];
            this.townCode = data["townCode"];
        }
    }

    static fromJS(data: any): GetTownListDto {
        let result = new GetTownListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["countryID"] = this.countryID;
        data["townName"] = this.townName;
        data["townCode"] = this.townCode;
        return data; 
    }
}

export interface IGetTownListDto {
    id: number;
    countryID: number;
    townName: string;
    townCode: string;
}

export class ListResultDtoOfGetPostCodeListDto implements IListResultDtoOfGetPostCodeListDto {
    items: GetPostCodeListDto[];

    constructor(data?: IListResultDtoOfGetPostCodeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetPostCodeListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetPostCodeListDto {
        let result = new ListResultDtoOfGetPostCodeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetPostCodeListDto {
    items: GetPostCodeListDto[];
}

export class GetPostCodeListDto implements IGetPostCodeListDto {
    id: number;
    postCode: string;
    regency: string;
    village: string;

    constructor(data?: IGetPostCodeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.postCode = data["postCode"];
            this.regency = data["regency"];
            this.village = data["village"];
        }
    }

    static fromJS(data: any): GetPostCodeListDto {
        let result = new GetPostCodeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["postCode"] = this.postCode;
        data["regency"] = this.regency;
        data["village"] = this.village;
        return data; 
    }
}

export interface IGetPostCodeListDto {
    id: number;
    postCode: string;
    regency: string;
    village: string;
}

export class UpdateMsCompanyInput implements IUpdateMsCompanyInput {
    id: number;
    coCode: string;
    coName: string;
    address: string;
    email: string;
    phoneNo: string;
    faxNo: string;
    npwp: string;
    npwpAddress: string;
    kppName: string;
    kppTTD: string;
    pkp: string;
    pkpDate: moment.Moment;
    isActive: boolean;
    countryID: number;
    townID: number;
    postCodeID: number;
    fileName: string;
    fileNameNew: string;
    image: string;

    constructor(data?: IUpdateMsCompanyInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.coCode = data["coCode"];
            this.coName = data["coName"];
            this.address = data["address"];
            this.email = data["email"];
            this.phoneNo = data["phoneNo"];
            this.faxNo = data["faxNo"];
            this.npwp = data["npwp"];
            this.npwpAddress = data["npwpAddress"];
            this.kppName = data["kppName"];
            this.kppTTD = data["kppTTD"];
            this.pkp = data["pkp"];
            this.pkpDate = data["pkpDate"] ? moment(data["pkpDate"].toString()) : <any>undefined;
            this.isActive = data["isActive"];
            this.countryID = data["countryID"];
            this.townID = data["townID"];
            this.postCodeID = data["postCodeID"];
            this.fileName = data["fileName"];
            this.fileNameNew = data["fileNameNew"];
            this.image = data["image"];
        }
    }

    static fromJS(data: any): UpdateMsCompanyInput {
        let result = new UpdateMsCompanyInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["coCode"] = this.coCode;
        data["coName"] = this.coName;
        data["address"] = this.address;
        data["email"] = this.email;
        data["phoneNo"] = this.phoneNo;
        data["faxNo"] = this.faxNo;
        data["npwp"] = this.npwp;
        data["npwpAddress"] = this.npwpAddress;
        data["kppName"] = this.kppName;
        data["kppTTD"] = this.kppTTD;
        data["pkp"] = this.pkp;
        data["pkpDate"] = this.pkpDate ? this.pkpDate.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["countryID"] = this.countryID;
        data["townID"] = this.townID;
        data["postCodeID"] = this.postCodeID;
        data["fileName"] = this.fileName;
        data["fileNameNew"] = this.fileNameNew;
        data["image"] = this.image;
        return data; 
    }
}

export interface IUpdateMsCompanyInput {
    id: number;
    coCode: string;
    coName: string;
    address: string;
    email: string;
    phoneNo: string;
    faxNo: string;
    npwp: string;
    npwpAddress: string;
    kppName: string;
    kppTTD: string;
    pkp: string;
    pkpDate: moment.Moment;
    isActive: boolean;
    countryID: number;
    townID: number;
    postCodeID: number;
    fileName: string;
    fileNameNew: string;
    image: string;
}

export class ListResultDtoOfGetMsCompanyDropDownListDto implements IListResultDtoOfGetMsCompanyDropDownListDto {
    items: GetMsCompanyDropDownListDto[];

    constructor(data?: IListResultDtoOfGetMsCompanyDropDownListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetMsCompanyDropDownListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetMsCompanyDropDownListDto {
        let result = new ListResultDtoOfGetMsCompanyDropDownListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetMsCompanyDropDownListDto {
    items: GetMsCompanyDropDownListDto[];
}

export class GetMsCompanyDropDownListDto implements IGetMsCompanyDropDownListDto {
    id: number;
    coName: string;
    address: string;

    constructor(data?: IGetMsCompanyDropDownListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.coName = data["coName"];
            this.address = data["address"];
        }
    }

    static fromJS(data: any): GetMsCompanyDropDownListDto {
        let result = new GetMsCompanyDropDownListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["coName"] = this.coName;
        data["address"] = this.address;
        return data; 
    }
}

export interface IGetMsCompanyDropDownListDto {
    id: number;
    coName: string;
    address: string;
}

export class GetCreateMsCountyInputDto implements IGetCreateMsCountyInputDto {
    territoryID: number;
    countyName: string;

    constructor(data?: IGetCreateMsCountyInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.territoryID = data["territoryID"];
            this.countyName = data["countyName"];
        }
    }

    static fromJS(data: any): GetCreateMsCountyInputDto {
        let result = new GetCreateMsCountyInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["territoryID"] = this.territoryID;
        data["countyName"] = this.countyName;
        return data; 
    }
}

export interface IGetCreateMsCountyInputDto {
    territoryID: number;
    countyName: string;
}

export class ListResultDtoOfGetMsCountyListDto implements IListResultDtoOfGetMsCountyListDto {
    items: GetMsCountyListDto[];

    constructor(data?: IListResultDtoOfGetMsCountyListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetMsCountyListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetMsCountyListDto {
        let result = new ListResultDtoOfGetMsCountyListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetMsCountyListDto {
    items: GetMsCountyListDto[];
}

export class GetMsCountyListDto implements IGetMsCountyListDto {
    countyID: number;
    countyName: string;
    territoryID: number;

    constructor(data?: IGetMsCountyListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.countyID = data["countyID"];
            this.countyName = data["countyName"];
            this.territoryID = data["territoryID"];
        }
    }

    static fromJS(data: any): GetMsCountyListDto {
        let result = new GetMsCountyListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["countyID"] = this.countyID;
        data["countyName"] = this.countyName;
        data["territoryID"] = this.territoryID;
        return data; 
    }
}

export interface IGetMsCountyListDto {
    countyID: number;
    countyName: string;
    territoryID: number;
}

export class ListResultDtoOfGetAllDepartmentListDto implements IListResultDtoOfGetAllDepartmentListDto {
    items: GetAllDepartmentListDto[];

    constructor(data?: IListResultDtoOfGetAllDepartmentListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetAllDepartmentListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetAllDepartmentListDto {
        let result = new ListResultDtoOfGetAllDepartmentListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetAllDepartmentListDto {
    items: GetAllDepartmentListDto[];
}

export class GetAllDepartmentListDto implements IGetAllDepartmentListDto {
    departmentID: number;
    departmentName: string;
    departmentCode: string;
    departmentWhatsapp: string;
    departmentEmail: string;
    isActive: boolean;

    constructor(data?: IGetAllDepartmentListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.departmentID = data["departmentID"];
            this.departmentName = data["departmentName"];
            this.departmentCode = data["departmentCode"];
            this.departmentWhatsapp = data["departmentWhatsapp"];
            this.departmentEmail = data["departmentEmail"];
            this.isActive = data["isActive"];
        }
    }

    static fromJS(data: any): GetAllDepartmentListDto {
        let result = new GetAllDepartmentListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["departmentID"] = this.departmentID;
        data["departmentName"] = this.departmentName;
        data["departmentCode"] = this.departmentCode;
        data["departmentWhatsapp"] = this.departmentWhatsapp;
        data["departmentEmail"] = this.departmentEmail;
        data["isActive"] = this.isActive;
        return data; 
    }
}

export interface IGetAllDepartmentListDto {
    departmentID: number;
    departmentName: string;
    departmentCode: string;
    departmentWhatsapp: string;
    departmentEmail: string;
    isActive: boolean;
}

export class ListResultDtoOfGetMsDepartmentDropdownListDto implements IListResultDtoOfGetMsDepartmentDropdownListDto {
    items: GetMsDepartmentDropdownListDto[];

    constructor(data?: IListResultDtoOfGetMsDepartmentDropdownListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetMsDepartmentDropdownListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetMsDepartmentDropdownListDto {
        let result = new ListResultDtoOfGetMsDepartmentDropdownListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetMsDepartmentDropdownListDto {
    items: GetMsDepartmentDropdownListDto[];
}

export class GetMsDepartmentDropdownListDto implements IGetMsDepartmentDropdownListDto {
    departmentID: number;
    departmentName: string;
    departmentCode: string;
    departmentEmail: string;
    departmentWhatsapp: string;

    constructor(data?: IGetMsDepartmentDropdownListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.departmentID = data["departmentID"];
            this.departmentName = data["departmentName"];
            this.departmentCode = data["departmentCode"];
            this.departmentEmail = data["departmentEmail"];
            this.departmentWhatsapp = data["departmentWhatsapp"];
        }
    }

    static fromJS(data: any): GetMsDepartmentDropdownListDto {
        let result = new GetMsDepartmentDropdownListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["departmentID"] = this.departmentID;
        data["departmentName"] = this.departmentName;
        data["departmentCode"] = this.departmentCode;
        data["departmentEmail"] = this.departmentEmail;
        data["departmentWhatsapp"] = this.departmentWhatsapp;
        return data; 
    }
}

export interface IGetMsDepartmentDropdownListDto {
    departmentID: number;
    departmentName: string;
    departmentCode: string;
    departmentEmail: string;
    departmentWhatsapp: string;
}

export class CreateOrUpdateMsDepartmentInput implements ICreateOrUpdateMsDepartmentInput {
    departmentID: number;
    departmentName: string;
    departmentCode: string;
    departmentWhatsapp: string;
    departmentEmail: string;
    isActive: boolean;

    constructor(data?: ICreateOrUpdateMsDepartmentInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.departmentID = data["departmentID"];
            this.departmentName = data["departmentName"];
            this.departmentCode = data["departmentCode"];
            this.departmentWhatsapp = data["departmentWhatsapp"];
            this.departmentEmail = data["departmentEmail"];
            this.isActive = data["isActive"];
        }
    }

    static fromJS(data: any): CreateOrUpdateMsDepartmentInput {
        let result = new CreateOrUpdateMsDepartmentInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["departmentID"] = this.departmentID;
        data["departmentName"] = this.departmentName;
        data["departmentCode"] = this.departmentCode;
        data["departmentWhatsapp"] = this.departmentWhatsapp;
        data["departmentEmail"] = this.departmentEmail;
        data["isActive"] = this.isActive;
        return data; 
    }
}

export interface ICreateOrUpdateMsDepartmentInput {
    departmentID: number;
    departmentName: string;
    departmentCode: string;
    departmentWhatsapp: string;
    departmentEmail: string;
    isActive: boolean;
}

export class ListResultDtoOfGetDeveloperSchemasListDto implements IListResultDtoOfGetDeveloperSchemasListDto {
    items: GetDeveloperSchemasListDto[];

    constructor(data?: IListResultDtoOfGetDeveloperSchemasListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetDeveloperSchemasListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetDeveloperSchemasListDto {
        let result = new ListResultDtoOfGetDeveloperSchemasListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetDeveloperSchemasListDto {
    items: GetDeveloperSchemasListDto[];
}

export class GetDeveloperSchemasListDto implements IGetDeveloperSchemasListDto {
    id: number;
    entityCode: string;
    scmCode: string;
    propCode: string;
    devCode: string;
    devName: string;
    schemaID: number;
    propertyID: number;
    propName: string;
    schemaName: string;
    bankCode: string;
    bankAccountName: string;
    bankBranchName: string;
    isActive: boolean;

    constructor(data?: IGetDeveloperSchemasListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.entityCode = data["entityCode"];
            this.scmCode = data["scmCode"];
            this.propCode = data["propCode"];
            this.devCode = data["devCode"];
            this.devName = data["devName"];
            this.schemaID = data["schemaID"];
            this.propertyID = data["propertyID"];
            this.propName = data["propName"];
            this.schemaName = data["schemaName"];
            this.bankCode = data["bankCode"];
            this.bankAccountName = data["bankAccountName"];
            this.bankBranchName = data["bankBranchName"];
            this.isActive = data["isActive"];
        }
    }

    static fromJS(data: any): GetDeveloperSchemasListDto {
        let result = new GetDeveloperSchemasListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["entityCode"] = this.entityCode;
        data["scmCode"] = this.scmCode;
        data["propCode"] = this.propCode;
        data["devCode"] = this.devCode;
        data["devName"] = this.devName;
        data["schemaID"] = this.schemaID;
        data["propertyID"] = this.propertyID;
        data["propName"] = this.propName;
        data["schemaName"] = this.schemaName;
        data["bankCode"] = this.bankCode;
        data["bankAccountName"] = this.bankAccountName;
        data["bankBranchName"] = this.bankBranchName;
        data["isActive"] = this.isActive;
        return data; 
    }
}

export interface IGetDeveloperSchemasListDto {
    id: number;
    entityCode: string;
    scmCode: string;
    propCode: string;
    devCode: string;
    devName: string;
    schemaID: number;
    propertyID: number;
    propName: string;
    schemaName: string;
    bankCode: string;
    bankAccountName: string;
    bankBranchName: string;
    isActive: boolean;
}

export class CreateMsDeveloperSchemasInputDto implements ICreateMsDeveloperSchemasInputDto {
    propCode: string;
    propName: string;
    schemaID: number;
    setDataDev: DataDev[];

    constructor(data?: ICreateMsDeveloperSchemasInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.propCode = data["propCode"];
            this.propName = data["propName"];
            this.schemaID = data["schemaID"];
            if (data["setDataDev"] && data["setDataDev"].constructor === Array) {
                this.setDataDev = [];
                for (let item of data["setDataDev"])
                    this.setDataDev.push(DataDev.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateMsDeveloperSchemasInputDto {
        let result = new CreateMsDeveloperSchemasInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["propCode"] = this.propCode;
        data["propName"] = this.propName;
        data["schemaID"] = this.schemaID;
        if (this.setDataDev && this.setDataDev.constructor === Array) {
            data["setDataDev"] = [];
            for (let item of this.setDataDev)
                data["setDataDev"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICreateMsDeveloperSchemasInputDto {
    propCode: string;
    propName: string;
    schemaID: number;
    setDataDev: DataDev[];
}

export class DataDev implements IDataDev {
    devCode: string;
    devName: string;
    bankCode: string;
    bankAccountName: string;
    bankBranchName: string;
    isActive: boolean;

    constructor(data?: IDataDev) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.devCode = data["devCode"];
            this.devName = data["devName"];
            this.bankCode = data["bankCode"];
            this.bankAccountName = data["bankAccountName"];
            this.bankBranchName = data["bankBranchName"];
            this.isActive = data["isActive"];
        }
    }

    static fromJS(data: any): DataDev {
        let result = new DataDev();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["devCode"] = this.devCode;
        data["devName"] = this.devName;
        data["bankCode"] = this.bankCode;
        data["bankAccountName"] = this.bankAccountName;
        data["bankBranchName"] = this.bankBranchName;
        data["isActive"] = this.isActive;
        return data; 
    }
}

export interface IDataDev {
    devCode: string;
    devName: string;
    bankCode: string;
    bankAccountName: string;
    bankBranchName: string;
    isActive: boolean;
}

export class UpdateMsDeveloperSchemasInputDto implements IUpdateMsDeveloperSchemasInputDto {
    id: number;
    devCode: string;
    devName: string;
    bankCode: string;
    bankAccountName: string;
    bankBranchName: string;
    isActive: boolean;
    schemaID: number;
    propertyID: number;

    constructor(data?: IUpdateMsDeveloperSchemasInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.devCode = data["devCode"];
            this.devName = data["devName"];
            this.bankCode = data["bankCode"];
            this.bankAccountName = data["bankAccountName"];
            this.bankBranchName = data["bankBranchName"];
            this.isActive = data["isActive"];
            this.schemaID = data["schemaID"];
            this.propertyID = data["propertyID"];
        }
    }

    static fromJS(data: any): UpdateMsDeveloperSchemasInputDto {
        let result = new UpdateMsDeveloperSchemasInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["devCode"] = this.devCode;
        data["devName"] = this.devName;
        data["bankCode"] = this.bankCode;
        data["bankAccountName"] = this.bankAccountName;
        data["bankBranchName"] = this.bankBranchName;
        data["isActive"] = this.isActive;
        data["schemaID"] = this.schemaID;
        data["propertyID"] = this.propertyID;
        return data; 
    }
}

export interface IUpdateMsDeveloperSchemasInputDto {
    id: number;
    devCode: string;
    devName: string;
    bankCode: string;
    bankAccountName: string;
    bankBranchName: string;
    isActive: boolean;
    schemaID: number;
    propertyID: number;
}

export class ListResultDtoOfGetPropCodeListDto implements IListResultDtoOfGetPropCodeListDto {
    items: GetPropCodeListDto[];

    constructor(data?: IListResultDtoOfGetPropCodeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetPropCodeListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetPropCodeListDto {
        let result = new ListResultDtoOfGetPropCodeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetPropCodeListDto {
    items: GetPropCodeListDto[];
}

export class GetPropCodeListDto implements IGetPropCodeListDto {
    id: number;
    propCode: string;
    propName: string;

    constructor(data?: IGetPropCodeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.propCode = data["propCode"];
            this.propName = data["propName"];
        }
    }

    static fromJS(data: any): GetPropCodeListDto {
        let result = new GetPropCodeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["propCode"] = this.propCode;
        data["propName"] = this.propName;
        return data; 
    }
}

export interface IGetPropCodeListDto {
    id: number;
    propCode: string;
    propName: string;
}

export class PagedResultDtoOfGetDeveloperSchemasListDto implements IPagedResultDtoOfGetDeveloperSchemasListDto {
    totalCount: number;
    items: GetDeveloperSchemasListDto[];

    constructor(data?: IPagedResultDtoOfGetDeveloperSchemasListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetDeveloperSchemasListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfGetDeveloperSchemasListDto {
        let result = new PagedResultDtoOfGetDeveloperSchemasListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfGetDeveloperSchemasListDto {
    totalCount: number;
    items: GetDeveloperSchemasListDto[];
}

export class ListResultDtoOfGetDropDownDeveloperSchemasListDto implements IListResultDtoOfGetDropDownDeveloperSchemasListDto {
    items: GetDropDownDeveloperSchemasListDto[];

    constructor(data?: IListResultDtoOfGetDropDownDeveloperSchemasListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetDropDownDeveloperSchemasListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetDropDownDeveloperSchemasListDto {
        let result = new ListResultDtoOfGetDropDownDeveloperSchemasListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetDropDownDeveloperSchemasListDto {
    items: GetDropDownDeveloperSchemasListDto[];
}

export class GetDropDownDeveloperSchemasListDto implements IGetDropDownDeveloperSchemasListDto {
    id: number;
    devName: string;
    devCode: string;

    constructor(data?: IGetDropDownDeveloperSchemasListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.devName = data["devName"];
            this.devCode = data["devCode"];
        }
    }

    static fromJS(data: any): GetDropDownDeveloperSchemasListDto {
        let result = new GetDropDownDeveloperSchemasListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["devName"] = this.devName;
        data["devCode"] = this.devCode;
        return data; 
    }
}

export interface IGetDropDownDeveloperSchemasListDto {
    id: number;
    devName: string;
    devCode: string;
}

export class CreateMsDiscountInput implements ICreateMsDiscountInput {
    discountID: number;
    discountCode: string;
    discountName: string;
    isActive: boolean;

    constructor(data?: ICreateMsDiscountInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.discountID = data["discountID"];
            this.discountCode = data["discountCode"];
            this.discountName = data["discountName"];
            this.isActive = data["isActive"];
        }
    }

    static fromJS(data: any): CreateMsDiscountInput {
        let result = new CreateMsDiscountInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["discountID"] = this.discountID;
        data["discountCode"] = this.discountCode;
        data["discountName"] = this.discountName;
        data["isActive"] = this.isActive;
        return data; 
    }
}

export interface ICreateMsDiscountInput {
    discountID: number;
    discountCode: string;
    discountName: string;
    isActive: boolean;
}

export class PagedResultDtoOfGetAllMsDiscountListDto implements IPagedResultDtoOfGetAllMsDiscountListDto {
    totalCount: number;
    items: GetAllMsDiscountListDto[];

    constructor(data?: IPagedResultDtoOfGetAllMsDiscountListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetAllMsDiscountListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfGetAllMsDiscountListDto {
        let result = new PagedResultDtoOfGetAllMsDiscountListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfGetAllMsDiscountListDto {
    totalCount: number;
    items: GetAllMsDiscountListDto[];
}

export class GetAllMsDiscountListDto implements IGetAllMsDiscountListDto {
    discountID: number;
    discountCode: string;
    discountName: string;
    isActive: boolean;

    constructor(data?: IGetAllMsDiscountListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.discountID = data["discountID"];
            this.discountCode = data["discountCode"];
            this.discountName = data["discountName"];
            this.isActive = data["isActive"];
        }
    }

    static fromJS(data: any): GetAllMsDiscountListDto {
        let result = new GetAllMsDiscountListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["discountID"] = this.discountID;
        data["discountCode"] = this.discountCode;
        data["discountName"] = this.discountName;
        data["isActive"] = this.isActive;
        return data; 
    }
}

export interface IGetAllMsDiscountListDto {
    discountID: number;
    discountCode: string;
    discountName: string;
    isActive: boolean;
}

export class ListResultDtoOfGetAllDocumentListDto implements IListResultDtoOfGetAllDocumentListDto {
    items: GetAllDocumentListDto[];

    constructor(data?: IListResultDtoOfGetAllDocumentListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetAllDocumentListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetAllDocumentListDto {
        let result = new ListResultDtoOfGetAllDocumentListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetAllDocumentListDto {
    items: GetAllDocumentListDto[];
}

export class GetAllDocumentListDto implements IGetAllDocumentListDto {
    documentType: string;
    documentName: string;

    constructor(data?: IGetAllDocumentListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.documentType = data["documentType"];
            this.documentName = data["documentName"];
        }
    }

    static fromJS(data: any): GetAllDocumentListDto {
        let result = new GetAllDocumentListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["documentType"] = this.documentType;
        data["documentName"] = this.documentName;
        return data; 
    }
}

export interface IGetAllDocumentListDto {
    documentType: string;
    documentName: string;
}

export class GetAllMsEntityListDto implements IGetAllMsEntityListDto {
    id: number;
    entityName: string;
    entityCode: string;

    constructor(data?: IGetAllMsEntityListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.entityName = data["entityName"];
            this.entityCode = data["entityCode"];
        }
    }

    static fromJS(data: any): GetAllMsEntityListDto {
        let result = new GetAllMsEntityListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["entityName"] = this.entityName;
        data["entityCode"] = this.entityCode;
        return data; 
    }
}

export interface IGetAllMsEntityListDto {
    id: number;
    entityName: string;
    entityCode: string;
}

export class ListResultDtoOfGetAllMsEntityListDto implements IListResultDtoOfGetAllMsEntityListDto {
    items: GetAllMsEntityListDto[];

    constructor(data?: IListResultDtoOfGetAllMsEntityListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetAllMsEntityListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetAllMsEntityListDto {
        let result = new ListResultDtoOfGetAllMsEntityListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetAllMsEntityListDto {
    items: GetAllMsEntityListDto[];
}

export class CreateMsFacadeInput implements ICreateMsFacadeInput {
    facadeCode: string;
    facadeName: string;

    constructor(data?: ICreateMsFacadeInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.facadeCode = data["facadeCode"];
            this.facadeName = data["facadeName"];
        }
    }

    static fromJS(data: any): CreateMsFacadeInput {
        let result = new CreateMsFacadeInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["facadeCode"] = this.facadeCode;
        data["facadeName"] = this.facadeName;
        return data; 
    }
}

export interface ICreateMsFacadeInput {
    facadeCode: string;
    facadeName: string;
}

export class ListResultDtoOfGetMsFacadeListDto implements IListResultDtoOfGetMsFacadeListDto {
    items: GetMsFacadeListDto[];

    constructor(data?: IListResultDtoOfGetMsFacadeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetMsFacadeListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetMsFacadeListDto {
        let result = new ListResultDtoOfGetMsFacadeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetMsFacadeListDto {
    items: GetMsFacadeListDto[];
}

export class GetMsFacadeListDto implements IGetMsFacadeListDto {
    id: number;
    facadeCode: string;
    facadeName: string;

    constructor(data?: IGetMsFacadeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.facadeCode = data["facadeCode"];
            this.facadeName = data["facadeName"];
        }
    }

    static fromJS(data: any): GetMsFacadeListDto {
        let result = new GetMsFacadeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["facadeCode"] = this.facadeCode;
        data["facadeName"] = this.facadeName;
        return data; 
    }
}

export interface IGetMsFacadeListDto {
    id: number;
    facadeCode: string;
    facadeName: string;
}

export class UpdateMsFacadeInput implements IUpdateMsFacadeInput {
    id: number;
    facadeCode: string;
    facadeName: string;

    constructor(data?: IUpdateMsFacadeInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.facadeCode = data["facadeCode"];
            this.facadeName = data["facadeName"];
        }
    }

    static fromJS(data: any): UpdateMsFacadeInput {
        let result = new UpdateMsFacadeInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["facadeCode"] = this.facadeCode;
        data["facadeName"] = this.facadeName;
        return data; 
    }
}

export interface IUpdateMsFacadeInput {
    id: number;
    facadeCode: string;
    facadeName: string;
}

export class CreateMsFinTypeInputDto implements ICreateMsFinTypeInputDto {
    finTypeCode: string;
    finTypeDesc: string;
    finTimes: number;
    pctComm: number;

    constructor(data?: ICreateMsFinTypeInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.finTypeCode = data["finTypeCode"];
            this.finTypeDesc = data["finTypeDesc"];
            this.finTimes = data["finTimes"];
            this.pctComm = data["pctComm"];
        }
    }

    static fromJS(data: any): CreateMsFinTypeInputDto {
        let result = new CreateMsFinTypeInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["finTypeCode"] = this.finTypeCode;
        data["finTypeDesc"] = this.finTypeDesc;
        data["finTimes"] = this.finTimes;
        data["pctComm"] = this.pctComm;
        return data; 
    }
}

export interface ICreateMsFinTypeInputDto {
    finTypeCode: string;
    finTypeDesc: string;
    finTimes: number;
    pctComm: number;
}

export class ListResultDtoOfString implements IListResultDtoOfString {
    items: string[];

    constructor(data?: IListResultDtoOfString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(item);
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfString {
        let result = new ListResultDtoOfString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item);
        }
        return data; 
    }
}

export interface IListResultDtoOfString {
    items: string[];
}

export class PagedResultDtoOfGetAllMsFinTypeListDto implements IPagedResultDtoOfGetAllMsFinTypeListDto {
    totalCount: number;
    items: GetAllMsFinTypeListDto[];

    constructor(data?: IPagedResultDtoOfGetAllMsFinTypeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetAllMsFinTypeListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfGetAllMsFinTypeListDto {
        let result = new PagedResultDtoOfGetAllMsFinTypeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfGetAllMsFinTypeListDto {
    totalCount: number;
    items: GetAllMsFinTypeListDto[];
}

export class GetAllMsFinTypeListDto implements IGetAllMsFinTypeListDto {
    id: number;
    finTypeCode: string;
    finTypeDesc: string;
    finTimes: number;
    pctComm: number;
    inputTime: moment.Moment;

    constructor(data?: IGetAllMsFinTypeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.finTypeCode = data["finTypeCode"];
            this.finTypeDesc = data["finTypeDesc"];
            this.finTimes = data["finTimes"];
            this.pctComm = data["pctComm"];
            this.inputTime = data["inputTime"] ? moment(data["inputTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): GetAllMsFinTypeListDto {
        let result = new GetAllMsFinTypeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["finTypeCode"] = this.finTypeCode;
        data["finTypeDesc"] = this.finTypeDesc;
        data["finTimes"] = this.finTimes;
        data["pctComm"] = this.pctComm;
        data["inputTime"] = this.inputTime ? this.inputTime.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IGetAllMsFinTypeListDto {
    id: number;
    finTypeCode: string;
    finTypeDesc: string;
    finTimes: number;
    pctComm: number;
    inputTime: moment.Moment;
}

export class UpdateMsFinTypeInputDto implements IUpdateMsFinTypeInputDto {
    finTypeCode: string;
    finTypeDesc: string;
    finTimes: number;
    pctComm: number;

    constructor(data?: IUpdateMsFinTypeInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.finTypeCode = data["finTypeCode"];
            this.finTypeDesc = data["finTypeDesc"];
            this.finTimes = data["finTimes"];
            this.pctComm = data["pctComm"];
        }
    }

    static fromJS(data: any): UpdateMsFinTypeInputDto {
        let result = new UpdateMsFinTypeInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["finTypeCode"] = this.finTypeCode;
        data["finTypeDesc"] = this.finTypeDesc;
        data["finTimes"] = this.finTimes;
        data["pctComm"] = this.pctComm;
        return data; 
    }
}

export interface IUpdateMsFinTypeInputDto {
    finTypeCode: string;
    finTypeDesc: string;
    finTimes: number;
    pctComm: number;
}

export class ListResultDtoOfGetFranchiseGroupDropdownListDto implements IListResultDtoOfGetFranchiseGroupDropdownListDto {
    items: GetFranchiseGroupDropdownListDto[];

    constructor(data?: IListResultDtoOfGetFranchiseGroupDropdownListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetFranchiseGroupDropdownListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetFranchiseGroupDropdownListDto {
        let result = new ListResultDtoOfGetFranchiseGroupDropdownListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetFranchiseGroupDropdownListDto {
    items: GetFranchiseGroupDropdownListDto[];
}

export class GetFranchiseGroupDropdownListDto implements IGetFranchiseGroupDropdownListDto {
    franchiseGroupName: string;

    constructor(data?: IGetFranchiseGroupDropdownListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.franchiseGroupName = data["franchiseGroupName"];
        }
    }

    static fromJS(data: any): GetFranchiseGroupDropdownListDto {
        let result = new GetFranchiseGroupDropdownListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["franchiseGroupName"] = this.franchiseGroupName;
        return data; 
    }
}

export interface IGetFranchiseGroupDropdownListDto {
    franchiseGroupName: string;
}

export class PagedResultDtoOfGetAllMsGroupSchemaListDto implements IPagedResultDtoOfGetAllMsGroupSchemaListDto {
    totalCount: number;
    items: GetAllMsGroupSchemaListDto[];

    constructor(data?: IPagedResultDtoOfGetAllMsGroupSchemaListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetAllMsGroupSchemaListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfGetAllMsGroupSchemaListDto {
        let result = new PagedResultDtoOfGetAllMsGroupSchemaListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfGetAllMsGroupSchemaListDto {
    totalCount: number;
    items: GetAllMsGroupSchemaListDto[];
}

export class GetAllMsGroupSchemaListDto implements IGetAllMsGroupSchemaListDto {
    groupSchemaCode: string;
    groupSchemaName: string;
    projectName: string;
    isActive: boolean;

    constructor(data?: IGetAllMsGroupSchemaListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.groupSchemaCode = data["groupSchemaCode"];
            this.groupSchemaName = data["groupSchemaName"];
            this.projectName = data["projectName"];
            this.isActive = data["isActive"];
        }
    }

    static fromJS(data: any): GetAllMsGroupSchemaListDto {
        let result = new GetAllMsGroupSchemaListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["groupSchemaCode"] = this.groupSchemaCode;
        data["groupSchemaName"] = this.groupSchemaName;
        data["projectName"] = this.projectName;
        data["isActive"] = this.isActive;
        return data; 
    }
}

export interface IGetAllMsGroupSchemaListDto {
    groupSchemaCode: string;
    groupSchemaName: string;
    projectName: string;
    isActive: boolean;
}

export class CreateOrUpdateSetGroupSchemaInputDto implements ICreateOrUpdateSetGroupSchemaInputDto {
    groupSchemaCode: string;
    groupSchemaName: string;
    validFrom: moment.Moment;
    documentGrouping: string;
    documentGroupingDelete: string;
    statusDocument: string;
    projectID: number;
    clusterID: number;
    setSchema: ReturnMsGroupSchemaDto[];
    isComplete: boolean;
    isActive: boolean;

    constructor(data?: ICreateOrUpdateSetGroupSchemaInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.groupSchemaCode = data["groupSchemaCode"];
            this.groupSchemaName = data["groupSchemaName"];
            this.validFrom = data["validFrom"] ? moment(data["validFrom"].toString()) : <any>undefined;
            this.documentGrouping = data["documentGrouping"];
            this.documentGroupingDelete = data["documentGroupingDelete"];
            this.statusDocument = data["statusDocument"];
            this.projectID = data["projectID"];
            this.clusterID = data["clusterID"];
            if (data["setSchema"] && data["setSchema"].constructor === Array) {
                this.setSchema = [];
                for (let item of data["setSchema"])
                    this.setSchema.push(ReturnMsGroupSchemaDto.fromJS(item));
            }
            this.isComplete = data["isComplete"];
            this.isActive = data["isActive"];
        }
    }

    static fromJS(data: any): CreateOrUpdateSetGroupSchemaInputDto {
        let result = new CreateOrUpdateSetGroupSchemaInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["groupSchemaCode"] = this.groupSchemaCode;
        data["groupSchemaName"] = this.groupSchemaName;
        data["validFrom"] = this.validFrom ? this.validFrom.toISOString() : <any>undefined;
        data["documentGrouping"] = this.documentGrouping;
        data["documentGroupingDelete"] = this.documentGroupingDelete;
        data["statusDocument"] = this.statusDocument;
        data["projectID"] = this.projectID;
        data["clusterID"] = this.clusterID;
        if (this.setSchema && this.setSchema.constructor === Array) {
            data["setSchema"] = [];
            for (let item of this.setSchema)
                data["setSchema"].push(item.toJSON());
        }
        data["isComplete"] = this.isComplete;
        data["isActive"] = this.isActive;
        return data; 
    }
}

export interface ICreateOrUpdateSetGroupSchemaInputDto {
    groupSchemaCode: string;
    groupSchemaName: string;
    validFrom: moment.Moment;
    documentGrouping: string;
    documentGroupingDelete: string;
    statusDocument: string;
    projectID: number;
    clusterID: number;
    setSchema: ReturnMsGroupSchemaDto[];
    isComplete: boolean;
    isActive: boolean;
}

export class ReturnMsGroupSchemaDto implements IReturnMsGroupSchemaDto {
    groupSchemaID: number;
    schemaID: number;
    isComplete: boolean;

    constructor(data?: IReturnMsGroupSchemaDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.groupSchemaID = data["groupSchemaID"];
            this.schemaID = data["schemaID"];
            this.isComplete = data["isComplete"];
        }
    }

    static fromJS(data: any): ReturnMsGroupSchemaDto {
        let result = new ReturnMsGroupSchemaDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["groupSchemaID"] = this.groupSchemaID;
        data["schemaID"] = this.schemaID;
        data["isComplete"] = this.isComplete;
        return data; 
    }
}

export interface IReturnMsGroupSchemaDto {
    groupSchemaID: number;
    schemaID: number;
    isComplete: boolean;
}

export class CreateOrUpdateSetPercentCommGroupInputDto implements ICreateOrUpdateSetPercentCommGroupInputDto {
    groupSchemaID: number;
    groupCommPctID: number;
    validDate: moment.Moment;
    commTypeID: number;
    statusMemberID: number;
    uplineNo: string;
    commPctPaid: number;
    nominal: number;
    isComplete: boolean;
    isStandard: boolean;

    constructor(data?: ICreateOrUpdateSetPercentCommGroupInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.groupSchemaID = data["groupSchemaID"];
            this.groupCommPctID = data["groupCommPctID"];
            this.validDate = data["validDate"] ? moment(data["validDate"].toString()) : <any>undefined;
            this.commTypeID = data["commTypeID"];
            this.statusMemberID = data["statusMemberID"];
            this.uplineNo = data["uplineNo"];
            this.commPctPaid = data["commPctPaid"];
            this.nominal = data["nominal"];
            this.isComplete = data["isComplete"];
            this.isStandard = data["isStandard"];
        }
    }

    static fromJS(data: any): CreateOrUpdateSetPercentCommGroupInputDto {
        let result = new CreateOrUpdateSetPercentCommGroupInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["groupSchemaID"] = this.groupSchemaID;
        data["groupCommPctID"] = this.groupCommPctID;
        data["validDate"] = this.validDate ? this.validDate.toISOString() : <any>undefined;
        data["commTypeID"] = this.commTypeID;
        data["statusMemberID"] = this.statusMemberID;
        data["uplineNo"] = this.uplineNo;
        data["commPctPaid"] = this.commPctPaid;
        data["nominal"] = this.nominal;
        data["isComplete"] = this.isComplete;
        data["isStandard"] = this.isStandard;
        return data; 
    }
}

export interface ICreateOrUpdateSetPercentCommGroupInputDto {
    groupSchemaID: number;
    groupCommPctID: number;
    validDate: moment.Moment;
    commTypeID: number;
    statusMemberID: number;
    uplineNo: string;
    commPctPaid: number;
    nominal: number;
    isComplete: boolean;
    isStandard: boolean;
}

export class GetDropDownSchemaByGroupSchemaIdListDto implements IGetDropDownSchemaByGroupSchemaIdListDto {
    groupSchemaID: number;
    schemaID: number;
    schemaCode: string;
    schemaName: string;

    constructor(data?: IGetDropDownSchemaByGroupSchemaIdListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.groupSchemaID = data["groupSchemaID"];
            this.schemaID = data["schemaID"];
            this.schemaCode = data["schemaCode"];
            this.schemaName = data["schemaName"];
        }
    }

    static fromJS(data: any): GetDropDownSchemaByGroupSchemaIdListDto {
        let result = new GetDropDownSchemaByGroupSchemaIdListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["groupSchemaID"] = this.groupSchemaID;
        data["schemaID"] = this.schemaID;
        data["schemaCode"] = this.schemaCode;
        data["schemaName"] = this.schemaName;
        return data; 
    }
}

export interface IGetDropDownSchemaByGroupSchemaIdListDto {
    groupSchemaID: number;
    schemaID: number;
    schemaCode: string;
    schemaName: string;
}

export class GetDetailMsGroupSchemaListDto implements IGetDetailMsGroupSchemaListDto {
    groupSchemaCode: string;
    groupSchemaName: string;
    projectID: number;
    projectName: string;
    clusterID: number;
    clusterName: string;
    validFrom: moment.Moment;
    documentGrouping: string;
    isActive: boolean;
    getDataSchema: GetDataSchema[];

    constructor(data?: IGetDetailMsGroupSchemaListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.groupSchemaCode = data["groupSchemaCode"];
            this.groupSchemaName = data["groupSchemaName"];
            this.projectID = data["projectID"];
            this.projectName = data["projectName"];
            this.clusterID = data["clusterID"];
            this.clusterName = data["clusterName"];
            this.validFrom = data["validFrom"] ? moment(data["validFrom"].toString()) : <any>undefined;
            this.documentGrouping = data["documentGrouping"];
            this.isActive = data["isActive"];
            if (data["getDataSchema"] && data["getDataSchema"].constructor === Array) {
                this.getDataSchema = [];
                for (let item of data["getDataSchema"])
                    this.getDataSchema.push(GetDataSchema.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetDetailMsGroupSchemaListDto {
        let result = new GetDetailMsGroupSchemaListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["groupSchemaCode"] = this.groupSchemaCode;
        data["groupSchemaName"] = this.groupSchemaName;
        data["projectID"] = this.projectID;
        data["projectName"] = this.projectName;
        data["clusterID"] = this.clusterID;
        data["clusterName"] = this.clusterName;
        data["validFrom"] = this.validFrom ? this.validFrom.toISOString() : <any>undefined;
        data["documentGrouping"] = this.documentGrouping;
        data["isActive"] = this.isActive;
        if (this.getDataSchema && this.getDataSchema.constructor === Array) {
            data["getDataSchema"] = [];
            for (let item of this.getDataSchema)
                data["getDataSchema"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetDetailMsGroupSchemaListDto {
    groupSchemaCode: string;
    groupSchemaName: string;
    projectID: number;
    projectName: string;
    clusterID: number;
    clusterName: string;
    validFrom: moment.Moment;
    documentGrouping: string;
    isActive: boolean;
    getDataSchema: GetDataSchema[];
}

export class GetDataSchema implements IGetDataSchema {
    groupSchemaID: number;
    schemaID: number;
    scmCode: string;
    scmName: string;

    constructor(data?: IGetDataSchema) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.groupSchemaID = data["groupSchemaID"];
            this.schemaID = data["schemaID"];
            this.scmCode = data["scmCode"];
            this.scmName = data["scmName"];
        }
    }

    static fromJS(data: any): GetDataSchema {
        let result = new GetDataSchema();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["groupSchemaID"] = this.groupSchemaID;
        data["schemaID"] = this.schemaID;
        data["scmCode"] = this.scmCode;
        data["scmName"] = this.scmName;
        return data; 
    }
}

export interface IGetDataSchema {
    groupSchemaID: number;
    schemaID: number;
    scmCode: string;
    scmName: string;
}

export class CreateMsGroupSchemaRequirementInputDto implements ICreateMsGroupSchemaRequirementInputDto {
    flag: string;
    setGroupReq: SetGroupReq[];

    constructor(data?: ICreateMsGroupSchemaRequirementInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.flag = data["flag"];
            if (data["setGroupReq"] && data["setGroupReq"].constructor === Array) {
                this.setGroupReq = [];
                for (let item of data["setGroupReq"])
                    this.setGroupReq.push(SetGroupReq.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateMsGroupSchemaRequirementInputDto {
        let result = new CreateMsGroupSchemaRequirementInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["flag"] = this.flag;
        if (this.setGroupReq && this.setGroupReq.constructor === Array) {
            data["setGroupReq"] = [];
            for (let item of this.setGroupReq)
                data["setGroupReq"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICreateMsGroupSchemaRequirementInputDto {
    flag: string;
    setGroupReq: SetGroupReq[];
}

export class SetGroupReq implements ISetGroupReq {
    reqNo: string;
    reqDesc: string;
    pctPaid: number;
    groupSchemaID: number;
    isComplete: boolean;

    constructor(data?: ISetGroupReq) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.reqNo = data["reqNo"];
            this.reqDesc = data["reqDesc"];
            this.pctPaid = data["pctPaid"];
            this.groupSchemaID = data["groupSchemaID"];
            this.isComplete = data["isComplete"];
        }
    }

    static fromJS(data: any): SetGroupReq {
        let result = new SetGroupReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["reqNo"] = this.reqNo;
        data["reqDesc"] = this.reqDesc;
        data["pctPaid"] = this.pctPaid;
        data["groupSchemaID"] = this.groupSchemaID;
        data["isComplete"] = this.isComplete;
        return data; 
    }
}

export interface ISetGroupReq {
    reqNo: string;
    reqDesc: string;
    pctPaid: number;
    groupSchemaID: number;
    isComplete: boolean;
}

export class GetMsGroupSchemaRequirementListDto implements IGetMsGroupSchemaRequirementListDto {
    groupSchemaID: number;
    groupSchemaRequirementID: number;
    reqNo: number;
    reqDesc: string;
    pctPaid: number;
    isComplete: boolean;

    constructor(data?: IGetMsGroupSchemaRequirementListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.groupSchemaID = data["groupSchemaID"];
            this.groupSchemaRequirementID = data["groupSchemaRequirementID"];
            this.reqNo = data["reqNo"];
            this.reqDesc = data["reqDesc"];
            this.pctPaid = data["pctPaid"];
            this.isComplete = data["isComplete"];
        }
    }

    static fromJS(data: any): GetMsGroupSchemaRequirementListDto {
        let result = new GetMsGroupSchemaRequirementListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["groupSchemaID"] = this.groupSchemaID;
        data["groupSchemaRequirementID"] = this.groupSchemaRequirementID;
        data["reqNo"] = this.reqNo;
        data["reqDesc"] = this.reqDesc;
        data["pctPaid"] = this.pctPaid;
        data["isComplete"] = this.isComplete;
        return data; 
    }
}

export interface IGetMsGroupSchemaRequirementListDto {
    groupSchemaID: number;
    groupSchemaRequirementID: number;
    reqNo: number;
    reqDesc: string;
    pctPaid: number;
    isComplete: boolean;
}

export class GetAllMsGroupCommPctListDto implements IGetAllMsGroupCommPctListDto {
    groupSchemaID: number;
    schemaID: number;
    scmCode: string;
    validDate: moment.Moment;
    commTypeID: number;
    commTypeName: string;
    statusMemberID: number;
    statusName: string;
    uplineNo: string;
    commPctPaid: number;
    nominal: number;
    isStandard: boolean;
    groupCommPctID: number[];

    constructor(data?: IGetAllMsGroupCommPctListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.groupSchemaID = data["groupSchemaID"];
            this.schemaID = data["schemaID"];
            this.scmCode = data["scmCode"];
            this.validDate = data["validDate"] ? moment(data["validDate"].toString()) : <any>undefined;
            this.commTypeID = data["commTypeID"];
            this.commTypeName = data["commTypeName"];
            this.statusMemberID = data["statusMemberID"];
            this.statusName = data["statusName"];
            this.uplineNo = data["uplineNo"];
            this.commPctPaid = data["commPctPaid"];
            this.nominal = data["nominal"];
            this.isStandard = data["isStandard"];
            if (data["groupCommPctID"] && data["groupCommPctID"].constructor === Array) {
                this.groupCommPctID = [];
                for (let item of data["groupCommPctID"])
                    this.groupCommPctID.push(item);
            }
        }
    }

    static fromJS(data: any): GetAllMsGroupCommPctListDto {
        let result = new GetAllMsGroupCommPctListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["groupSchemaID"] = this.groupSchemaID;
        data["schemaID"] = this.schemaID;
        data["scmCode"] = this.scmCode;
        data["validDate"] = this.validDate ? this.validDate.toISOString() : <any>undefined;
        data["commTypeID"] = this.commTypeID;
        data["commTypeName"] = this.commTypeName;
        data["statusMemberID"] = this.statusMemberID;
        data["statusName"] = this.statusName;
        data["uplineNo"] = this.uplineNo;
        data["commPctPaid"] = this.commPctPaid;
        data["nominal"] = this.nominal;
        data["isStandard"] = this.isStandard;
        if (this.groupCommPctID && this.groupCommPctID.constructor === Array) {
            data["groupCommPctID"] = [];
            for (let item of this.groupCommPctID)
                data["groupCommPctID"].push(item);
        }
        return data; 
    }
}

export interface IGetAllMsGroupCommPctListDto {
    groupSchemaID: number;
    schemaID: number;
    scmCode: string;
    validDate: moment.Moment;
    commTypeID: number;
    commTypeName: string;
    statusMemberID: number;
    statusName: string;
    uplineNo: string;
    commPctPaid: number;
    nominal: number;
    isStandard: boolean;
    groupCommPctID: number[];
}

export class GetDropDownClusterByProjectListDto implements IGetDropDownClusterByProjectListDto {
    clusterID: number;
    clusterCode: string;
    clusterName: string;

    constructor(data?: IGetDropDownClusterByProjectListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.clusterID = data["clusterID"];
            this.clusterCode = data["clusterCode"];
            this.clusterName = data["clusterName"];
        }
    }

    static fromJS(data: any): GetDropDownClusterByProjectListDto {
        let result = new GetDropDownClusterByProjectListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["clusterID"] = this.clusterID;
        data["clusterCode"] = this.clusterCode;
        data["clusterName"] = this.clusterName;
        return data; 
    }
}

export interface IGetDropDownClusterByProjectListDto {
    clusterID: number;
    clusterCode: string;
    clusterName: string;
}

export class GetDataMsGroupSchemaReqListDto implements IGetDataMsGroupSchemaReqListDto {
    reqNo: number;
    reqDesc: string;
    pctPaid: number;

    constructor(data?: IGetDataMsGroupSchemaReqListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.reqNo = data["reqNo"];
            this.reqDesc = data["reqDesc"];
            this.pctPaid = data["pctPaid"];
        }
    }

    static fromJS(data: any): GetDataMsGroupSchemaReqListDto {
        let result = new GetDataMsGroupSchemaReqListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["reqNo"] = this.reqNo;
        data["reqDesc"] = this.reqDesc;
        data["pctPaid"] = this.pctPaid;
        return data; 
    }
}

export interface IGetDataMsGroupSchemaReqListDto {
    reqNo: number;
    reqDesc: string;
    pctPaid: number;
}

export class ListResultDtoOfGetAllMsItemListDto implements IListResultDtoOfGetAllMsItemListDto {
    items: GetAllMsItemListDto[];

    constructor(data?: IListResultDtoOfGetAllMsItemListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetAllMsItemListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetAllMsItemListDto {
        let result = new ListResultDtoOfGetAllMsItemListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetAllMsItemListDto {
    items: GetAllMsItemListDto[];
}

export class GetAllMsItemListDto implements IGetAllMsItemListDto {
    id: number;
    itemCode: string;
    itemName: string;
    shortName: string;
    isActive: boolean;

    constructor(data?: IGetAllMsItemListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.itemCode = data["itemCode"];
            this.itemName = data["itemName"];
            this.shortName = data["shortName"];
            this.isActive = data["isActive"];
        }
    }

    static fromJS(data: any): GetAllMsItemListDto {
        let result = new GetAllMsItemListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["itemCode"] = this.itemCode;
        data["itemName"] = this.itemName;
        data["shortName"] = this.shortName;
        data["isActive"] = this.isActive;
        return data; 
    }
}

export interface IGetAllMsItemListDto {
    id: number;
    itemCode: string;
    itemName: string;
    shortName: string;
    isActive: boolean;
}

export class CreateMsItemInput implements ICreateMsItemInput {
    itemCode: string;
    itemName: string;
    shortName: string;
    isActive: boolean;

    constructor(data?: ICreateMsItemInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.itemCode = data["itemCode"];
            this.itemName = data["itemName"];
            this.shortName = data["shortName"];
            this.isActive = data["isActive"];
        }
    }

    static fromJS(data: any): CreateMsItemInput {
        let result = new CreateMsItemInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["itemCode"] = this.itemCode;
        data["itemName"] = this.itemName;
        data["shortName"] = this.shortName;
        data["isActive"] = this.isActive;
        return data; 
    }
}

export interface ICreateMsItemInput {
    itemCode: string;
    itemName: string;
    shortName: string;
    isActive: boolean;
}

export class UpdateMsItemInput implements IUpdateMsItemInput {
    id: number;
    itemCode: string;
    itemName: string;
    shortName: string;
    isActive: boolean;

    constructor(data?: IUpdateMsItemInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.itemCode = data["itemCode"];
            this.itemName = data["itemName"];
            this.shortName = data["shortName"];
            this.isActive = data["isActive"];
        }
    }

    static fromJS(data: any): UpdateMsItemInput {
        let result = new UpdateMsItemInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["itemCode"] = this.itemCode;
        data["itemName"] = this.itemName;
        data["shortName"] = this.shortName;
        data["isActive"] = this.isActive;
        return data; 
    }
}

export interface IUpdateMsItemInput {
    id: number;
    itemCode: string;
    itemName: string;
    shortName: string;
    isActive: boolean;
}

export class ListResultDtoOfGetAllMsJobTitleDropdownList implements IListResultDtoOfGetAllMsJobTitleDropdownList {
    items: GetAllMsJobTitleDropdownList[];

    constructor(data?: IListResultDtoOfGetAllMsJobTitleDropdownList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetAllMsJobTitleDropdownList.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetAllMsJobTitleDropdownList {
        let result = new ListResultDtoOfGetAllMsJobTitleDropdownList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetAllMsJobTitleDropdownList {
    items: GetAllMsJobTitleDropdownList[];
}

export class GetAllMsJobTitleDropdownList implements IGetAllMsJobTitleDropdownList {
    jobTitleID: string;
    jobTitleName: string;

    constructor(data?: IGetAllMsJobTitleDropdownList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.jobTitleID = data["jobTitleID"];
            this.jobTitleName = data["jobTitleName"];
        }
    }

    static fromJS(data: any): GetAllMsJobTitleDropdownList {
        let result = new GetAllMsJobTitleDropdownList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["jobTitleID"] = this.jobTitleID;
        data["jobTitleName"] = this.jobTitleName;
        return data; 
    }
}

export interface IGetAllMsJobTitleDropdownList {
    jobTitleID: string;
    jobTitleName: string;
}

export class InputManagementPctDto implements IInputManagementPctDto {
    managementPctID: number;
    managementPct: number;
    schemaID: number;
    developerSchemaID: number;
    isActive: boolean;

    constructor(data?: IInputManagementPctDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.managementPctID = data["managementPctID"];
            this.managementPct = data["managementPct"];
            this.schemaID = data["schemaID"];
            this.developerSchemaID = data["developerSchemaID"];
            this.isActive = data["isActive"];
        }
    }

    static fromJS(data: any): InputManagementPctDto {
        let result = new InputManagementPctDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["managementPctID"] = this.managementPctID;
        data["managementPct"] = this.managementPct;
        data["schemaID"] = this.schemaID;
        data["developerSchemaID"] = this.developerSchemaID;
        data["isActive"] = this.isActive;
        return data; 
    }
}

export interface IInputManagementPctDto {
    managementPctID: number;
    managementPct: number;
    schemaID: number;
    developerSchemaID: number;
    isActive: boolean;
}

export class ListResultDtoOfGetAllManagementPctListDto implements IListResultDtoOfGetAllManagementPctListDto {
    items: GetAllManagementPctListDto[];

    constructor(data?: IListResultDtoOfGetAllManagementPctListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetAllManagementPctListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetAllManagementPctListDto {
        let result = new ListResultDtoOfGetAllManagementPctListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetAllManagementPctListDto {
    items: GetAllManagementPctListDto[];
}

export class GetAllManagementPctListDto implements IGetAllManagementPctListDto {
    managementPctID: number;
    managementPct: number;
    schemaID: number;
    developerSchemaID: number;
    developerName: string;
    isActive: boolean;

    constructor(data?: IGetAllManagementPctListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.managementPctID = data["managementPctID"];
            this.managementPct = data["managementPct"];
            this.schemaID = data["schemaID"];
            this.developerSchemaID = data["developerSchemaID"];
            this.developerName = data["developerName"];
            this.isActive = data["isActive"];
        }
    }

    static fromJS(data: any): GetAllManagementPctListDto {
        let result = new GetAllManagementPctListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["managementPctID"] = this.managementPctID;
        data["managementPct"] = this.managementPct;
        data["schemaID"] = this.schemaID;
        data["developerSchemaID"] = this.developerSchemaID;
        data["developerName"] = this.developerName;
        data["isActive"] = this.isActive;
        return data; 
    }
}

export interface IGetAllManagementPctListDto {
    managementPctID: number;
    managementPct: number;
    schemaID: number;
    developerSchemaID: number;
    developerName: string;
    isActive: boolean;
}

export class ListResultDtoOfGetMSNationDropdownListDto implements IListResultDtoOfGetMSNationDropdownListDto {
    items: GetMSNationDropdownListDto[];

    constructor(data?: IListResultDtoOfGetMSNationDropdownListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetMSNationDropdownListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetMSNationDropdownListDto {
        let result = new ListResultDtoOfGetMSNationDropdownListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetMSNationDropdownListDto {
    items: GetMSNationDropdownListDto[];
}

export class GetMSNationDropdownListDto implements IGetMSNationDropdownListDto {
    entityCode: string;
    nationID: string;
    nationality: string;
    ppatkNationCode: string;

    constructor(data?: IGetMSNationDropdownListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.entityCode = data["entityCode"];
            this.nationID = data["nationID"];
            this.nationality = data["nationality"];
            this.ppatkNationCode = data["ppatkNationCode"];
        }
    }

    static fromJS(data: any): GetMSNationDropdownListDto {
        let result = new GetMSNationDropdownListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["entityCode"] = this.entityCode;
        data["nationID"] = this.nationID;
        data["nationality"] = this.nationality;
        data["ppatkNationCode"] = this.ppatkNationCode;
        return data; 
    }
}

export interface IGetMSNationDropdownListDto {
    entityCode: string;
    nationID: string;
    nationality: string;
    ppatkNationCode: string;
}

export class ListResultDtoOfGetMsOccupationDropdownListDto implements IListResultDtoOfGetMsOccupationDropdownListDto {
    items: GetMsOccupationDropdownListDto[];

    constructor(data?: IListResultDtoOfGetMsOccupationDropdownListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetMsOccupationDropdownListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetMsOccupationDropdownListDto {
        let result = new ListResultDtoOfGetMsOccupationDropdownListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetMsOccupationDropdownListDto {
    items: GetMsOccupationDropdownListDto[];
}

export class GetMsOccupationDropdownListDto implements IGetMsOccupationDropdownListDto {
    occID: string;
    occDesc: string;

    constructor(data?: IGetMsOccupationDropdownListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.occID = data["occID"];
            this.occDesc = data["occDesc"];
        }
    }

    static fromJS(data: any): GetMsOccupationDropdownListDto {
        let result = new GetMsOccupationDropdownListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["occID"] = this.occID;
        data["occDesc"] = this.occDesc;
        return data; 
    }
}

export interface IGetMsOccupationDropdownListDto {
    occID: string;
    occDesc: string;
}

export class CreateMsOfficerInput implements ICreateMsOfficerInput {
    id: number;
    officerName: string;
    email: string;
    handphone: string;
    positionID: number;
    departmentID: number;
    isActive: boolean;

    constructor(data?: ICreateMsOfficerInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.officerName = data["officerName"];
            this.email = data["email"];
            this.handphone = data["handphone"];
            this.positionID = data["positionID"];
            this.departmentID = data["departmentID"];
            this.isActive = data["isActive"];
        }
    }

    static fromJS(data: any): CreateMsOfficerInput {
        let result = new CreateMsOfficerInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["officerName"] = this.officerName;
        data["email"] = this.email;
        data["handphone"] = this.handphone;
        data["positionID"] = this.positionID;
        data["departmentID"] = this.departmentID;
        data["isActive"] = this.isActive;
        return data; 
    }
}

export interface ICreateMsOfficerInput {
    id: number;
    officerName: string;
    email: string;
    handphone: string;
    positionID: number;
    departmentID: number;
    isActive: boolean;
}

export class ListResultDtoOfGetAllOfficerListDto implements IListResultDtoOfGetAllOfficerListDto {
    items: GetAllOfficerListDto[];

    constructor(data?: IListResultDtoOfGetAllOfficerListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetAllOfficerListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetAllOfficerListDto {
        let result = new ListResultDtoOfGetAllOfficerListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetAllOfficerListDto {
    items: GetAllOfficerListDto[];
}

export class GetAllOfficerListDto implements IGetAllOfficerListDto {
    officerID: number;
    officerName: string;
    email: string;
    handphone: string;
    fax: string;
    departmentID: number;
    departmentName: string;
    positionID: number;
    positionName: string;
    isActive: boolean;

    constructor(data?: IGetAllOfficerListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.officerID = data["officerID"];
            this.officerName = data["officerName"];
            this.email = data["email"];
            this.handphone = data["handphone"];
            this.fax = data["fax"];
            this.departmentID = data["departmentID"];
            this.departmentName = data["departmentName"];
            this.positionID = data["positionID"];
            this.positionName = data["positionName"];
            this.isActive = data["isActive"];
        }
    }

    static fromJS(data: any): GetAllOfficerListDto {
        let result = new GetAllOfficerListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["officerID"] = this.officerID;
        data["officerName"] = this.officerName;
        data["email"] = this.email;
        data["handphone"] = this.handphone;
        data["fax"] = this.fax;
        data["departmentID"] = this.departmentID;
        data["departmentName"] = this.departmentName;
        data["positionID"] = this.positionID;
        data["positionName"] = this.positionName;
        data["isActive"] = this.isActive;
        return data; 
    }
}

export interface IGetAllOfficerListDto {
    officerID: number;
    officerName: string;
    email: string;
    handphone: string;
    fax: string;
    departmentID: number;
    departmentName: string;
    positionID: number;
    positionName: string;
    isActive: boolean;
}

export class GetOfficerDivDto implements IGetOfficerDivDto {
    psas: DepartmentDto;
    productGeneral: DepartmentDto;
    finance: DepartmentDto;
    bankRelation: DepartmentDto;
    callCenter: DepartmentDto;
    buildingManagement: DepartmentDto;

    constructor(data?: IGetOfficerDivDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.psas = data["psas"] ? DepartmentDto.fromJS(data["psas"]) : <any>undefined;
            this.productGeneral = data["productGeneral"] ? DepartmentDto.fromJS(data["productGeneral"]) : <any>undefined;
            this.finance = data["finance"] ? DepartmentDto.fromJS(data["finance"]) : <any>undefined;
            this.bankRelation = data["bankRelation"] ? DepartmentDto.fromJS(data["bankRelation"]) : <any>undefined;
            this.callCenter = data["callCenter"] ? DepartmentDto.fromJS(data["callCenter"]) : <any>undefined;
            this.buildingManagement = data["buildingManagement"] ? DepartmentDto.fromJS(data["buildingManagement"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetOfficerDivDto {
        let result = new GetOfficerDivDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["psas"] = this.psas ? this.psas.toJSON() : <any>undefined;
        data["productGeneral"] = this.productGeneral ? this.productGeneral.toJSON() : <any>undefined;
        data["finance"] = this.finance ? this.finance.toJSON() : <any>undefined;
        data["bankRelation"] = this.bankRelation ? this.bankRelation.toJSON() : <any>undefined;
        data["callCenter"] = this.callCenter ? this.callCenter.toJSON() : <any>undefined;
        data["buildingManagement"] = this.buildingManagement ? this.buildingManagement.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetOfficerDivDto {
    psas: DepartmentDto;
    productGeneral: DepartmentDto;
    finance: DepartmentDto;
    bankRelation: DepartmentDto;
    callCenter: DepartmentDto;
    buildingManagement: DepartmentDto;
}

export class DepartmentDto implements IDepartmentDto {
    departmentID: number;
    manager: ManagerDto[];
    staff: StaffDto[];

    constructor(data?: IDepartmentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.departmentID = data["departmentID"];
            if (data["manager"] && data["manager"].constructor === Array) {
                this.manager = [];
                for (let item of data["manager"])
                    this.manager.push(ManagerDto.fromJS(item));
            }
            if (data["staff"] && data["staff"].constructor === Array) {
                this.staff = [];
                for (let item of data["staff"])
                    this.staff.push(StaffDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DepartmentDto {
        let result = new DepartmentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["departmentID"] = this.departmentID;
        if (this.manager && this.manager.constructor === Array) {
            data["manager"] = [];
            for (let item of this.manager)
                data["manager"].push(item.toJSON());
        }
        if (this.staff && this.staff.constructor === Array) {
            data["staff"] = [];
            for (let item of this.staff)
                data["staff"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IDepartmentDto {
    departmentID: number;
    manager: ManagerDto[];
    staff: StaffDto[];
}

export class ManagerDto implements IManagerDto {
    managerID: number;
    managerName: string;

    constructor(data?: IManagerDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.managerID = data["managerID"];
            this.managerName = data["managerName"];
        }
    }

    static fromJS(data: any): ManagerDto {
        let result = new ManagerDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["managerID"] = this.managerID;
        data["managerName"] = this.managerName;
        return data; 
    }
}

export interface IManagerDto {
    managerID: number;
    managerName: string;
}

export class StaffDto implements IStaffDto {
    staffID: number;
    staffName: string;

    constructor(data?: IStaffDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.staffID = data["staffID"];
            this.staffName = data["staffName"];
        }
    }

    static fromJS(data: any): StaffDto {
        let result = new StaffDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["staffID"] = this.staffID;
        data["staffName"] = this.staffName;
        return data; 
    }
}

export interface IStaffDto {
    staffID: number;
    staffName: string;
}

export class InputPointPctDto implements IInputPointPctDto {
    schemaID: number;
    pointPctID: number;
    asUplineNo: string;
    pointPct: number;
    pointKonvert: number;
    statusMemberID: number;
    pointTypeID: number;
    isActive: boolean;

    constructor(data?: IInputPointPctDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.schemaID = data["schemaID"];
            this.pointPctID = data["pointPctID"];
            this.asUplineNo = data["asUplineNo"];
            this.pointPct = data["pointPct"];
            this.pointKonvert = data["pointKonvert"];
            this.statusMemberID = data["statusMemberID"];
            this.pointTypeID = data["pointTypeID"];
            this.isActive = data["isActive"];
        }
    }

    static fromJS(data: any): InputPointPctDto {
        let result = new InputPointPctDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaID"] = this.schemaID;
        data["pointPctID"] = this.pointPctID;
        data["asUplineNo"] = this.asUplineNo;
        data["pointPct"] = this.pointPct;
        data["pointKonvert"] = this.pointKonvert;
        data["statusMemberID"] = this.statusMemberID;
        data["pointTypeID"] = this.pointTypeID;
        data["isActive"] = this.isActive;
        return data; 
    }
}

export interface IInputPointPctDto {
    schemaID: number;
    pointPctID: number;
    asUplineNo: string;
    pointPct: number;
    pointKonvert: number;
    statusMemberID: number;
    pointTypeID: number;
    isActive: boolean;
}

export class ListResultDtoOfGetAllPointPctListDto implements IListResultDtoOfGetAllPointPctListDto {
    items: GetAllPointPctListDto[];

    constructor(data?: IListResultDtoOfGetAllPointPctListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetAllPointPctListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetAllPointPctListDto {
        let result = new ListResultDtoOfGetAllPointPctListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetAllPointPctListDto {
    items: GetAllPointPctListDto[];
}

export class GetAllPointPctListDto implements IGetAllPointPctListDto {
    id: number;
    statusName: string;
    statusCode: string;
    statusMemberID: number;
    pointTypeCode: string;
    pointTypeName: string;
    pointTypeID: number;
    uplineNo: string;
    pointPct: number;
    pointKonvert: number;
    schemaID: number;
    isActive: boolean;

    constructor(data?: IGetAllPointPctListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.statusName = data["statusName"];
            this.statusCode = data["statusCode"];
            this.statusMemberID = data["statusMemberID"];
            this.pointTypeCode = data["pointTypeCode"];
            this.pointTypeName = data["pointTypeName"];
            this.pointTypeID = data["pointTypeID"];
            this.uplineNo = data["uplineNo"];
            this.pointPct = data["pointPct"];
            this.pointKonvert = data["pointKonvert"];
            this.schemaID = data["schemaID"];
            this.isActive = data["isActive"];
        }
    }

    static fromJS(data: any): GetAllPointPctListDto {
        let result = new GetAllPointPctListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["statusName"] = this.statusName;
        data["statusCode"] = this.statusCode;
        data["statusMemberID"] = this.statusMemberID;
        data["pointTypeCode"] = this.pointTypeCode;
        data["pointTypeName"] = this.pointTypeName;
        data["pointTypeID"] = this.pointTypeID;
        data["uplineNo"] = this.uplineNo;
        data["pointPct"] = this.pointPct;
        data["pointKonvert"] = this.pointKonvert;
        data["schemaID"] = this.schemaID;
        data["isActive"] = this.isActive;
        return data; 
    }
}

export interface IGetAllPointPctListDto {
    id: number;
    statusName: string;
    statusCode: string;
    statusMemberID: number;
    pointTypeCode: string;
    pointTypeName: string;
    pointTypeID: number;
    uplineNo: string;
    pointPct: number;
    pointKonvert: number;
    schemaID: number;
    isActive: boolean;
}

export class MsPositionInput implements IMsPositionInput {
    id: number;
    positionName: string;
    positionCode: string;
    departmentID: number;
    isActive: boolean;

    constructor(data?: IMsPositionInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.positionName = data["positionName"];
            this.positionCode = data["positionCode"];
            this.departmentID = data["departmentID"];
            this.isActive = data["isActive"];
        }
    }

    static fromJS(data: any): MsPositionInput {
        let result = new MsPositionInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["positionName"] = this.positionName;
        data["positionCode"] = this.positionCode;
        data["departmentID"] = this.departmentID;
        data["isActive"] = this.isActive;
        return data; 
    }
}

export interface IMsPositionInput {
    id: number;
    positionName: string;
    positionCode: string;
    departmentID: number;
    isActive: boolean;
}

export class ListResultDtoOfGetAllMsPositionListDto implements IListResultDtoOfGetAllMsPositionListDto {
    items: GetAllMsPositionListDto[];

    constructor(data?: IListResultDtoOfGetAllMsPositionListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetAllMsPositionListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetAllMsPositionListDto {
        let result = new ListResultDtoOfGetAllMsPositionListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetAllMsPositionListDto {
    items: GetAllMsPositionListDto[];
}

export class GetAllMsPositionListDto implements IGetAllMsPositionListDto {
    id: number;
    positionName: string;
    positionCode: string;
    departmentID: number;
    departmentCode: string;
    departmentName: string;
    isActive: boolean;

    constructor(data?: IGetAllMsPositionListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.positionName = data["positionName"];
            this.positionCode = data["positionCode"];
            this.departmentID = data["departmentID"];
            this.departmentCode = data["departmentCode"];
            this.departmentName = data["departmentName"];
            this.isActive = data["isActive"];
        }
    }

    static fromJS(data: any): GetAllMsPositionListDto {
        let result = new GetAllMsPositionListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["positionName"] = this.positionName;
        data["positionCode"] = this.positionCode;
        data["departmentID"] = this.departmentID;
        data["departmentCode"] = this.departmentCode;
        data["departmentName"] = this.departmentName;
        data["isActive"] = this.isActive;
        return data; 
    }
}

export interface IGetAllMsPositionListDto {
    id: number;
    positionName: string;
    positionCode: string;
    departmentID: number;
    departmentCode: string;
    departmentName: string;
    isActive: boolean;
}

export class ListResultDtoOfGetMsPositionByDepartmentListDto implements IListResultDtoOfGetMsPositionByDepartmentListDto {
    items: GetMsPositionByDepartmentListDto[];

    constructor(data?: IListResultDtoOfGetMsPositionByDepartmentListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetMsPositionByDepartmentListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetMsPositionByDepartmentListDto {
        let result = new ListResultDtoOfGetMsPositionByDepartmentListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetMsPositionByDepartmentListDto {
    items: GetMsPositionByDepartmentListDto[];
}

export class GetMsPositionByDepartmentListDto implements IGetMsPositionByDepartmentListDto {
    id: number;
    positionName: string;

    constructor(data?: IGetMsPositionByDepartmentListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.positionName = data["positionName"];
        }
    }

    static fromJS(data: any): GetMsPositionByDepartmentListDto {
        let result = new GetMsPositionByDepartmentListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["positionName"] = this.positionName;
        return data; 
    }
}

export interface IGetMsPositionByDepartmentListDto {
    id: number;
    positionName: string;
}

export class CreateOrUpdatePPhRangeListDto implements ICreateOrUpdatePPhRangeListDto {
    schemaID: number;
    pphRangeID: number;
    pphYear: number;
    pphRangeHighBound: number;
    pphRangePct: number;
    tax_code: string;
    tax_code_non_npwp: string;
    pphRangePct_non_npwp: string;
    isActive: boolean;

    constructor(data?: ICreateOrUpdatePPhRangeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.schemaID = data["schemaID"];
            this.pphRangeID = data["pphRangeID"];
            this.pphYear = data["pphYear"];
            this.pphRangeHighBound = data["pphRangeHighBound"];
            this.pphRangePct = data["pphRangePct"];
            this.tax_code = data["tax_code"];
            this.tax_code_non_npwp = data["tax_code_non_npwp"];
            this.pphRangePct_non_npwp = data["pphRangePct_non_npwp"];
            this.isActive = data["isActive"];
        }
    }

    static fromJS(data: any): CreateOrUpdatePPhRangeListDto {
        let result = new CreateOrUpdatePPhRangeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaID"] = this.schemaID;
        data["pphRangeID"] = this.pphRangeID;
        data["pphYear"] = this.pphYear;
        data["pphRangeHighBound"] = this.pphRangeHighBound;
        data["pphRangePct"] = this.pphRangePct;
        data["tax_code"] = this.tax_code;
        data["tax_code_non_npwp"] = this.tax_code_non_npwp;
        data["pphRangePct_non_npwp"] = this.pphRangePct_non_npwp;
        data["isActive"] = this.isActive;
        return data; 
    }
}

export interface ICreateOrUpdatePPhRangeListDto {
    schemaID: number;
    pphRangeID: number;
    pphYear: number;
    pphRangeHighBound: number;
    pphRangePct: number;
    tax_code: string;
    tax_code_non_npwp: string;
    pphRangePct_non_npwp: string;
    isActive: boolean;
}

export class ListResultDtoOfCreateOrUpdatePPhRangeListDto implements IListResultDtoOfCreateOrUpdatePPhRangeListDto {
    items: CreateOrUpdatePPhRangeListDto[];

    constructor(data?: IListResultDtoOfCreateOrUpdatePPhRangeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(CreateOrUpdatePPhRangeListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfCreateOrUpdatePPhRangeListDto {
        let result = new ListResultDtoOfCreateOrUpdatePPhRangeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfCreateOrUpdatePPhRangeListDto {
    items: CreateOrUpdatePPhRangeListDto[];
}

export class CreateOrUpdatePPhRangeInstListDto implements ICreateOrUpdatePPhRangeInstListDto {
    schemaID: number;
    pphRangeIDInst: number;
    pphRangePct: number;
    validDate: moment.Moment;
    taxCode: string;
    isComplete: boolean;
    isActive: boolean;

    constructor(data?: ICreateOrUpdatePPhRangeInstListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.schemaID = data["schemaID"];
            this.pphRangeIDInst = data["pphRangeIDInst"];
            this.pphRangePct = data["pphRangePct"];
            this.validDate = data["validDate"] ? moment(data["validDate"].toString()) : <any>undefined;
            this.taxCode = data["taxCode"];
            this.isComplete = data["isComplete"];
            this.isActive = data["isActive"];
        }
    }

    static fromJS(data: any): CreateOrUpdatePPhRangeInstListDto {
        let result = new CreateOrUpdatePPhRangeInstListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaID"] = this.schemaID;
        data["pphRangeIDInst"] = this.pphRangeIDInst;
        data["pphRangePct"] = this.pphRangePct;
        data["validDate"] = this.validDate ? this.validDate.toISOString() : <any>undefined;
        data["taxCode"] = this.taxCode;
        data["isComplete"] = this.isComplete;
        data["isActive"] = this.isActive;
        return data; 
    }
}

export interface ICreateOrUpdatePPhRangeInstListDto {
    schemaID: number;
    pphRangeIDInst: number;
    pphRangePct: number;
    validDate: moment.Moment;
    taxCode: string;
    isComplete: boolean;
    isActive: boolean;
}

export class ListResultDtoOfCreateOrUpdatePPhRangeInstListDto implements IListResultDtoOfCreateOrUpdatePPhRangeInstListDto {
    items: CreateOrUpdatePPhRangeInstListDto[];

    constructor(data?: IListResultDtoOfCreateOrUpdatePPhRangeInstListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(CreateOrUpdatePPhRangeInstListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfCreateOrUpdatePPhRangeInstListDto {
        let result = new ListResultDtoOfCreateOrUpdatePPhRangeInstListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfCreateOrUpdatePPhRangeInstListDto {
    items: CreateOrUpdatePPhRangeInstListDto[];
}

export class ListResultDtoOfGetAllProductListDto implements IListResultDtoOfGetAllProductListDto {
    items: GetAllProductListDto[];

    constructor(data?: IListResultDtoOfGetAllProductListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetAllProductListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetAllProductListDto {
        let result = new ListResultDtoOfGetAllProductListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetAllProductListDto {
    items: GetAllProductListDto[];
}

export class GetAllProductListDto implements IGetAllProductListDto {
    id: number;
    productCode: string;
    productName: string;
    isActive: boolean;

    constructor(data?: IGetAllProductListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.productCode = data["productCode"];
            this.productName = data["productName"];
            this.isActive = data["isActive"];
        }
    }

    static fromJS(data: any): GetAllProductListDto {
        let result = new GetAllProductListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["productCode"] = this.productCode;
        data["productName"] = this.productName;
        data["isActive"] = this.isActive;
        return data; 
    }
}

export interface IGetAllProductListDto {
    id: number;
    productCode: string;
    productName: string;
    isActive: boolean;
}

export class CreateMsProductDto implements ICreateMsProductDto {
    productCode: string;
    productName: string;
    categoryID: number;
    isActive: boolean;

    constructor(data?: ICreateMsProductDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.productCode = data["productCode"];
            this.productName = data["productName"];
            this.categoryID = data["categoryID"];
            this.isActive = data["isActive"];
        }
    }

    static fromJS(data: any): CreateMsProductDto {
        let result = new CreateMsProductDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productCode"] = this.productCode;
        data["productName"] = this.productName;
        data["categoryID"] = this.categoryID;
        data["isActive"] = this.isActive;
        return data; 
    }
}

export interface ICreateMsProductDto {
    productCode: string;
    productName: string;
    categoryID: number;
    isActive: boolean;
}

export class UpdateMsProductDto implements IUpdateMsProductDto {
    id: number;
    productCode: string;
    productName: string;
    isActive: boolean;

    constructor(data?: IUpdateMsProductDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.productCode = data["productCode"];
            this.productName = data["productName"];
            this.isActive = data["isActive"];
        }
    }

    static fromJS(data: any): UpdateMsProductDto {
        let result = new UpdateMsProductDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["productCode"] = this.productCode;
        data["productName"] = this.productName;
        data["isActive"] = this.isActive;
        return data; 
    }
}

export interface IUpdateMsProductDto {
    id: number;
    productCode: string;
    productName: string;
    isActive: boolean;
}

export class ListResultDtoOfGetProductDropdownListDto implements IListResultDtoOfGetProductDropdownListDto {
    items: GetProductDropdownListDto[];

    constructor(data?: IListResultDtoOfGetProductDropdownListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetProductDropdownListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetProductDropdownListDto {
        let result = new ListResultDtoOfGetProductDropdownListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetProductDropdownListDto {
    items: GetProductDropdownListDto[];
}

export class GetProductDropdownListDto implements IGetProductDropdownListDto {
    productID: number;
    productName: string;

    constructor(data?: IGetProductDropdownListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.productID = data["productID"];
            this.productName = data["productName"];
        }
    }

    static fromJS(data: any): GetProductDropdownListDto {
        let result = new GetProductDropdownListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productID"] = this.productID;
        data["productName"] = this.productName;
        return data; 
    }
}

export interface IGetProductDropdownListDto {
    productID: number;
    productName: string;
}

export class ListResultDtoOfGetAllProjectListDto implements IListResultDtoOfGetAllProjectListDto {
    items: GetAllProjectListDto[];

    constructor(data?: IListResultDtoOfGetAllProjectListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetAllProjectListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetAllProjectListDto {
        let result = new ListResultDtoOfGetAllProjectListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetAllProjectListDto {
    items: GetAllProjectListDto[];
}

export class GetAllProjectListDto implements IGetAllProjectListDto {
    id: number;
    projectCode: string;
    projectName: string;
    cityName: string;
    teritoryName: string;
    isPublish: boolean;
    image: string;
    mapping: string;

    constructor(data?: IGetAllProjectListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.projectCode = data["projectCode"];
            this.projectName = data["projectName"];
            this.cityName = data["cityName"];
            this.teritoryName = data["teritoryName"];
            this.isPublish = data["isPublish"];
            this.image = data["image"];
            this.mapping = data["mapping"];
        }
    }

    static fromJS(data: any): GetAllProjectListDto {
        let result = new GetAllProjectListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["projectCode"] = this.projectCode;
        data["projectName"] = this.projectName;
        data["cityName"] = this.cityName;
        data["teritoryName"] = this.teritoryName;
        data["isPublish"] = this.isPublish;
        data["image"] = this.image;
        data["mapping"] = this.mapping;
        return data; 
    }
}

export interface IGetAllProjectListDto {
    id: number;
    projectCode: string;
    projectName: string;
    cityName: string;
    teritoryName: string;
    isPublish: boolean;
    image: string;
    mapping: string;
}

export class CreateMsProjectInputDto implements ICreateMsProjectInputDto {
    id: number;
    entityID: number;
    projectCode: string;
    projectName: string;
    image: string;
    imageNew: string;
    isPublish: boolean;
    operationalGroup: string;
    taxGroup: string;
    isDMT: boolean;
    dmT_ProjectGroupCode: string;
    dmT_ProjectGroupName: string;
    callCenterManagerID: number;
    callCenterStaffID: number;
    bankRelationManagerID: number;
    bankRelationStaffID: number;
    sadbmid: number;
    sadManagerID: number;
    sadStaffID: number;
    pgManagerID: number;
    pgStaffID: number;
    financeManagerID: number;
    financeStaffID: number;
    startPenaltyDay: number;
    penaltyRate: number;

    constructor(data?: ICreateMsProjectInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.entityID = data["entityID"];
            this.projectCode = data["projectCode"];
            this.projectName = data["projectName"];
            this.image = data["image"];
            this.imageNew = data["imageNew"];
            this.isPublish = data["isPublish"];
            this.operationalGroup = data["operationalGroup"];
            this.taxGroup = data["taxGroup"];
            this.isDMT = data["isDMT"];
            this.dmT_ProjectGroupCode = data["dmT_ProjectGroupCode"];
            this.dmT_ProjectGroupName = data["dmT_ProjectGroupName"];
            this.callCenterManagerID = data["callCenterManagerID"];
            this.callCenterStaffID = data["callCenterStaffID"];
            this.bankRelationManagerID = data["bankRelationManagerID"];
            this.bankRelationStaffID = data["bankRelationStaffID"];
            this.sadbmid = data["sadbmid"];
            this.sadManagerID = data["sadManagerID"];
            this.sadStaffID = data["sadStaffID"];
            this.pgManagerID = data["pgManagerID"];
            this.pgStaffID = data["pgStaffID"];
            this.financeManagerID = data["financeManagerID"];
            this.financeStaffID = data["financeStaffID"];
            this.startPenaltyDay = data["startPenaltyDay"];
            this.penaltyRate = data["penaltyRate"];
        }
    }

    static fromJS(data: any): CreateMsProjectInputDto {
        let result = new CreateMsProjectInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["entityID"] = this.entityID;
        data["projectCode"] = this.projectCode;
        data["projectName"] = this.projectName;
        data["image"] = this.image;
        data["imageNew"] = this.imageNew;
        data["isPublish"] = this.isPublish;
        data["operationalGroup"] = this.operationalGroup;
        data["taxGroup"] = this.taxGroup;
        data["isDMT"] = this.isDMT;
        data["dmT_ProjectGroupCode"] = this.dmT_ProjectGroupCode;
        data["dmT_ProjectGroupName"] = this.dmT_ProjectGroupName;
        data["callCenterManagerID"] = this.callCenterManagerID;
        data["callCenterStaffID"] = this.callCenterStaffID;
        data["bankRelationManagerID"] = this.bankRelationManagerID;
        data["bankRelationStaffID"] = this.bankRelationStaffID;
        data["sadbmid"] = this.sadbmid;
        data["sadManagerID"] = this.sadManagerID;
        data["sadStaffID"] = this.sadStaffID;
        data["pgManagerID"] = this.pgManagerID;
        data["pgStaffID"] = this.pgStaffID;
        data["financeManagerID"] = this.financeManagerID;
        data["financeStaffID"] = this.financeStaffID;
        data["startPenaltyDay"] = this.startPenaltyDay;
        data["penaltyRate"] = this.penaltyRate;
        return data; 
    }
}

export interface ICreateMsProjectInputDto {
    id: number;
    entityID: number;
    projectCode: string;
    projectName: string;
    image: string;
    imageNew: string;
    isPublish: boolean;
    operationalGroup: string;
    taxGroup: string;
    isDMT: boolean;
    dmT_ProjectGroupCode: string;
    dmT_ProjectGroupName: string;
    callCenterManagerID: number;
    callCenterStaffID: number;
    bankRelationManagerID: number;
    bankRelationStaffID: number;
    sadbmid: number;
    sadManagerID: number;
    sadStaffID: number;
    pgManagerID: number;
    pgStaffID: number;
    financeManagerID: number;
    financeStaffID: number;
    startPenaltyDay: number;
    penaltyRate: number;
}

export class GetDetailMsProjectListDto implements IGetDetailMsProjectListDto {
    projectInformation: ProjectInformationListDto;
    picInformation: PICInformationListDto;

    constructor(data?: IGetDetailMsProjectListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.projectInformation = data["projectInformation"] ? ProjectInformationListDto.fromJS(data["projectInformation"]) : <any>undefined;
            this.picInformation = data["picInformation"] ? PICInformationListDto.fromJS(data["picInformation"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetDetailMsProjectListDto {
        let result = new GetDetailMsProjectListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["projectInformation"] = this.projectInformation ? this.projectInformation.toJSON() : <any>undefined;
        data["picInformation"] = this.picInformation ? this.picInformation.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetDetailMsProjectListDto {
    projectInformation: ProjectInformationListDto;
    picInformation: PICInformationListDto;
}

export class ProjectInformationListDto implements IProjectInformationListDto {
    entityID: number;
    entityName: string;
    isDMT: boolean;
    projectGroupCode: string;
    projectGroupName: string;
    projectCode: string;
    projectName: string;
    image: string;
    isPublish: boolean;
    penaltyRate: number;
    startPenaltyDay: number;
    operationalGroupEntityCode: string;
    operationalGroup: string;
    taxGroupEntityCode: string;
    taxGroup: string;

    constructor(data?: IProjectInformationListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.entityID = data["entityID"];
            this.entityName = data["entityName"];
            this.isDMT = data["isDMT"];
            this.projectGroupCode = data["projectGroupCode"];
            this.projectGroupName = data["projectGroupName"];
            this.projectCode = data["projectCode"];
            this.projectName = data["projectName"];
            this.image = data["image"];
            this.isPublish = data["isPublish"];
            this.penaltyRate = data["penaltyRate"];
            this.startPenaltyDay = data["startPenaltyDay"];
            this.operationalGroupEntityCode = data["operationalGroupEntityCode"];
            this.operationalGroup = data["operationalGroup"];
            this.taxGroupEntityCode = data["taxGroupEntityCode"];
            this.taxGroup = data["taxGroup"];
        }
    }

    static fromJS(data: any): ProjectInformationListDto {
        let result = new ProjectInformationListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["entityID"] = this.entityID;
        data["entityName"] = this.entityName;
        data["isDMT"] = this.isDMT;
        data["projectGroupCode"] = this.projectGroupCode;
        data["projectGroupName"] = this.projectGroupName;
        data["projectCode"] = this.projectCode;
        data["projectName"] = this.projectName;
        data["image"] = this.image;
        data["isPublish"] = this.isPublish;
        data["penaltyRate"] = this.penaltyRate;
        data["startPenaltyDay"] = this.startPenaltyDay;
        data["operationalGroupEntityCode"] = this.operationalGroupEntityCode;
        data["operationalGroup"] = this.operationalGroup;
        data["taxGroupEntityCode"] = this.taxGroupEntityCode;
        data["taxGroup"] = this.taxGroup;
        return data; 
    }
}

export interface IProjectInformationListDto {
    entityID: number;
    entityName: string;
    isDMT: boolean;
    projectGroupCode: string;
    projectGroupName: string;
    projectCode: string;
    projectName: string;
    image: string;
    isPublish: boolean;
    penaltyRate: number;
    startPenaltyDay: number;
    operationalGroupEntityCode: string;
    operationalGroup: string;
    taxGroupEntityCode: string;
    taxGroup: string;
}

export class PICInformationListDto implements IPICInformationListDto {
    psas: PSASListDto;
    pg: PGListDto;
    finance: FinanceListDto;
    bankRelation: BankRelationListDto;
    callCenter: CallCenterListDto;
    buildingManager: BuildingManagerListDto;

    constructor(data?: IPICInformationListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.psas = data["psas"] ? PSASListDto.fromJS(data["psas"]) : <any>undefined;
            this.pg = data["pg"] ? PGListDto.fromJS(data["pg"]) : <any>undefined;
            this.finance = data["finance"] ? FinanceListDto.fromJS(data["finance"]) : <any>undefined;
            this.bankRelation = data["bankRelation"] ? BankRelationListDto.fromJS(data["bankRelation"]) : <any>undefined;
            this.callCenter = data["callCenter"] ? CallCenterListDto.fromJS(data["callCenter"]) : <any>undefined;
            this.buildingManager = data["buildingManager"] ? BuildingManagerListDto.fromJS(data["buildingManager"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PICInformationListDto {
        let result = new PICInformationListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["psas"] = this.psas ? this.psas.toJSON() : <any>undefined;
        data["pg"] = this.pg ? this.pg.toJSON() : <any>undefined;
        data["finance"] = this.finance ? this.finance.toJSON() : <any>undefined;
        data["bankRelation"] = this.bankRelation ? this.bankRelation.toJSON() : <any>undefined;
        data["callCenter"] = this.callCenter ? this.callCenter.toJSON() : <any>undefined;
        data["buildingManager"] = this.buildingManager ? this.buildingManager.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IPICInformationListDto {
    psas: PSASListDto;
    pg: PGListDto;
    finance: FinanceListDto;
    bankRelation: BankRelationListDto;
    callCenter: CallCenterListDto;
    buildingManager: BuildingManagerListDto;
}

export class PSASListDto implements IPSASListDto {
    managerID: number;
    managerName: string;
    staffID: number;
    staffName: string;
    departementWhatsapp: string;
    departementEmail: string;
    officerPhone: string;

    constructor(data?: IPSASListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.managerID = data["managerID"];
            this.managerName = data["managerName"];
            this.staffID = data["staffID"];
            this.staffName = data["staffName"];
            this.departementWhatsapp = data["departementWhatsapp"];
            this.departementEmail = data["departementEmail"];
            this.officerPhone = data["officerPhone"];
        }
    }

    static fromJS(data: any): PSASListDto {
        let result = new PSASListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["managerID"] = this.managerID;
        data["managerName"] = this.managerName;
        data["staffID"] = this.staffID;
        data["staffName"] = this.staffName;
        data["departementWhatsapp"] = this.departementWhatsapp;
        data["departementEmail"] = this.departementEmail;
        data["officerPhone"] = this.officerPhone;
        return data; 
    }
}

export interface IPSASListDto {
    managerID: number;
    managerName: string;
    staffID: number;
    staffName: string;
    departementWhatsapp: string;
    departementEmail: string;
    officerPhone: string;
}

export class PGListDto implements IPGListDto {
    picID: number;
    pic: string;
    departementWhatsapp: string;
    departementEmail: string;
    officerPhone: string;

    constructor(data?: IPGListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.picID = data["picID"];
            this.pic = data["pic"];
            this.departementWhatsapp = data["departementWhatsapp"];
            this.departementEmail = data["departementEmail"];
            this.officerPhone = data["officerPhone"];
        }
    }

    static fromJS(data: any): PGListDto {
        let result = new PGListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["picID"] = this.picID;
        data["pic"] = this.pic;
        data["departementWhatsapp"] = this.departementWhatsapp;
        data["departementEmail"] = this.departementEmail;
        data["officerPhone"] = this.officerPhone;
        return data; 
    }
}

export interface IPGListDto {
    picID: number;
    pic: string;
    departementWhatsapp: string;
    departementEmail: string;
    officerPhone: string;
}

export class FinanceListDto implements IFinanceListDto {
    managerID: number;
    managerName: string;
    staffID: number;
    staffName: string;
    departementWhatsapp: string;
    departementEmail: string;
    officerPhone: string;

    constructor(data?: IFinanceListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.managerID = data["managerID"];
            this.managerName = data["managerName"];
            this.staffID = data["staffID"];
            this.staffName = data["staffName"];
            this.departementWhatsapp = data["departementWhatsapp"];
            this.departementEmail = data["departementEmail"];
            this.officerPhone = data["officerPhone"];
        }
    }

    static fromJS(data: any): FinanceListDto {
        let result = new FinanceListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["managerID"] = this.managerID;
        data["managerName"] = this.managerName;
        data["staffID"] = this.staffID;
        data["staffName"] = this.staffName;
        data["departementWhatsapp"] = this.departementWhatsapp;
        data["departementEmail"] = this.departementEmail;
        data["officerPhone"] = this.officerPhone;
        return data; 
    }
}

export interface IFinanceListDto {
    managerID: number;
    managerName: string;
    staffID: number;
    staffName: string;
    departementWhatsapp: string;
    departementEmail: string;
    officerPhone: string;
}

export class BankRelationListDto implements IBankRelationListDto {
    managerID: number;
    managerName: string;
    staffID: number;
    staffName: string;
    departementWhatsapp: string;
    departementEmail: string;
    officerPhone: string;

    constructor(data?: IBankRelationListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.managerID = data["managerID"];
            this.managerName = data["managerName"];
            this.staffID = data["staffID"];
            this.staffName = data["staffName"];
            this.departementWhatsapp = data["departementWhatsapp"];
            this.departementEmail = data["departementEmail"];
            this.officerPhone = data["officerPhone"];
        }
    }

    static fromJS(data: any): BankRelationListDto {
        let result = new BankRelationListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["managerID"] = this.managerID;
        data["managerName"] = this.managerName;
        data["staffID"] = this.staffID;
        data["staffName"] = this.staffName;
        data["departementWhatsapp"] = this.departementWhatsapp;
        data["departementEmail"] = this.departementEmail;
        data["officerPhone"] = this.officerPhone;
        return data; 
    }
}

export interface IBankRelationListDto {
    managerID: number;
    managerName: string;
    staffID: number;
    staffName: string;
    departementWhatsapp: string;
    departementEmail: string;
    officerPhone: string;
}

export class CallCenterListDto implements ICallCenterListDto {
    managerID: number;
    managerName: string;
    staffID: number;
    staffName: string;
    departementWhatsapp: string;
    departementEmail: string;
    officerPhone: string;

    constructor(data?: ICallCenterListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.managerID = data["managerID"];
            this.managerName = data["managerName"];
            this.staffID = data["staffID"];
            this.staffName = data["staffName"];
            this.departementWhatsapp = data["departementWhatsapp"];
            this.departementEmail = data["departementEmail"];
            this.officerPhone = data["officerPhone"];
        }
    }

    static fromJS(data: any): CallCenterListDto {
        let result = new CallCenterListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["managerID"] = this.managerID;
        data["managerName"] = this.managerName;
        data["staffID"] = this.staffID;
        data["staffName"] = this.staffName;
        data["departementWhatsapp"] = this.departementWhatsapp;
        data["departementEmail"] = this.departementEmail;
        data["officerPhone"] = this.officerPhone;
        return data; 
    }
}

export interface ICallCenterListDto {
    managerID: number;
    managerName: string;
    staffID: number;
    staffName: string;
    departementWhatsapp: string;
    departementEmail: string;
    officerPhone: string;
}

export class BuildingManagerListDto implements IBuildingManagerListDto {
    managerID: number;
    managerName: string;

    constructor(data?: IBuildingManagerListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.managerID = data["managerID"];
            this.managerName = data["managerName"];
        }
    }

    static fromJS(data: any): BuildingManagerListDto {
        let result = new BuildingManagerListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["managerID"] = this.managerID;
        data["managerName"] = this.managerName;
        return data; 
    }
}

export interface IBuildingManagerListDto {
    managerID: number;
    managerName: string;
}

export class GetUpdateDmtValueInputDto implements IGetUpdateDmtValueInputDto {
    query: string;
    serverName: string;
    dbName: string;
    credentialUser: string;
    credentialPass: string;

    constructor(data?: IGetUpdateDmtValueInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.query = data["query"];
            this.serverName = data["serverName"];
            this.dbName = data["dbName"];
            this.credentialUser = data["credentialUser"];
            this.credentialPass = data["credentialPass"];
        }
    }

    static fromJS(data: any): GetUpdateDmtValueInputDto {
        let result = new GetUpdateDmtValueInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["query"] = this.query;
        data["serverName"] = this.serverName;
        data["dbName"] = this.dbName;
        data["credentialUser"] = this.credentialUser;
        data["credentialPass"] = this.credentialPass;
        return data; 
    }
}

export interface IGetUpdateDmtValueInputDto {
    query: string;
    serverName: string;
    dbName: string;
    credentialUser: string;
    credentialPass: string;
}

export class GetMappingDMTListDto implements IGetMappingDMTListDto {
    projectName: string;
    projectCode: string;

    constructor(data?: IGetMappingDMTListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.projectName = data["projectName"];
            this.projectCode = data["projectCode"];
        }
    }

    static fromJS(data: any): GetMappingDMTListDto {
        let result = new GetMappingDMTListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["projectName"] = this.projectName;
        data["projectCode"] = this.projectCode;
        return data; 
    }
}

export interface IGetMappingDMTListDto {
    projectName: string;
    projectCode: string;
}

export class GetMappingCorsecListDto implements IGetMappingCorsecListDto {
    kodePerusahaan: string;
    namaPerusahaan: string;

    constructor(data?: IGetMappingCorsecListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.kodePerusahaan = data["kodePerusahaan"];
            this.namaPerusahaan = data["namaPerusahaan"];
        }
    }

    static fromJS(data: any): GetMappingCorsecListDto {
        let result = new GetMappingCorsecListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["kodePerusahaan"] = this.kodePerusahaan;
        data["namaPerusahaan"] = this.namaPerusahaan;
        return data; 
    }
}

export interface IGetMappingCorsecListDto {
    kodePerusahaan: string;
    namaPerusahaan: string;
}

export class CreateMsRenovationInput implements ICreateMsRenovationInput {
    projectID: number;
    renovationName: string;
    renovationCode: string;
    detailName: string;
    isActive: boolean;

    constructor(data?: ICreateMsRenovationInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.projectID = data["projectID"];
            this.renovationName = data["renovationName"];
            this.renovationCode = data["renovationCode"];
            this.detailName = data["detailName"];
            this.isActive = data["isActive"];
        }
    }

    static fromJS(data: any): CreateMsRenovationInput {
        let result = new CreateMsRenovationInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["projectID"] = this.projectID;
        data["renovationName"] = this.renovationName;
        data["renovationCode"] = this.renovationCode;
        data["detailName"] = this.detailName;
        data["isActive"] = this.isActive;
        return data; 
    }
}

export interface ICreateMsRenovationInput {
    projectID: number;
    renovationName: string;
    renovationCode: string;
    detailName: string;
    isActive: boolean;
}

export class ListResultDtoOfGetAllMsRenovationListDto implements IListResultDtoOfGetAllMsRenovationListDto {
    items: GetAllMsRenovationListDto[];

    constructor(data?: IListResultDtoOfGetAllMsRenovationListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetAllMsRenovationListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetAllMsRenovationListDto {
        let result = new ListResultDtoOfGetAllMsRenovationListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetAllMsRenovationListDto {
    items: GetAllMsRenovationListDto[];
}

export class GetAllMsRenovationListDto implements IGetAllMsRenovationListDto {
    id: number;
    projectID: number;
    renovationName: string;
    renovationCode: string;
    detail: string;
    isActive: boolean;
    projectName: string;

    constructor(data?: IGetAllMsRenovationListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.projectID = data["projectID"];
            this.renovationName = data["renovationName"];
            this.renovationCode = data["renovationCode"];
            this.detail = data["detail"];
            this.isActive = data["isActive"];
            this.projectName = data["projectName"];
        }
    }

    static fromJS(data: any): GetAllMsRenovationListDto {
        let result = new GetAllMsRenovationListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["projectID"] = this.projectID;
        data["renovationName"] = this.renovationName;
        data["renovationCode"] = this.renovationCode;
        data["detail"] = this.detail;
        data["isActive"] = this.isActive;
        data["projectName"] = this.projectName;
        return data; 
    }
}

export interface IGetAllMsRenovationListDto {
    id: number;
    projectID: number;
    renovationName: string;
    renovationCode: string;
    detail: string;
    isActive: boolean;
    projectName: string;
}

export class ListResultDtoOfGetLkItemListDto implements IListResultDtoOfGetLkItemListDto {
    items: GetLkItemListDto[];

    constructor(data?: IListResultDtoOfGetLkItemListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetLkItemListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetLkItemListDto {
        let result = new ListResultDtoOfGetLkItemListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetLkItemListDto {
    items: GetLkItemListDto[];
}

export class GetLkItemListDto implements IGetLkItemListDto {
    id: number;
    itemCode: string;
    shortName: string;

    constructor(data?: IGetLkItemListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.itemCode = data["itemCode"];
            this.shortName = data["shortName"];
        }
    }

    static fromJS(data: any): GetLkItemListDto {
        let result = new GetLkItemListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["itemCode"] = this.itemCode;
        data["shortName"] = this.shortName;
        return data; 
    }
}

export interface IGetLkItemListDto {
    id: number;
    itemCode: string;
    shortName: string;
}

export class UpdateMsRenovationInput implements IUpdateMsRenovationInput {
    id: number;
    projectID: number;
    renovationName: string;
    renovationCode: string;
    detailName: string;
    detailNameNew: string;
    detailNameToDelete: string;
    isActive: boolean;

    constructor(data?: IUpdateMsRenovationInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.projectID = data["projectID"];
            this.renovationName = data["renovationName"];
            this.renovationCode = data["renovationCode"];
            this.detailName = data["detailName"];
            this.detailNameNew = data["detailNameNew"];
            this.detailNameToDelete = data["detailNameToDelete"];
            this.isActive = data["isActive"];
        }
    }

    static fromJS(data: any): UpdateMsRenovationInput {
        let result = new UpdateMsRenovationInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["projectID"] = this.projectID;
        data["renovationName"] = this.renovationName;
        data["renovationCode"] = this.renovationCode;
        data["detailName"] = this.detailName;
        data["detailNameNew"] = this.detailNameNew;
        data["detailNameToDelete"] = this.detailNameToDelete;
        data["isActive"] = this.isActive;
        return data; 
    }
}

export interface IUpdateMsRenovationInput {
    id: number;
    projectID: number;
    renovationName: string;
    renovationCode: string;
    detailName: string;
    detailNameNew: string;
    detailNameToDelete: string;
    isActive: boolean;
}

export class PagedResultDtoOfGetAllMsSchemaListDto implements IPagedResultDtoOfGetAllMsSchemaListDto {
    totalCount: number;
    items: GetAllMsSchemaListDto[];

    constructor(data?: IPagedResultDtoOfGetAllMsSchemaListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetAllMsSchemaListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfGetAllMsSchemaListDto {
        let result = new PagedResultDtoOfGetAllMsSchemaListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfGetAllMsSchemaListDto {
    totalCount: number;
    items: GetAllMsSchemaListDto[];
}

export class GetAllMsSchemaListDto implements IGetAllMsSchemaListDto {
    schemaID: number;
    scmCode: string;
    scmName: string;
    dueDateComm: number;
    isActive: boolean;

    constructor(data?: IGetAllMsSchemaListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.schemaID = data["schemaID"];
            this.scmCode = data["scmCode"];
            this.scmName = data["scmName"];
            this.dueDateComm = data["dueDateComm"];
            this.isActive = data["isActive"];
        }
    }

    static fromJS(data: any): GetAllMsSchemaListDto {
        let result = new GetAllMsSchemaListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaID"] = this.schemaID;
        data["scmCode"] = this.scmCode;
        data["scmName"] = this.scmName;
        data["dueDateComm"] = this.dueDateComm;
        data["isActive"] = this.isActive;
        return data; 
    }
}

export interface IGetAllMsSchemaListDto {
    schemaID: number;
    scmCode: string;
    scmName: string;
    dueDateComm: number;
    isActive: boolean;
}

export class GetMsSchemaRequirementListDto implements IGetMsSchemaRequirementListDto {
    schemaRequirementID: number;
    reqNo: number;
    reqDesc: string;
    pctPaid: number;

    constructor(data?: IGetMsSchemaRequirementListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.schemaRequirementID = data["schemaRequirementID"];
            this.reqNo = data["reqNo"];
            this.reqDesc = data["reqDesc"];
            this.pctPaid = data["pctPaid"];
        }
    }

    static fromJS(data: any): GetMsSchemaRequirementListDto {
        let result = new GetMsSchemaRequirementListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaRequirementID"] = this.schemaRequirementID;
        data["reqNo"] = this.reqNo;
        data["reqDesc"] = this.reqDesc;
        data["pctPaid"] = this.pctPaid;
        return data; 
    }
}

export interface IGetMsSchemaRequirementListDto {
    schemaRequirementID: number;
    reqNo: number;
    reqDesc: string;
    pctPaid: number;
}

export class GetLkCommTypeListDto implements IGetLkCommTypeListDto {
    commTypeID: number;
    commTypeCode: string;
    commTypeName: string;

    constructor(data?: IGetLkCommTypeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.commTypeID = data["commTypeID"];
            this.commTypeCode = data["commTypeCode"];
            this.commTypeName = data["commTypeName"];
        }
    }

    static fromJS(data: any): GetLkCommTypeListDto {
        let result = new GetLkCommTypeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["commTypeID"] = this.commTypeID;
        data["commTypeCode"] = this.commTypeCode;
        data["commTypeName"] = this.commTypeName;
        return data; 
    }
}

export interface IGetLkCommTypeListDto {
    commTypeID: number;
    commTypeCode: string;
    commTypeName: string;
}

export class GetMsStatusMemberListDto implements IGetMsStatusMemberListDto {
    statusMemberID: number;
    statusCode: string;
    statusName: string;
    pointMin: number;
    pointToKeepStatus: number;
    reviewTimeYear: number;
    reviewStartMonth: number;
    statusStar: string;

    constructor(data?: IGetMsStatusMemberListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.statusMemberID = data["statusMemberID"];
            this.statusCode = data["statusCode"];
            this.statusName = data["statusName"];
            this.pointMin = data["pointMin"];
            this.pointToKeepStatus = data["pointToKeepStatus"];
            this.reviewTimeYear = data["reviewTimeYear"];
            this.reviewStartMonth = data["reviewStartMonth"];
            this.statusStar = data["statusStar"];
        }
    }

    static fromJS(data: any): GetMsStatusMemberListDto {
        let result = new GetMsStatusMemberListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["statusMemberID"] = this.statusMemberID;
        data["statusCode"] = this.statusCode;
        data["statusName"] = this.statusName;
        data["pointMin"] = this.pointMin;
        data["pointToKeepStatus"] = this.pointToKeepStatus;
        data["reviewTimeYear"] = this.reviewTimeYear;
        data["reviewStartMonth"] = this.reviewStartMonth;
        data["statusStar"] = this.statusStar;
        return data; 
    }
}

export interface IGetMsStatusMemberListDto {
    statusMemberID: number;
    statusCode: string;
    statusName: string;
    pointMin: number;
    pointToKeepStatus: number;
    reviewTimeYear: number;
    reviewStartMonth: number;
    statusStar: string;
}

export class GetLkPointTypeListDto implements IGetLkPointTypeListDto {
    pointTypeID: number;
    pointTypeCode: string;
    pointTypeName: string;

    constructor(data?: IGetLkPointTypeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.pointTypeID = data["pointTypeID"];
            this.pointTypeCode = data["pointTypeCode"];
            this.pointTypeName = data["pointTypeName"];
        }
    }

    static fromJS(data: any): GetLkPointTypeListDto {
        let result = new GetLkPointTypeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pointTypeID"] = this.pointTypeID;
        data["pointTypeCode"] = this.pointTypeCode;
        data["pointTypeName"] = this.pointTypeName;
        return data; 
    }
}

export interface IGetLkPointTypeListDto {
    pointTypeID: number;
    pointTypeCode: string;
    pointTypeName: string;
}

export class CreateMsSchemaRequirementInputDto implements ICreateMsSchemaRequirementInputDto {
    schemaID: number;
    setCommReq: SetCommReq[];

    constructor(data?: ICreateMsSchemaRequirementInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.schemaID = data["schemaID"];
            if (data["setCommReq"] && data["setCommReq"].constructor === Array) {
                this.setCommReq = [];
                for (let item of data["setCommReq"])
                    this.setCommReq.push(SetCommReq.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateMsSchemaRequirementInputDto {
        let result = new CreateMsSchemaRequirementInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaID"] = this.schemaID;
        if (this.setCommReq && this.setCommReq.constructor === Array) {
            data["setCommReq"] = [];
            for (let item of this.setCommReq)
                data["setCommReq"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICreateMsSchemaRequirementInputDto {
    schemaID: number;
    setCommReq: SetCommReq[];
}

export class SetCommReq implements ISetCommReq {
    schemaRequirementID: number;
    reqNo: number;
    reqDesc: string;
    pctPaid: number;
    isComplete: boolean;

    constructor(data?: ISetCommReq) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.schemaRequirementID = data["schemaRequirementID"];
            this.reqNo = data["reqNo"];
            this.reqDesc = data["reqDesc"];
            this.pctPaid = data["pctPaid"];
            this.isComplete = data["isComplete"];
        }
    }

    static fromJS(data: any): SetCommReq {
        let result = new SetCommReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaRequirementID"] = this.schemaRequirementID;
        data["reqNo"] = this.reqNo;
        data["reqDesc"] = this.reqDesc;
        data["pctPaid"] = this.pctPaid;
        data["isComplete"] = this.isComplete;
        return data; 
    }
}

export interface ISetCommReq {
    schemaRequirementID: number;
    reqNo: number;
    reqDesc: string;
    pctPaid: number;
    isComplete: boolean;
}

export class CreateMsStatusMemberInputDto implements ICreateMsStatusMemberInputDto {
    schemaID: number;
    setStatusMember: SetStatusMember[];

    constructor(data?: ICreateMsStatusMemberInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.schemaID = data["schemaID"];
            if (data["setStatusMember"] && data["setStatusMember"].constructor === Array) {
                this.setStatusMember = [];
                for (let item of data["setStatusMember"])
                    this.setStatusMember.push(SetStatusMember.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateMsStatusMemberInputDto {
        let result = new CreateMsStatusMemberInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaID"] = this.schemaID;
        if (this.setStatusMember && this.setStatusMember.constructor === Array) {
            data["setStatusMember"] = [];
            for (let item of this.setStatusMember)
                data["setStatusMember"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICreateMsStatusMemberInputDto {
    schemaID: number;
    setStatusMember: SetStatusMember[];
}

export class SetStatusMember implements ISetStatusMember {
    statusMemberID: number;
    statusCode: string;
    statusName: string;
    pointMin: number;
    pointToKeepStatus: number;
    reviewTimeYear: number;
    reviewStartMonth: number;
    statusStar: string;
    isComplete: boolean;

    constructor(data?: ISetStatusMember) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.statusMemberID = data["statusMemberID"];
            this.statusCode = data["statusCode"];
            this.statusName = data["statusName"];
            this.pointMin = data["pointMin"];
            this.pointToKeepStatus = data["pointToKeepStatus"];
            this.reviewTimeYear = data["reviewTimeYear"];
            this.reviewStartMonth = data["reviewStartMonth"];
            this.statusStar = data["statusStar"];
            this.isComplete = data["isComplete"];
        }
    }

    static fromJS(data: any): SetStatusMember {
        let result = new SetStatusMember();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["statusMemberID"] = this.statusMemberID;
        data["statusCode"] = this.statusCode;
        data["statusName"] = this.statusName;
        data["pointMin"] = this.pointMin;
        data["pointToKeepStatus"] = this.pointToKeepStatus;
        data["reviewTimeYear"] = this.reviewTimeYear;
        data["reviewStartMonth"] = this.reviewStartMonth;
        data["statusStar"] = this.statusStar;
        data["isComplete"] = this.isComplete;
        return data; 
    }
}

export interface ISetStatusMember {
    statusMemberID: number;
    statusCode: string;
    statusName: string;
    pointMin: number;
    pointToKeepStatus: number;
    reviewTimeYear: number;
    reviewStartMonth: number;
    statusStar: string;
    isComplete: boolean;
}

export class CreateOrUpdateSetSchemaInputDto implements ICreateOrUpdateSetSchemaInputDto {
    schemaID: number;
    scmCode: string;
    scmName: string;
    upline: number;
    budgetPct: number;
    dueDateComm: number;
    uploadDocument: string;
    uploadDocumentDelete: string;
    isComplete: boolean;
    isActive: boolean;

    constructor(data?: ICreateOrUpdateSetSchemaInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.schemaID = data["schemaID"];
            this.scmCode = data["scmCode"];
            this.scmName = data["scmName"];
            this.upline = data["upline"];
            this.budgetPct = data["budgetPct"];
            this.dueDateComm = data["dueDateComm"];
            this.uploadDocument = data["uploadDocument"];
            this.uploadDocumentDelete = data["uploadDocumentDelete"];
            this.isComplete = data["isComplete"];
            this.isActive = data["isActive"];
        }
    }

    static fromJS(data: any): CreateOrUpdateSetSchemaInputDto {
        let result = new CreateOrUpdateSetSchemaInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaID"] = this.schemaID;
        data["scmCode"] = this.scmCode;
        data["scmName"] = this.scmName;
        data["upline"] = this.upline;
        data["budgetPct"] = this.budgetPct;
        data["dueDateComm"] = this.dueDateComm;
        data["uploadDocument"] = this.uploadDocument;
        data["uploadDocumentDelete"] = this.uploadDocumentDelete;
        data["isComplete"] = this.isComplete;
        data["isActive"] = this.isActive;
        return data; 
    }
}

export interface ICreateOrUpdateSetSchemaInputDto {
    schemaID: number;
    scmCode: string;
    scmName: string;
    upline: number;
    budgetPct: number;
    dueDateComm: number;
    uploadDocument: string;
    uploadDocumentDelete: string;
    isComplete: boolean;
    isActive: boolean;
}

export class CreateOrUpdateSetPointTypeInputDto implements ICreateOrUpdateSetPointTypeInputDto {
    schemaID: number;
    setPointType: SetPointType[];

    constructor(data?: ICreateOrUpdateSetPointTypeInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.schemaID = data["schemaID"];
            if (data["setPointType"] && data["setPointType"].constructor === Array) {
                this.setPointType = [];
                for (let item of data["setPointType"])
                    this.setPointType.push(SetPointType.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateOrUpdateSetPointTypeInputDto {
        let result = new CreateOrUpdateSetPointTypeInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaID"] = this.schemaID;
        if (this.setPointType && this.setPointType.constructor === Array) {
            data["setPointType"] = [];
            for (let item of this.setPointType)
                data["setPointType"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICreateOrUpdateSetPointTypeInputDto {
    schemaID: number;
    setPointType: SetPointType[];
}

export class SetPointType implements ISetPointType {
    pointTypeID: number;
    pointTypeCode: string;
    pointTypeName: string;
    isComplete: boolean;

    constructor(data?: ISetPointType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.pointTypeID = data["pointTypeID"];
            this.pointTypeCode = data["pointTypeCode"];
            this.pointTypeName = data["pointTypeName"];
            this.isComplete = data["isComplete"];
        }
    }

    static fromJS(data: any): SetPointType {
        let result = new SetPointType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pointTypeID"] = this.pointTypeID;
        data["pointTypeCode"] = this.pointTypeCode;
        data["pointTypeName"] = this.pointTypeName;
        data["isComplete"] = this.isComplete;
        return data; 
    }
}

export interface ISetPointType {
    pointTypeID: number;
    pointTypeCode: string;
    pointTypeName: string;
    isComplete: boolean;
}

export class GetMsCommPctListDto implements IGetMsCommPctListDto {
    commPctID: number;
    validDate: moment.Moment;
    commTypeID: number;
    commTypeCode: string;
    commTypeName: string;
    statusMemberID: number;
    statusCode: string;
    statusName: string;
    uplineNo: string;
    commPctPaid: number;
    nominal: number;

    constructor(data?: IGetMsCommPctListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.commPctID = data["commPctID"];
            this.validDate = data["validDate"] ? moment(data["validDate"].toString()) : <any>undefined;
            this.commTypeID = data["commTypeID"];
            this.commTypeCode = data["commTypeCode"];
            this.commTypeName = data["commTypeName"];
            this.statusMemberID = data["statusMemberID"];
            this.statusCode = data["statusCode"];
            this.statusName = data["statusName"];
            this.uplineNo = data["uplineNo"];
            this.commPctPaid = data["commPctPaid"];
            this.nominal = data["nominal"];
        }
    }

    static fromJS(data: any): GetMsCommPctListDto {
        let result = new GetMsCommPctListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["commPctID"] = this.commPctID;
        data["validDate"] = this.validDate ? this.validDate.toISOString() : <any>undefined;
        data["commTypeID"] = this.commTypeID;
        data["commTypeCode"] = this.commTypeCode;
        data["commTypeName"] = this.commTypeName;
        data["statusMemberID"] = this.statusMemberID;
        data["statusCode"] = this.statusCode;
        data["statusName"] = this.statusName;
        data["uplineNo"] = this.uplineNo;
        data["commPctPaid"] = this.commPctPaid;
        data["nominal"] = this.nominal;
        return data; 
    }
}

export interface IGetMsCommPctListDto {
    commPctID: number;
    validDate: moment.Moment;
    commTypeID: number;
    commTypeCode: string;
    commTypeName: string;
    statusMemberID: number;
    statusCode: string;
    statusName: string;
    uplineNo: string;
    commPctPaid: number;
    nominal: number;
}

export class CreateOrUpdateSetCommTypeInputDto implements ICreateOrUpdateSetCommTypeInputDto {
    schemaID: number;
    setCommType: SetCommType[];

    constructor(data?: ICreateOrUpdateSetCommTypeInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.schemaID = data["schemaID"];
            if (data["setCommType"] && data["setCommType"].constructor === Array) {
                this.setCommType = [];
                for (let item of data["setCommType"])
                    this.setCommType.push(SetCommType.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateOrUpdateSetCommTypeInputDto {
        let result = new CreateOrUpdateSetCommTypeInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaID"] = this.schemaID;
        if (this.setCommType && this.setCommType.constructor === Array) {
            data["setCommType"] = [];
            for (let item of this.setCommType)
                data["setCommType"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICreateOrUpdateSetCommTypeInputDto {
    schemaID: number;
    setCommType: SetCommType[];
}

export class SetCommType implements ISetCommType {
    commTypeID: number;
    commTypeCode: string;
    commTypeName: string;
    isComplete: boolean;

    constructor(data?: ISetCommType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.commTypeID = data["commTypeID"];
            this.commTypeCode = data["commTypeCode"];
            this.commTypeName = data["commTypeName"];
            this.isComplete = data["isComplete"];
        }
    }

    static fromJS(data: any): SetCommType {
        let result = new SetCommType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["commTypeID"] = this.commTypeID;
        data["commTypeCode"] = this.commTypeCode;
        data["commTypeName"] = this.commTypeName;
        data["isComplete"] = this.isComplete;
        return data; 
    }
}

export interface ISetCommType {
    commTypeID: number;
    commTypeCode: string;
    commTypeName: string;
    isComplete: boolean;
}

export class CreateOrUpdateMsCommPctInputDto implements ICreateOrUpdateMsCommPctInputDto {
    schemaID: number;
    setCommPct: SetCommPct[];

    constructor(data?: ICreateOrUpdateMsCommPctInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.schemaID = data["schemaID"];
            if (data["setCommPct"] && data["setCommPct"].constructor === Array) {
                this.setCommPct = [];
                for (let item of data["setCommPct"])
                    this.setCommPct.push(SetCommPct.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateOrUpdateMsCommPctInputDto {
        let result = new CreateOrUpdateMsCommPctInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schemaID"] = this.schemaID;
        if (this.setCommPct && this.setCommPct.constructor === Array) {
            data["setCommPct"] = [];
            for (let item of this.setCommPct)
                data["setCommPct"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICreateOrUpdateMsCommPctInputDto {
    schemaID: number;
    setCommPct: SetCommPct[];
}

export class SetCommPct implements ISetCommPct {
    commPctID: number;
    validDate: moment.Moment;
    commTypeID: number;
    statusMemberID: number;
    uplineNo: string;
    commPctPaid: number;
    nominal: number;
    isComplete: boolean;

    constructor(data?: ISetCommPct) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.commPctID = data["commPctID"];
            this.validDate = data["validDate"] ? moment(data["validDate"].toString()) : <any>undefined;
            this.commTypeID = data["commTypeID"];
            this.statusMemberID = data["statusMemberID"];
            this.uplineNo = data["uplineNo"];
            this.commPctPaid = data["commPctPaid"];
            this.nominal = data["nominal"];
            this.isComplete = data["isComplete"];
        }
    }

    static fromJS(data: any): SetCommPct {
        let result = new SetCommPct();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["commPctID"] = this.commPctID;
        data["validDate"] = this.validDate ? this.validDate.toISOString() : <any>undefined;
        data["commTypeID"] = this.commTypeID;
        data["statusMemberID"] = this.statusMemberID;
        data["uplineNo"] = this.uplineNo;
        data["commPctPaid"] = this.commPctPaid;
        data["nominal"] = this.nominal;
        data["isComplete"] = this.isComplete;
        return data; 
    }
}

export interface ISetCommPct {
    commPctID: number;
    validDate: moment.Moment;
    commTypeID: number;
    statusMemberID: number;
    uplineNo: string;
    commPctPaid: number;
    nominal: number;
    isComplete: boolean;
}

export class GetLkUplineListDto implements IGetLkUplineListDto {
    uplineID: number;
    uplineNo: number;

    constructor(data?: IGetLkUplineListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.uplineID = data["uplineID"];
            this.uplineNo = data["uplineNo"];
        }
    }

    static fromJS(data: any): GetLkUplineListDto {
        let result = new GetLkUplineListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["uplineID"] = this.uplineID;
        data["uplineNo"] = this.uplineNo;
        return data; 
    }
}

export interface IGetLkUplineListDto {
    uplineID: number;
    uplineNo: number;
}

export class ListResultDtoOfGetAllMsTermListDto implements IListResultDtoOfGetAllMsTermListDto {
    items: GetAllMsTermListDto[];

    constructor(data?: IListResultDtoOfGetAllMsTermListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetAllMsTermListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetAllMsTermListDto {
        let result = new ListResultDtoOfGetAllMsTermListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetAllMsTermListDto {
    items: GetAllMsTermListDto[];
}

export class GetAllMsTermListDto implements IGetAllMsTermListDto {
    termMainID: number;
    termID: number;
    termCode: string;
    termNo: number;
    ppjbDue: number;
    remarks: string;
    projectName: string;
    isActive: boolean;

    constructor(data?: IGetAllMsTermListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.termMainID = data["termMainID"];
            this.termID = data["termID"];
            this.termCode = data["termCode"];
            this.termNo = data["termNo"];
            this.ppjbDue = data["ppjbDue"];
            this.remarks = data["remarks"];
            this.projectName = data["projectName"];
            this.isActive = data["isActive"];
        }
    }

    static fromJS(data: any): GetAllMsTermListDto {
        let result = new GetAllMsTermListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["termMainID"] = this.termMainID;
        data["termID"] = this.termID;
        data["termCode"] = this.termCode;
        data["termNo"] = this.termNo;
        data["ppjbDue"] = this.ppjbDue;
        data["remarks"] = this.remarks;
        data["projectName"] = this.projectName;
        data["isActive"] = this.isActive;
        return data; 
    }
}

export interface IGetAllMsTermListDto {
    termMainID: number;
    termID: number;
    termCode: string;
    termNo: number;
    ppjbDue: number;
    remarks: string;
    projectName: string;
    isActive: boolean;
}

export class PagedResultDtoOfGetAllMsTermListDto implements IPagedResultDtoOfGetAllMsTermListDto {
    totalCount: number;
    items: GetAllMsTermListDto[];

    constructor(data?: IPagedResultDtoOfGetAllMsTermListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetAllMsTermListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfGetAllMsTermListDto {
        let result = new PagedResultDtoOfGetAllMsTermListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfGetAllMsTermListDto {
    totalCount: number;
    items: GetAllMsTermListDto[];
}

export class UpdateMsTermStatusInputDto implements IUpdateMsTermStatusInputDto {
    termMainID: number;
    termNo: number;
    isActive: boolean;

    constructor(data?: IUpdateMsTermStatusInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.termMainID = data["termMainID"];
            this.termNo = data["termNo"];
            this.isActive = data["isActive"];
        }
    }

    static fromJS(data: any): UpdateMsTermStatusInputDto {
        let result = new UpdateMsTermStatusInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["termMainID"] = this.termMainID;
        data["termNo"] = this.termNo;
        data["isActive"] = this.isActive;
        return data; 
    }
}

export interface IUpdateMsTermStatusInputDto {
    termMainID: number;
    termNo: number;
    isActive: boolean;
}

export class CreateUniversalMsTermInput implements ICreateUniversalMsTermInput {
    entityCode: string;
    termCode: string;
    termDesc: string;
    famDiscCode: string;
    bfAmount: number;
    projectID: number;
    setValue: DtoTerm[];

    constructor(data?: ICreateUniversalMsTermInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.entityCode = data["entityCode"];
            this.termCode = data["termCode"];
            this.termDesc = data["termDesc"];
            this.famDiscCode = data["famDiscCode"];
            this.bfAmount = data["bfAmount"];
            this.projectID = data["projectID"];
            if (data["setValue"] && data["setValue"].constructor === Array) {
                this.setValue = [];
                for (let item of data["setValue"])
                    this.setValue.push(DtoTerm.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateUniversalMsTermInput {
        let result = new CreateUniversalMsTermInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["entityCode"] = this.entityCode;
        data["termCode"] = this.termCode;
        data["termDesc"] = this.termDesc;
        data["famDiscCode"] = this.famDiscCode;
        data["bfAmount"] = this.bfAmount;
        data["projectID"] = this.projectID;
        if (this.setValue && this.setValue.constructor === Array) {
            data["setValue"] = [];
            for (let item of this.setValue)
                data["setValue"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICreateUniversalMsTermInput {
    entityCode: string;
    termCode: string;
    termDesc: string;
    famDiscCode: string;
    bfAmount: number;
    projectID: number;
    setValue: DtoTerm[];
}

export class DtoTerm implements IDtoTerm {
    termNo: number;
    ppjbDue: number;
    remarks: string;
    finTypeID: number;
    finTypeCode: string;
    finStartDue: number;
    termInstallment: number;
    discBFCalcType: string;
    dpCalcType: string;
    groupTermCode: string;
    isActive: boolean;
    dtoDP: DtoDP[];
    dtoDisc: DtoDisc[];

    constructor(data?: IDtoTerm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.termNo = data["termNo"];
            this.ppjbDue = data["ppjbDue"];
            this.remarks = data["remarks"];
            this.finTypeID = data["finTypeID"];
            this.finTypeCode = data["finTypeCode"];
            this.finStartDue = data["finStartDue"];
            this.termInstallment = data["termInstallment"];
            this.discBFCalcType = data["discBFCalcType"];
            this.dpCalcType = data["dpCalcType"];
            this.groupTermCode = data["groupTermCode"];
            this.isActive = data["isActive"];
            if (data["dtoDP"] && data["dtoDP"].constructor === Array) {
                this.dtoDP = [];
                for (let item of data["dtoDP"])
                    this.dtoDP.push(DtoDP.fromJS(item));
            }
            if (data["dtoDisc"] && data["dtoDisc"].constructor === Array) {
                this.dtoDisc = [];
                for (let item of data["dtoDisc"])
                    this.dtoDisc.push(DtoDisc.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DtoTerm {
        let result = new DtoTerm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["termNo"] = this.termNo;
        data["ppjbDue"] = this.ppjbDue;
        data["remarks"] = this.remarks;
        data["finTypeID"] = this.finTypeID;
        data["finTypeCode"] = this.finTypeCode;
        data["finStartDue"] = this.finStartDue;
        data["termInstallment"] = this.termInstallment;
        data["discBFCalcType"] = this.discBFCalcType;
        data["dpCalcType"] = this.dpCalcType;
        data["groupTermCode"] = this.groupTermCode;
        data["isActive"] = this.isActive;
        if (this.dtoDP && this.dtoDP.constructor === Array) {
            data["dtoDP"] = [];
            for (let item of this.dtoDP)
                data["dtoDP"].push(item.toJSON());
        }
        if (this.dtoDisc && this.dtoDisc.constructor === Array) {
            data["dtoDisc"] = [];
            for (let item of this.dtoDisc)
                data["dtoDisc"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IDtoTerm {
    termNo: number;
    ppjbDue: number;
    remarks: string;
    finTypeID: number;
    finTypeCode: string;
    finStartDue: number;
    termInstallment: number;
    discBFCalcType: string;
    dpCalcType: string;
    groupTermCode: string;
    isActive: boolean;
    dtoDP: DtoDP[];
    dtoDisc: DtoDisc[];
}

export class DtoDP implements IDtoDP {
    dpNo: number;
    daysDue: number;
    dpPct: number;
    dpAmount: number;
    daysDueNewKP: number;

    constructor(data?: IDtoDP) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.dpNo = data["dpNo"];
            this.daysDue = data["daysDue"];
            this.dpPct = data["dpPct"];
            this.dpAmount = data["dpAmount"];
            this.daysDueNewKP = data["daysDueNewKP"];
        }
    }

    static fromJS(data: any): DtoDP {
        let result = new DtoDP();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dpNo"] = this.dpNo;
        data["daysDue"] = this.daysDue;
        data["dpPct"] = this.dpPct;
        data["dpAmount"] = this.dpAmount;
        data["daysDueNewKP"] = this.daysDueNewKP;
        return data; 
    }
}

export interface IDtoDP {
    dpNo: number;
    daysDue: number;
    dpPct: number;
    dpAmount: number;
    daysDueNewKP: number;
}

export class DtoDisc implements IDtoDisc {
    discountID: number;
    addDiscNo: number;
    addDiscPct: number;
    addDiscAmt: number;

    constructor(data?: IDtoDisc) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.discountID = data["discountID"];
            this.addDiscNo = data["addDiscNo"];
            this.addDiscPct = data["addDiscPct"];
            this.addDiscAmt = data["addDiscAmt"];
        }
    }

    static fromJS(data: any): DtoDisc {
        let result = new DtoDisc();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["discountID"] = this.discountID;
        data["addDiscNo"] = this.addDiscNo;
        data["addDiscPct"] = this.addDiscPct;
        data["addDiscAmt"] = this.addDiscAmt;
        return data; 
    }
}

export interface IDtoDisc {
    discountID: number;
    addDiscNo: number;
    addDiscPct: number;
    addDiscAmt: number;
}

export class CreateMsTermMainInput implements ICreateMsTermMainInput {
    entityID: number;
    termCode: string;
    termDesc: string;
    famDiscCode: string;
    bfAmount: number;
    termID: number;

    constructor(data?: ICreateMsTermMainInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.entityID = data["entityID"];
            this.termCode = data["termCode"];
            this.termDesc = data["termDesc"];
            this.famDiscCode = data["famDiscCode"];
            this.bfAmount = data["bfAmount"];
            this.termID = data["termID"];
        }
    }

    static fromJS(data: any): CreateMsTermMainInput {
        let result = new CreateMsTermMainInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["entityID"] = this.entityID;
        data["termCode"] = this.termCode;
        data["termDesc"] = this.termDesc;
        data["famDiscCode"] = this.famDiscCode;
        data["bfAmount"] = this.bfAmount;
        data["termID"] = this.termID;
        return data; 
    }
}

export interface ICreateMsTermMainInput {
    entityID: number;
    termCode: string;
    termDesc: string;
    famDiscCode: string;
    bfAmount: number;
    termID: number;
}

export class CreateMsTermInput implements ICreateMsTermInput {
    entityCode: string;
    entityID: number;
    termCode: string;
    termNo: number;
    ppjbDue: number;
    remarks: string;
    termInstallment: number;
    discBFCalcType: string;
    dpCalcType: string;
    groupTermCode: string;
    projectID: number;
    termMainID: number;
    isActive: boolean;

    constructor(data?: ICreateMsTermInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.entityCode = data["entityCode"];
            this.entityID = data["entityID"];
            this.termCode = data["termCode"];
            this.termNo = data["termNo"];
            this.ppjbDue = data["ppjbDue"];
            this.remarks = data["remarks"];
            this.termInstallment = data["termInstallment"];
            this.discBFCalcType = data["discBFCalcType"];
            this.dpCalcType = data["dpCalcType"];
            this.groupTermCode = data["groupTermCode"];
            this.projectID = data["projectID"];
            this.termMainID = data["termMainID"];
            this.isActive = data["isActive"];
        }
    }

    static fromJS(data: any): CreateMsTermInput {
        let result = new CreateMsTermInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["entityCode"] = this.entityCode;
        data["entityID"] = this.entityID;
        data["termCode"] = this.termCode;
        data["termNo"] = this.termNo;
        data["ppjbDue"] = this.ppjbDue;
        data["remarks"] = this.remarks;
        data["termInstallment"] = this.termInstallment;
        data["discBFCalcType"] = this.discBFCalcType;
        data["dpCalcType"] = this.dpCalcType;
        data["groupTermCode"] = this.groupTermCode;
        data["projectID"] = this.projectID;
        data["termMainID"] = this.termMainID;
        data["isActive"] = this.isActive;
        return data; 
    }
}

export interface ICreateMsTermInput {
    entityCode: string;
    entityID: number;
    termCode: string;
    termNo: number;
    ppjbDue: number;
    remarks: string;
    termInstallment: number;
    discBFCalcType: string;
    dpCalcType: string;
    groupTermCode: string;
    projectID: number;
    termMainID: number;
    isActive: boolean;
}

export class CreateMsTermPmtInput implements ICreateMsTermPmtInput {
    entityID: number;
    termID: number;
    termNo: number;
    finTypeID: number;
    finStartDue: number;

    constructor(data?: ICreateMsTermPmtInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.entityID = data["entityID"];
            this.termID = data["termID"];
            this.termNo = data["termNo"];
            this.finTypeID = data["finTypeID"];
            this.finStartDue = data["finStartDue"];
        }
    }

    static fromJS(data: any): CreateMsTermPmtInput {
        let result = new CreateMsTermPmtInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["entityID"] = this.entityID;
        data["termID"] = this.termID;
        data["termNo"] = this.termNo;
        data["finTypeID"] = this.finTypeID;
        data["finStartDue"] = this.finStartDue;
        return data; 
    }
}

export interface ICreateMsTermPmtInput {
    entityID: number;
    termID: number;
    termNo: number;
    finTypeID: number;
    finStartDue: number;
}

export class CreateMsTermDPInput implements ICreateMsTermDPInput {
    entityCode: string;
    termCode: string;
    termNo: number;
    dpNo: number;
    daysDue: number;
    dpPct: number;
    dpAmount: number;
    daysDueNewKP: number;
    termID: number;

    constructor(data?: ICreateMsTermDPInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.entityCode = data["entityCode"];
            this.termCode = data["termCode"];
            this.termNo = data["termNo"];
            this.dpNo = data["dpNo"];
            this.daysDue = data["daysDue"];
            this.dpPct = data["dpPct"];
            this.dpAmount = data["dpAmount"];
            this.daysDueNewKP = data["daysDueNewKP"];
            this.termID = data["termID"];
        }
    }

    static fromJS(data: any): CreateMsTermDPInput {
        let result = new CreateMsTermDPInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["entityCode"] = this.entityCode;
        data["termCode"] = this.termCode;
        data["termNo"] = this.termNo;
        data["dpNo"] = this.dpNo;
        data["daysDue"] = this.daysDue;
        data["dpPct"] = this.dpPct;
        data["dpAmount"] = this.dpAmount;
        data["daysDueNewKP"] = this.daysDueNewKP;
        data["termID"] = this.termID;
        return data; 
    }
}

export interface ICreateMsTermDPInput {
    entityCode: string;
    termCode: string;
    termNo: number;
    dpNo: number;
    daysDue: number;
    dpPct: number;
    dpAmount: number;
    daysDueNewKP: number;
    termID: number;
}

export class CreateMsTermAddDiscInput implements ICreateMsTermAddDiscInput {
    entityCode: string;
    termCode: string;
    termNo: number;
    addDiscNo: number;
    discountID: number;
    addDiscPct: number;
    addDiscAmt: number;
    termID: number;

    constructor(data?: ICreateMsTermAddDiscInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.entityCode = data["entityCode"];
            this.termCode = data["termCode"];
            this.termNo = data["termNo"];
            this.addDiscNo = data["addDiscNo"];
            this.discountID = data["discountID"];
            this.addDiscPct = data["addDiscPct"];
            this.addDiscAmt = data["addDiscAmt"];
            this.termID = data["termID"];
        }
    }

    static fromJS(data: any): CreateMsTermAddDiscInput {
        let result = new CreateMsTermAddDiscInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["entityCode"] = this.entityCode;
        data["termCode"] = this.termCode;
        data["termNo"] = this.termNo;
        data["addDiscNo"] = this.addDiscNo;
        data["discountID"] = this.discountID;
        data["addDiscPct"] = this.addDiscPct;
        data["addDiscAmt"] = this.addDiscAmt;
        data["termID"] = this.termID;
        return data; 
    }
}

export interface ICreateMsTermAddDiscInput {
    entityCode: string;
    termCode: string;
    termNo: number;
    addDiscNo: number;
    discountID: number;
    addDiscPct: number;
    addDiscAmt: number;
    termID: number;
}

export class GetExistingTermDto implements IGetExistingTermDto {
    entityCode: string;
    termCode: string;
    bfAmount: number;
    projectName: string;
    projectID: number;
    termMainID: number;
    setValue: DtoGetTerm[];

    constructor(data?: IGetExistingTermDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.entityCode = data["entityCode"];
            this.termCode = data["termCode"];
            this.bfAmount = data["bfAmount"];
            this.projectName = data["projectName"];
            this.projectID = data["projectID"];
            this.termMainID = data["termMainID"];
            if (data["setValue"] && data["setValue"].constructor === Array) {
                this.setValue = [];
                for (let item of data["setValue"])
                    this.setValue.push(DtoGetTerm.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetExistingTermDto {
        let result = new GetExistingTermDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["entityCode"] = this.entityCode;
        data["termCode"] = this.termCode;
        data["bfAmount"] = this.bfAmount;
        data["projectName"] = this.projectName;
        data["projectID"] = this.projectID;
        data["termMainID"] = this.termMainID;
        if (this.setValue && this.setValue.constructor === Array) {
            data["setValue"] = [];
            for (let item of this.setValue)
                data["setValue"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetExistingTermDto {
    entityCode: string;
    termCode: string;
    bfAmount: number;
    projectName: string;
    projectID: number;
    termMainID: number;
    setValue: DtoGetTerm[];
}

export class DtoGetTerm implements IDtoGetTerm {
    termID: number;
    termMainID: number;
    projectID: number;
    projectName: string;
    entityCode: string;
    termCode: string;
    bfAmount: number;
    termNo: number;
    ppjbDue: number;
    remarks: string;
    termInstallment: number;
    discBFCalcType: string;
    dpCalcType: string;
    groupTermCode: string;
    termPmtID: number;
    finTypeID: number;
    finTypeCode: string;
    finStartDue: number;
    isActive: boolean;
    dtoDP: DtoGetDP[];
    dtoDisc: DtoGetDisc[];

    constructor(data?: IDtoGetTerm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.termID = data["termID"];
            this.termMainID = data["termMainID"];
            this.projectID = data["projectID"];
            this.projectName = data["projectName"];
            this.entityCode = data["entityCode"];
            this.termCode = data["termCode"];
            this.bfAmount = data["bfAmount"];
            this.termNo = data["termNo"];
            this.ppjbDue = data["ppjbDue"];
            this.remarks = data["remarks"];
            this.termInstallment = data["termInstallment"];
            this.discBFCalcType = data["discBFCalcType"];
            this.dpCalcType = data["dpCalcType"];
            this.groupTermCode = data["groupTermCode"];
            this.termPmtID = data["termPmtID"];
            this.finTypeID = data["finTypeID"];
            this.finTypeCode = data["finTypeCode"];
            this.finStartDue = data["finStartDue"];
            this.isActive = data["isActive"];
            if (data["dtoDP"] && data["dtoDP"].constructor === Array) {
                this.dtoDP = [];
                for (let item of data["dtoDP"])
                    this.dtoDP.push(DtoGetDP.fromJS(item));
            }
            if (data["dtoDisc"] && data["dtoDisc"].constructor === Array) {
                this.dtoDisc = [];
                for (let item of data["dtoDisc"])
                    this.dtoDisc.push(DtoGetDisc.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DtoGetTerm {
        let result = new DtoGetTerm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["termID"] = this.termID;
        data["termMainID"] = this.termMainID;
        data["projectID"] = this.projectID;
        data["projectName"] = this.projectName;
        data["entityCode"] = this.entityCode;
        data["termCode"] = this.termCode;
        data["bfAmount"] = this.bfAmount;
        data["termNo"] = this.termNo;
        data["ppjbDue"] = this.ppjbDue;
        data["remarks"] = this.remarks;
        data["termInstallment"] = this.termInstallment;
        data["discBFCalcType"] = this.discBFCalcType;
        data["dpCalcType"] = this.dpCalcType;
        data["groupTermCode"] = this.groupTermCode;
        data["termPmtID"] = this.termPmtID;
        data["finTypeID"] = this.finTypeID;
        data["finTypeCode"] = this.finTypeCode;
        data["finStartDue"] = this.finStartDue;
        data["isActive"] = this.isActive;
        if (this.dtoDP && this.dtoDP.constructor === Array) {
            data["dtoDP"] = [];
            for (let item of this.dtoDP)
                data["dtoDP"].push(item.toJSON());
        }
        if (this.dtoDisc && this.dtoDisc.constructor === Array) {
            data["dtoDisc"] = [];
            for (let item of this.dtoDisc)
                data["dtoDisc"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IDtoGetTerm {
    termID: number;
    termMainID: number;
    projectID: number;
    projectName: string;
    entityCode: string;
    termCode: string;
    bfAmount: number;
    termNo: number;
    ppjbDue: number;
    remarks: string;
    termInstallment: number;
    discBFCalcType: string;
    dpCalcType: string;
    groupTermCode: string;
    termPmtID: number;
    finTypeID: number;
    finTypeCode: string;
    finStartDue: number;
    isActive: boolean;
    dtoDP: DtoGetDP[];
    dtoDisc: DtoGetDisc[];
}

export class DtoGetDP implements IDtoGetDP {
    termDPID: number;
    dpNo: number;
    daysDue: number;
    dpPct: number;
    dpAmount: number;
    daysDueNewKP: number;

    constructor(data?: IDtoGetDP) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.termDPID = data["termDPID"];
            this.dpNo = data["dpNo"];
            this.daysDue = data["daysDue"];
            this.dpPct = data["dpPct"];
            this.dpAmount = data["dpAmount"];
            this.daysDueNewKP = data["daysDueNewKP"];
        }
    }

    static fromJS(data: any): DtoGetDP {
        let result = new DtoGetDP();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["termDPID"] = this.termDPID;
        data["dpNo"] = this.dpNo;
        data["daysDue"] = this.daysDue;
        data["dpPct"] = this.dpPct;
        data["dpAmount"] = this.dpAmount;
        data["daysDueNewKP"] = this.daysDueNewKP;
        return data; 
    }
}

export interface IDtoGetDP {
    termDPID: number;
    dpNo: number;
    daysDue: number;
    dpPct: number;
    dpAmount: number;
    daysDueNewKP: number;
}

export class DtoGetDisc implements IDtoGetDisc {
    termAddDiscID: number;
    discountID: number;
    addDiscPct: number;
    addDiscAmt: number;
    addDiscNo: number;

    constructor(data?: IDtoGetDisc) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.termAddDiscID = data["termAddDiscID"];
            this.discountID = data["discountID"];
            this.addDiscPct = data["addDiscPct"];
            this.addDiscAmt = data["addDiscAmt"];
            this.addDiscNo = data["addDiscNo"];
        }
    }

    static fromJS(data: any): DtoGetDisc {
        let result = new DtoGetDisc();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["termAddDiscID"] = this.termAddDiscID;
        data["discountID"] = this.discountID;
        data["addDiscPct"] = this.addDiscPct;
        data["addDiscAmt"] = this.addDiscAmt;
        data["addDiscNo"] = this.addDiscNo;
        return data; 
    }
}

export interface IDtoGetDisc {
    termAddDiscID: number;
    discountID: number;
    addDiscPct: number;
    addDiscAmt: number;
    addDiscNo: number;
}

export class GetMsDiscountDto implements IGetMsDiscountDto {
    discountID: number;
    discountCode: string;
    discountName: string;

    constructor(data?: IGetMsDiscountDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.discountID = data["discountID"];
            this.discountCode = data["discountCode"];
            this.discountName = data["discountName"];
        }
    }

    static fromJS(data: any): GetMsDiscountDto {
        let result = new GetMsDiscountDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["discountID"] = this.discountID;
        data["discountCode"] = this.discountCode;
        data["discountName"] = this.discountName;
        return data; 
    }
}

export interface IGetMsDiscountDto {
    discountID: number;
    discountCode: string;
    discountName: string;
}

export class GetMsFinTypeDto implements IGetMsFinTypeDto {
    finTypeID: number;
    finTypeCode: string;
    finTypeDesc: string;
    finTimes: number;

    constructor(data?: IGetMsFinTypeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.finTypeID = data["finTypeID"];
            this.finTypeCode = data["finTypeCode"];
            this.finTypeDesc = data["finTypeDesc"];
            this.finTimes = data["finTimes"];
        }
    }

    static fromJS(data: any): GetMsFinTypeDto {
        let result = new GetMsFinTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["finTypeID"] = this.finTypeID;
        data["finTypeCode"] = this.finTypeCode;
        data["finTypeDesc"] = this.finTypeDesc;
        data["finTimes"] = this.finTimes;
        return data; 
    }
}

export interface IGetMsFinTypeDto {
    finTypeID: number;
    finTypeCode: string;
    finTypeDesc: string;
    finTimes: number;
}

export class GetDpCalcListDto implements IGetDpCalcListDto {
    id: number;
    dpCalcType: string;
    dpCalcDesc: string;

    constructor(data?: IGetDpCalcListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.dpCalcType = data["dpCalcType"];
            this.dpCalcDesc = data["dpCalcDesc"];
        }
    }

    static fromJS(data: any): GetDpCalcListDto {
        let result = new GetDpCalcListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["dpCalcType"] = this.dpCalcType;
        data["dpCalcDesc"] = this.dpCalcDesc;
        return data; 
    }
}

export interface IGetDpCalcListDto {
    id: number;
    dpCalcType: string;
    dpCalcDesc: string;
}

export class UpdateMsTermMainInput implements IUpdateMsTermMainInput {
    id: number;
    bfAmount: number;

    constructor(data?: IUpdateMsTermMainInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.bfAmount = data["bfAmount"];
        }
    }

    static fromJS(data: any): UpdateMsTermMainInput {
        let result = new UpdateMsTermMainInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["bfAmount"] = this.bfAmount;
        return data; 
    }
}

export interface IUpdateMsTermMainInput {
    id: number;
    bfAmount: number;
}

export class UpdateMsTermInput implements IUpdateMsTermInput {
    id: number;
    termMainID: number;
    bfAmount: number;
    projectID: number;
    termNo: number;
    ppjbDue: number;
    remarks: string;
    termInstallment: number;
    dpCalcType: string;
    isActive: boolean;

    constructor(data?: IUpdateMsTermInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.termMainID = data["termMainID"];
            this.bfAmount = data["bfAmount"];
            this.projectID = data["projectID"];
            this.termNo = data["termNo"];
            this.ppjbDue = data["ppjbDue"];
            this.remarks = data["remarks"];
            this.termInstallment = data["termInstallment"];
            this.dpCalcType = data["dpCalcType"];
            this.isActive = data["isActive"];
        }
    }

    static fromJS(data: any): UpdateMsTermInput {
        let result = new UpdateMsTermInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["termMainID"] = this.termMainID;
        data["bfAmount"] = this.bfAmount;
        data["projectID"] = this.projectID;
        data["termNo"] = this.termNo;
        data["ppjbDue"] = this.ppjbDue;
        data["remarks"] = this.remarks;
        data["termInstallment"] = this.termInstallment;
        data["dpCalcType"] = this.dpCalcType;
        data["isActive"] = this.isActive;
        return data; 
    }
}

export interface IUpdateMsTermInput {
    id: number;
    termMainID: number;
    bfAmount: number;
    projectID: number;
    termNo: number;
    ppjbDue: number;
    remarks: string;
    termInstallment: number;
    dpCalcType: string;
    isActive: boolean;
}

export class UpdateMsTermPmtInput implements IUpdateMsTermPmtInput {
    id: number;
    termNo: number;
    finTypeID: number;
    finTypeCode: string;
    finStartDue: number;

    constructor(data?: IUpdateMsTermPmtInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.termNo = data["termNo"];
            this.finTypeID = data["finTypeID"];
            this.finTypeCode = data["finTypeCode"];
            this.finStartDue = data["finStartDue"];
        }
    }

    static fromJS(data: any): UpdateMsTermPmtInput {
        let result = new UpdateMsTermPmtInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["termNo"] = this.termNo;
        data["finTypeID"] = this.finTypeID;
        data["finTypeCode"] = this.finTypeCode;
        data["finStartDue"] = this.finStartDue;
        return data; 
    }
}

export interface IUpdateMsTermPmtInput {
    id: number;
    termNo: number;
    finTypeID: number;
    finTypeCode: string;
    finStartDue: number;
}

export class UpdateMsTermDPInput implements IUpdateMsTermDPInput {
    id: number;
    dpNo: number;
    daysDue: number;
    dpPct: number;
    dpAmount: number;
    daysDueNewKP: number;
    entityCode: string;
    termCode: string;
    termNo: number;
    termID: number;

    constructor(data?: IUpdateMsTermDPInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.dpNo = data["dpNo"];
            this.daysDue = data["daysDue"];
            this.dpPct = data["dpPct"];
            this.dpAmount = data["dpAmount"];
            this.daysDueNewKP = data["daysDueNewKP"];
            this.entityCode = data["entityCode"];
            this.termCode = data["termCode"];
            this.termNo = data["termNo"];
            this.termID = data["termID"];
        }
    }

    static fromJS(data: any): UpdateMsTermDPInput {
        let result = new UpdateMsTermDPInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["dpNo"] = this.dpNo;
        data["daysDue"] = this.daysDue;
        data["dpPct"] = this.dpPct;
        data["dpAmount"] = this.dpAmount;
        data["daysDueNewKP"] = this.daysDueNewKP;
        data["entityCode"] = this.entityCode;
        data["termCode"] = this.termCode;
        data["termNo"] = this.termNo;
        data["termID"] = this.termID;
        return data; 
    }
}

export interface IUpdateMsTermDPInput {
    id: number;
    dpNo: number;
    daysDue: number;
    dpPct: number;
    dpAmount: number;
    daysDueNewKP: number;
    entityCode: string;
    termCode: string;
    termNo: number;
    termID: number;
}

export class UpdateMsTermAddDiscInput implements IUpdateMsTermAddDiscInput {
    id: number;
    entityCode: string;
    termCode: string;
    termNo: number;
    addDiscNo: number;
    discountID: number;
    addDiscPct: number;
    addDiscAmt: number;

    constructor(data?: IUpdateMsTermAddDiscInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.entityCode = data["entityCode"];
            this.termCode = data["termCode"];
            this.termNo = data["termNo"];
            this.addDiscNo = data["addDiscNo"];
            this.discountID = data["discountID"];
            this.addDiscPct = data["addDiscPct"];
            this.addDiscAmt = data["addDiscAmt"];
        }
    }

    static fromJS(data: any): UpdateMsTermAddDiscInput {
        let result = new UpdateMsTermAddDiscInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["entityCode"] = this.entityCode;
        data["termCode"] = this.termCode;
        data["termNo"] = this.termNo;
        data["addDiscNo"] = this.addDiscNo;
        data["discountID"] = this.discountID;
        data["addDiscPct"] = this.addDiscPct;
        data["addDiscAmt"] = this.addDiscAmt;
        return data; 
    }
}

export interface IUpdateMsTermAddDiscInput {
    id: number;
    entityCode: string;
    termCode: string;
    termNo: number;
    addDiscNo: number;
    discountID: number;
    addDiscPct: number;
    addDiscAmt: number;
}

export class UpdateUniversalMsTermInput implements IUpdateUniversalMsTermInput {
    termMainID: number;
    bfAmount: number;
    projectID: number;
    setValue: DtoTermUpdate[];

    constructor(data?: IUpdateUniversalMsTermInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.termMainID = data["termMainID"];
            this.bfAmount = data["bfAmount"];
            this.projectID = data["projectID"];
            if (data["setValue"] && data["setValue"].constructor === Array) {
                this.setValue = [];
                for (let item of data["setValue"])
                    this.setValue.push(DtoTermUpdate.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UpdateUniversalMsTermInput {
        let result = new UpdateUniversalMsTermInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["termMainID"] = this.termMainID;
        data["bfAmount"] = this.bfAmount;
        data["projectID"] = this.projectID;
        if (this.setValue && this.setValue.constructor === Array) {
            data["setValue"] = [];
            for (let item of this.setValue)
                data["setValue"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUpdateUniversalMsTermInput {
    termMainID: number;
    bfAmount: number;
    projectID: number;
    setValue: DtoTermUpdate[];
}

export class DtoTermUpdate implements IDtoTermUpdate {
    termID: number;
    termPmtID: number;
    termNo: number;
    ppjbDue: number;
    remarks: string;
    finTypeCode: string;
    finTypeID: number;
    finStartDue: number;
    termInstallment: number;
    dpCalcType: string;
    isActive: boolean;
    dtoDP: DtoDPUpdate[];
    dtoDisc: DtoDiscUpdate[];

    constructor(data?: IDtoTermUpdate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.termID = data["termID"];
            this.termPmtID = data["termPmtID"];
            this.termNo = data["termNo"];
            this.ppjbDue = data["ppjbDue"];
            this.remarks = data["remarks"];
            this.finTypeCode = data["finTypeCode"];
            this.finTypeID = data["finTypeID"];
            this.finStartDue = data["finStartDue"];
            this.termInstallment = data["termInstallment"];
            this.dpCalcType = data["dpCalcType"];
            this.isActive = data["isActive"];
            if (data["dtoDP"] && data["dtoDP"].constructor === Array) {
                this.dtoDP = [];
                for (let item of data["dtoDP"])
                    this.dtoDP.push(DtoDPUpdate.fromJS(item));
            }
            if (data["dtoDisc"] && data["dtoDisc"].constructor === Array) {
                this.dtoDisc = [];
                for (let item of data["dtoDisc"])
                    this.dtoDisc.push(DtoDiscUpdate.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DtoTermUpdate {
        let result = new DtoTermUpdate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["termID"] = this.termID;
        data["termPmtID"] = this.termPmtID;
        data["termNo"] = this.termNo;
        data["ppjbDue"] = this.ppjbDue;
        data["remarks"] = this.remarks;
        data["finTypeCode"] = this.finTypeCode;
        data["finTypeID"] = this.finTypeID;
        data["finStartDue"] = this.finStartDue;
        data["termInstallment"] = this.termInstallment;
        data["dpCalcType"] = this.dpCalcType;
        data["isActive"] = this.isActive;
        if (this.dtoDP && this.dtoDP.constructor === Array) {
            data["dtoDP"] = [];
            for (let item of this.dtoDP)
                data["dtoDP"].push(item.toJSON());
        }
        if (this.dtoDisc && this.dtoDisc.constructor === Array) {
            data["dtoDisc"] = [];
            for (let item of this.dtoDisc)
                data["dtoDisc"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IDtoTermUpdate {
    termID: number;
    termPmtID: number;
    termNo: number;
    ppjbDue: number;
    remarks: string;
    finTypeCode: string;
    finTypeID: number;
    finStartDue: number;
    termInstallment: number;
    dpCalcType: string;
    isActive: boolean;
    dtoDP: DtoDPUpdate[];
    dtoDisc: DtoDiscUpdate[];
}

export class DtoDPUpdate implements IDtoDPUpdate {
    termDPID: number;
    dpNo: number;
    daysDue: number;
    dpPct: number;
    dpAmount: number;
    daysDueNewKP: number;

    constructor(data?: IDtoDPUpdate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.termDPID = data["termDPID"];
            this.dpNo = data["dpNo"];
            this.daysDue = data["daysDue"];
            this.dpPct = data["dpPct"];
            this.dpAmount = data["dpAmount"];
            this.daysDueNewKP = data["daysDueNewKP"];
        }
    }

    static fromJS(data: any): DtoDPUpdate {
        let result = new DtoDPUpdate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["termDPID"] = this.termDPID;
        data["dpNo"] = this.dpNo;
        data["daysDue"] = this.daysDue;
        data["dpPct"] = this.dpPct;
        data["dpAmount"] = this.dpAmount;
        data["daysDueNewKP"] = this.daysDueNewKP;
        return data; 
    }
}

export interface IDtoDPUpdate {
    termDPID: number;
    dpNo: number;
    daysDue: number;
    dpPct: number;
    dpAmount: number;
    daysDueNewKP: number;
}

export class DtoDiscUpdate implements IDtoDiscUpdate {
    termAddDiscID: number;
    discountID: number;
    addDiscNo: number;
    addDiscPct: number;
    addDiscAmt: number;

    constructor(data?: IDtoDiscUpdate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.termAddDiscID = data["termAddDiscID"];
            this.discountID = data["discountID"];
            this.addDiscNo = data["addDiscNo"];
            this.addDiscPct = data["addDiscPct"];
            this.addDiscAmt = data["addDiscAmt"];
        }
    }

    static fromJS(data: any): DtoDiscUpdate {
        let result = new DtoDiscUpdate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["termAddDiscID"] = this.termAddDiscID;
        data["discountID"] = this.discountID;
        data["addDiscNo"] = this.addDiscNo;
        data["addDiscPct"] = this.addDiscPct;
        data["addDiscAmt"] = this.addDiscAmt;
        return data; 
    }
}

export interface IDtoDiscUpdate {
    termAddDiscID: number;
    discountID: number;
    addDiscNo: number;
    addDiscPct: number;
    addDiscAmt: number;
}

export class ListResultDtoOfGetMsTerritoryListDto implements IListResultDtoOfGetMsTerritoryListDto {
    items: GetMsTerritoryListDto[];

    constructor(data?: IListResultDtoOfGetMsTerritoryListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetMsTerritoryListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetMsTerritoryListDto {
        let result = new ListResultDtoOfGetMsTerritoryListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetMsTerritoryListDto {
    items: GetMsTerritoryListDto[];
}

export class GetMsTerritoryListDto implements IGetMsTerritoryListDto {
    territoryID: number;
    territoryName: string;

    constructor(data?: IGetMsTerritoryListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.territoryID = data["territoryID"];
            this.territoryName = data["territoryName"];
        }
    }

    static fromJS(data: any): GetMsTerritoryListDto {
        let result = new GetMsTerritoryListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["territoryID"] = this.territoryID;
        data["territoryName"] = this.territoryName;
        return data; 
    }
}

export interface IGetMsTerritoryListDto {
    territoryID: number;
    territoryName: string;
}

export class GetCreateMsTerritoryInputDto implements IGetCreateMsTerritoryInputDto {
    territoryName: string;

    constructor(data?: IGetCreateMsTerritoryInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.territoryName = data["territoryName"];
        }
    }

    static fromJS(data: any): GetCreateMsTerritoryInputDto {
        let result = new GetCreateMsTerritoryInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["territoryName"] = this.territoryName;
        return data; 
    }
}

export interface IGetCreateMsTerritoryInputDto {
    territoryName: string;
}

export class CreateUnitInputDto implements ICreateUnitInputDto {
    unitCodeID: number;
    unitTypeID: number;
    blockID: number;
    towerID: number;
    facingID: number;
    zoningID: number;
    productID: number;
    unitStatusID: number;
    clusterID: number;
    projectID: number;
    unitNo: string;
    combinedUnitNo: string;
    areaID: number;
    categoryID: number;
    detailID: number;
    rentalStatusID: number;
    unitCertCode: string;
    termMainID: number;
    remarks: string;

    constructor(data?: ICreateUnitInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.unitCodeID = data["unitCodeID"];
            this.unitTypeID = data["unitTypeID"];
            this.blockID = data["blockID"];
            this.towerID = data["towerID"];
            this.facingID = data["facingID"];
            this.zoningID = data["zoningID"];
            this.productID = data["productID"];
            this.unitStatusID = data["unitStatusID"];
            this.clusterID = data["clusterID"];
            this.projectID = data["projectID"];
            this.unitNo = data["unitNo"];
            this.combinedUnitNo = data["combinedUnitNo"];
            this.areaID = data["areaID"];
            this.categoryID = data["categoryID"];
            this.detailID = data["detailID"];
            this.rentalStatusID = data["rentalStatusID"];
            this.unitCertCode = data["unitCertCode"];
            this.termMainID = data["termMainID"];
            this.remarks = data["remarks"];
        }
    }

    static fromJS(data: any): CreateUnitInputDto {
        let result = new CreateUnitInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["unitCodeID"] = this.unitCodeID;
        data["unitTypeID"] = this.unitTypeID;
        data["blockID"] = this.blockID;
        data["towerID"] = this.towerID;
        data["facingID"] = this.facingID;
        data["zoningID"] = this.zoningID;
        data["productID"] = this.productID;
        data["unitStatusID"] = this.unitStatusID;
        data["clusterID"] = this.clusterID;
        data["projectID"] = this.projectID;
        data["unitNo"] = this.unitNo;
        data["combinedUnitNo"] = this.combinedUnitNo;
        data["areaID"] = this.areaID;
        data["categoryID"] = this.categoryID;
        data["detailID"] = this.detailID;
        data["rentalStatusID"] = this.rentalStatusID;
        data["unitCertCode"] = this.unitCertCode;
        data["termMainID"] = this.termMainID;
        data["remarks"] = this.remarks;
        return data; 
    }
}

export interface ICreateUnitInputDto {
    unitCodeID: number;
    unitTypeID: number;
    blockID: number;
    towerID: number;
    facingID: number;
    zoningID: number;
    productID: number;
    unitStatusID: number;
    clusterID: number;
    projectID: number;
    unitNo: string;
    combinedUnitNo: string;
    areaID: number;
    categoryID: number;
    detailID: number;
    rentalStatusID: number;
    unitCertCode: string;
    termMainID: number;
    remarks: string;
}

export class ListResultDtoOfGetFacingDropdownListDto implements IListResultDtoOfGetFacingDropdownListDto {
    items: GetFacingDropdownListDto[];

    constructor(data?: IListResultDtoOfGetFacingDropdownListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetFacingDropdownListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetFacingDropdownListDto {
        let result = new ListResultDtoOfGetFacingDropdownListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetFacingDropdownListDto {
    items: GetFacingDropdownListDto[];
}

export class GetFacingDropdownListDto implements IGetFacingDropdownListDto {
    facingID: number;
    facingName: string;

    constructor(data?: IGetFacingDropdownListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.facingID = data["facingID"];
            this.facingName = data["facingName"];
        }
    }

    static fromJS(data: any): GetFacingDropdownListDto {
        let result = new GetFacingDropdownListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["facingID"] = this.facingID;
        data["facingName"] = this.facingName;
        return data; 
    }
}

export interface IGetFacingDropdownListDto {
    facingID: number;
    facingName: string;
}

export class ListResultDtoOfGetZoningDropdownListDto implements IListResultDtoOfGetZoningDropdownListDto {
    items: GetZoningDropdownListDto[];

    constructor(data?: IListResultDtoOfGetZoningDropdownListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetZoningDropdownListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetZoningDropdownListDto {
        let result = new ListResultDtoOfGetZoningDropdownListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetZoningDropdownListDto {
    items: GetZoningDropdownListDto[];
}

export class GetZoningDropdownListDto implements IGetZoningDropdownListDto {
    zoningID: number;
    zoningName: string;

    constructor(data?: IGetZoningDropdownListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.zoningID = data["zoningID"];
            this.zoningName = data["zoningName"];
        }
    }

    static fromJS(data: any): GetZoningDropdownListDto {
        let result = new GetZoningDropdownListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["zoningID"] = this.zoningID;
        data["zoningName"] = this.zoningName;
        return data; 
    }
}

export interface IGetZoningDropdownListDto {
    zoningID: number;
    zoningName: string;
}

export class CreateClusterInputDto implements ICreateClusterInputDto {
    clusterID: number;
    clusterCode: string;
    clusterName: string;
    generateType: string;
    dueDateRemarks: string;
    sortNo: number;

    constructor(data?: ICreateClusterInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.clusterID = data["clusterID"];
            this.clusterCode = data["clusterCode"];
            this.clusterName = data["clusterName"];
            this.generateType = data["generateType"];
            this.dueDateRemarks = data["dueDateRemarks"];
            this.sortNo = data["sortNo"];
        }
    }

    static fromJS(data: any): CreateClusterInputDto {
        let result = new CreateClusterInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["clusterID"] = this.clusterID;
        data["clusterCode"] = this.clusterCode;
        data["clusterName"] = this.clusterName;
        data["generateType"] = this.generateType;
        data["dueDateRemarks"] = this.dueDateRemarks;
        data["sortNo"] = this.sortNo;
        return data; 
    }
}

export interface ICreateClusterInputDto {
    clusterID: number;
    clusterCode: string;
    clusterName: string;
    generateType: string;
    dueDateRemarks: string;
    sortNo: number;
}

export class CreateUnitItemInputDto implements ICreateUnitItemInputDto {
    unitID: number;
    unitItem: UnitItemDto[];

    constructor(data?: ICreateUnitItemInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.unitID = data["unitID"];
            if (data["unitItem"] && data["unitItem"].constructor === Array) {
                this.unitItem = [];
                for (let item of data["unitItem"])
                    this.unitItem.push(UnitItemDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateUnitItemInputDto {
        let result = new CreateUnitItemInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["unitID"] = this.unitID;
        if (this.unitItem && this.unitItem.constructor === Array) {
            data["unitItem"] = [];
            for (let item of this.unitItem)
                data["unitItem"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICreateUnitItemInputDto {
    unitID: number;
    unitItem: UnitItemDto[];
}

export class UnitItemDto implements IUnitItemDto {
    dimension: string;
    itemCode: string;
    area: number;
    jumlahKamarTidur: number;
    jumlahKamarMandi: number;

    constructor(data?: IUnitItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.dimension = data["dimension"];
            this.itemCode = data["itemCode"];
            this.area = data["area"];
            this.jumlahKamarTidur = data["jumlahKamarTidur"];
            this.jumlahKamarMandi = data["jumlahKamarMandi"];
        }
    }

    static fromJS(data: any): UnitItemDto {
        let result = new UnitItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dimension"] = this.dimension;
        data["itemCode"] = this.itemCode;
        data["area"] = this.area;
        data["jumlahKamarTidur"] = this.jumlahKamarTidur;
        data["jumlahKamarMandi"] = this.jumlahKamarMandi;
        return data; 
    }
}

export interface IUnitItemDto {
    dimension: string;
    itemCode: string;
    area: number;
    jumlahKamarTidur: number;
    jumlahKamarMandi: number;
}

export class CreateUniversalExcelInputDto implements ICreateUniversalExcelInputDto {
    projectID: number;
    categoryID: number;
    productID: number;
    unitStatusID: number;
    generateType: string;
    unit: UnitDto[];

    constructor(data?: ICreateUniversalExcelInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.projectID = data["projectID"];
            this.categoryID = data["categoryID"];
            this.productID = data["productID"];
            this.unitStatusID = data["unitStatusID"];
            this.generateType = data["generateType"];
            if (data["unit"] && data["unit"].constructor === Array) {
                this.unit = [];
                for (let item of data["unit"])
                    this.unit.push(UnitDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateUniversalExcelInputDto {
        let result = new CreateUniversalExcelInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["projectID"] = this.projectID;
        data["categoryID"] = this.categoryID;
        data["productID"] = this.productID;
        data["unitStatusID"] = this.unitStatusID;
        data["generateType"] = this.generateType;
        if (this.unit && this.unit.constructor === Array) {
            data["unit"] = [];
            for (let item of this.unit)
                data["unit"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICreateUniversalExcelInputDto {
    projectID: number;
    categoryID: number;
    productID: number;
    unitStatusID: number;
    generateType: string;
    unit: UnitDto[];
}

export class UnitDto implements IUnitDto {
    unitNo: string;
    unitCode: string;
    combinedUnitNo: string;
    areaCode: string;
    clusterCode: string;
    detailCode: string;
    facingCode: string;
    zoningCode: string;
    unitItem: UnitItemDto[];

    constructor(data?: IUnitDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.unitNo = data["unitNo"];
            this.unitCode = data["unitCode"];
            this.combinedUnitNo = data["combinedUnitNo"];
            this.areaCode = data["areaCode"];
            this.clusterCode = data["clusterCode"];
            this.detailCode = data["detailCode"];
            this.facingCode = data["facingCode"];
            this.zoningCode = data["zoningCode"];
            if (data["unitItem"] && data["unitItem"].constructor === Array) {
                this.unitItem = [];
                for (let item of data["unitItem"])
                    this.unitItem.push(UnitItemDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UnitDto {
        let result = new UnitDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["unitNo"] = this.unitNo;
        data["unitCode"] = this.unitCode;
        data["combinedUnitNo"] = this.combinedUnitNo;
        data["areaCode"] = this.areaCode;
        data["clusterCode"] = this.clusterCode;
        data["detailCode"] = this.detailCode;
        data["facingCode"] = this.facingCode;
        data["zoningCode"] = this.zoningCode;
        if (this.unitItem && this.unitItem.constructor === Array) {
            data["unitItem"] = [];
            for (let item of this.unitItem)
                data["unitItem"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUnitDto {
    unitNo: string;
    unitCode: string;
    combinedUnitNo: string;
    areaCode: string;
    clusterCode: string;
    detailCode: string;
    facingCode: string;
    zoningCode: string;
    unitItem: UnitItemDto[];
}

export class ListResultDtoOfGetProjectDropdownListDto implements IListResultDtoOfGetProjectDropdownListDto {
    items: GetProjectDropdownListDto[];

    constructor(data?: IListResultDtoOfGetProjectDropdownListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetProjectDropdownListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetProjectDropdownListDto {
        let result = new ListResultDtoOfGetProjectDropdownListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetProjectDropdownListDto {
    items: GetProjectDropdownListDto[];
}

export class GetProjectDropdownListDto implements IGetProjectDropdownListDto {
    projectID: number;
    projectCode: string;
    projectName: string;

    constructor(data?: IGetProjectDropdownListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.projectID = data["projectID"];
            this.projectCode = data["projectCode"];
            this.projectName = data["projectName"];
        }
    }

    static fromJS(data: any): GetProjectDropdownListDto {
        let result = new GetProjectDropdownListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["projectID"] = this.projectID;
        data["projectCode"] = this.projectCode;
        data["projectName"] = this.projectName;
        return data; 
    }
}

export interface IGetProjectDropdownListDto {
    projectID: number;
    projectCode: string;
    projectName: string;
}

export class GetUnavailableUnitNoInputDto implements IGetUnavailableUnitNoInputDto {
    unitCode: string;
    unitNo: string;

    constructor(data?: IGetUnavailableUnitNoInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.unitCode = data["unitCode"];
            this.unitNo = data["unitNo"];
        }
    }

    static fromJS(data: any): GetUnavailableUnitNoInputDto {
        let result = new GetUnavailableUnitNoInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["unitCode"] = this.unitCode;
        data["unitNo"] = this.unitNo;
        return data; 
    }
}

export interface IGetUnavailableUnitNoInputDto {
    unitCode: string;
    unitNo: string;
}

export class ListResultDtoOfGetUnavailableUnitNoListDto implements IListResultDtoOfGetUnavailableUnitNoListDto {
    items: GetUnavailableUnitNoListDto[];

    constructor(data?: IListResultDtoOfGetUnavailableUnitNoListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetUnavailableUnitNoListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetUnavailableUnitNoListDto {
        let result = new ListResultDtoOfGetUnavailableUnitNoListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetUnavailableUnitNoListDto {
    items: GetUnavailableUnitNoListDto[];
}

export class GetUnavailableUnitNoListDto implements IGetUnavailableUnitNoListDto {
    unitNo: string;
    unitCode: string;

    constructor(data?: IGetUnavailableUnitNoListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.unitNo = data["unitNo"];
            this.unitCode = data["unitCode"];
        }
    }

    static fromJS(data: any): GetUnavailableUnitNoListDto {
        let result = new GetUnavailableUnitNoListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["unitNo"] = this.unitNo;
        data["unitCode"] = this.unitCode;
        return data; 
    }
}

export interface IGetUnavailableUnitNoListDto {
    unitNo: string;
    unitCode: string;
}

export class ListResultDtoOfGetUnitByFloorListDto implements IListResultDtoOfGetUnitByFloorListDto {
    items: GetUnitByFloorListDto[];

    constructor(data?: IListResultDtoOfGetUnitByFloorListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetUnitByFloorListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetUnitByFloorListDto {
        let result = new ListResultDtoOfGetUnitByFloorListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetUnitByFloorListDto {
    items: GetUnitByFloorListDto[];
}

export class GetUnitByFloorListDto implements IGetUnitByFloorListDto {
    unitNo: string;
    unitCode: string;

    constructor(data?: IGetUnitByFloorListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.unitNo = data["unitNo"];
            this.unitCode = data["unitCode"];
        }
    }

    static fromJS(data: any): GetUnitByFloorListDto {
        let result = new GetUnitByFloorListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["unitNo"] = this.unitNo;
        data["unitCode"] = this.unitCode;
        return data; 
    }
}

export interface IGetUnitByFloorListDto {
    unitNo: string;
    unitCode: string;
}

export class GetProductCodeByUnitCodeUnitNoDto implements IGetProductCodeByUnitCodeUnitNoDto {
    no: number;
    unitCode: string;
    unitNo: string;

    constructor(data?: IGetProductCodeByUnitCodeUnitNoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.no = data["no"];
            this.unitCode = data["unitCode"];
            this.unitNo = data["unitNo"];
        }
    }

    static fromJS(data: any): GetProductCodeByUnitCodeUnitNoDto {
        let result = new GetProductCodeByUnitCodeUnitNoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["no"] = this.no;
        data["unitCode"] = this.unitCode;
        data["unitNo"] = this.unitNo;
        return data; 
    }
}

export interface IGetProductCodeByUnitCodeUnitNoDto {
    no: number;
    unitCode: string;
    unitNo: string;
}

export class ListResultDtoOfGetProjectCodeByUnitCodeUnitNoListDto implements IListResultDtoOfGetProjectCodeByUnitCodeUnitNoListDto {
    items: GetProjectCodeByUnitCodeUnitNoListDto[];

    constructor(data?: IListResultDtoOfGetProjectCodeByUnitCodeUnitNoListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetProjectCodeByUnitCodeUnitNoListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetProjectCodeByUnitCodeUnitNoListDto {
        let result = new ListResultDtoOfGetProjectCodeByUnitCodeUnitNoListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetProjectCodeByUnitCodeUnitNoListDto {
    items: GetProjectCodeByUnitCodeUnitNoListDto[];
}

export class GetProjectCodeByUnitCodeUnitNoListDto implements IGetProjectCodeByUnitCodeUnitNoListDto {
    no: number;
    unitCode: string;
    unitNo: string;
    productCode: string;

    constructor(data?: IGetProjectCodeByUnitCodeUnitNoListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.no = data["no"];
            this.unitCode = data["unitCode"];
            this.unitNo = data["unitNo"];
            this.productCode = data["productCode"];
        }
    }

    static fromJS(data: any): GetProjectCodeByUnitCodeUnitNoListDto {
        let result = new GetProjectCodeByUnitCodeUnitNoListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["no"] = this.no;
        data["unitCode"] = this.unitCode;
        data["unitNo"] = this.unitNo;
        data["productCode"] = this.productCode;
        return data; 
    }
}

export interface IGetProjectCodeByUnitCodeUnitNoListDto {
    no: number;
    unitCode: string;
    unitNo: string;
    productCode: string;
}

export class ListResultDtoOfGetUnitByProjectCategoryListDto implements IListResultDtoOfGetUnitByProjectCategoryListDto {
    items: GetUnitByProjectCategoryListDto[];

    constructor(data?: IListResultDtoOfGetUnitByProjectCategoryListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetUnitByProjectCategoryListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetUnitByProjectCategoryListDto {
        let result = new ListResultDtoOfGetUnitByProjectCategoryListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetUnitByProjectCategoryListDto {
    items: GetUnitByProjectCategoryListDto[];
}

export class GetUnitByProjectCategoryListDto implements IGetUnitByProjectCategoryListDto {
    floor: string;
    unit: UnitStatus[];

    constructor(data?: IGetUnitByProjectCategoryListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.floor = data["floor"];
            if (data["unit"] && data["unit"].constructor === Array) {
                this.unit = [];
                for (let item of data["unit"])
                    this.unit.push(UnitStatus.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetUnitByProjectCategoryListDto {
        let result = new GetUnitByProjectCategoryListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["floor"] = this.floor;
        if (this.unit && this.unit.constructor === Array) {
            data["unit"] = [];
            for (let item of this.unit)
                data["unit"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetUnitByProjectCategoryListDto {
    floor: string;
    unit: UnitStatus[];
}

export class UnitStatus implements IUnitStatus {
    unitID: number;
    unitNo: string;
    unitStatusID: number;
    unitStatusCode: string;

    constructor(data?: IUnitStatus) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.unitID = data["unitID"];
            this.unitNo = data["unitNo"];
            this.unitStatusID = data["unitStatusID"];
            this.unitStatusCode = data["unitStatusCode"];
        }
    }

    static fromJS(data: any): UnitStatus {
        let result = new UnitStatus();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["unitID"] = this.unitID;
        data["unitNo"] = this.unitNo;
        data["unitStatusID"] = this.unitStatusID;
        data["unitStatusCode"] = this.unitStatusCode;
        return data; 
    }
}

export interface IUnitStatus {
    unitID: number;
    unitNo: string;
    unitStatusID: number;
    unitStatusCode: string;
}

export class ManageStatusMsUnitInput implements IManageStatusMsUnitInput {
    unitID: number;
    unitStatusID: number;

    constructor(data?: IManageStatusMsUnitInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.unitID = data["unitID"];
            this.unitStatusID = data["unitStatusID"];
        }
    }

    static fromJS(data: any): ManageStatusMsUnitInput {
        let result = new ManageStatusMsUnitInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["unitID"] = this.unitID;
        data["unitStatusID"] = this.unitStatusID;
        return data; 
    }
}

export interface IManageStatusMsUnitInput {
    unitID: number;
    unitStatusID: number;
}

export class ListResultDtoOfGetUnitCodeByProjectListDto implements IListResultDtoOfGetUnitCodeByProjectListDto {
    items: GetUnitCodeByProjectListDto[];

    constructor(data?: IListResultDtoOfGetUnitCodeByProjectListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetUnitCodeByProjectListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetUnitCodeByProjectListDto {
        let result = new ListResultDtoOfGetUnitCodeByProjectListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetUnitCodeByProjectListDto {
    items: GetUnitCodeByProjectListDto[];
}

export class GetUnitCodeByProjectListDto implements IGetUnitCodeByProjectListDto {
    unitCode: string;

    constructor(data?: IGetUnitCodeByProjectListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.unitCode = data["unitCode"];
        }
    }

    static fromJS(data: any): GetUnitCodeByProjectListDto {
        let result = new GetUnitCodeByProjectListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["unitCode"] = this.unitCode;
        return data; 
    }
}

export interface IGetUnitCodeByProjectListDto {
    unitCode: string;
}

export class ListResultDtoOfGetUnitNoByUnitCodeListDto implements IListResultDtoOfGetUnitNoByUnitCodeListDto {
    items: GetUnitNoByUnitCodeListDto[];

    constructor(data?: IListResultDtoOfGetUnitNoByUnitCodeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetUnitNoByUnitCodeListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetUnitNoByUnitCodeListDto {
        let result = new ListResultDtoOfGetUnitNoByUnitCodeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetUnitNoByUnitCodeListDto {
    items: GetUnitNoByUnitCodeListDto[];
}

export class GetUnitNoByUnitCodeListDto implements IGetUnitNoByUnitCodeListDto {
    id: number;
    unitNo: string;

    constructor(data?: IGetUnitNoByUnitCodeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.unitNo = data["unitNo"];
        }
    }

    static fromJS(data: any): GetUnitNoByUnitCodeListDto {
        let result = new GetUnitNoByUnitCodeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["unitNo"] = this.unitNo;
        return data; 
    }
}

export interface IGetUnitNoByUnitCodeListDto {
    id: number;
    unitNo: string;
}

export class ListResultDtoOfGetFloorByClusterListDto implements IListResultDtoOfGetFloorByClusterListDto {
    items: GetFloorByClusterListDto[];

    constructor(data?: IListResultDtoOfGetFloorByClusterListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetFloorByClusterListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetFloorByClusterListDto {
        let result = new ListResultDtoOfGetFloorByClusterListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetFloorByClusterListDto {
    items: GetFloorByClusterListDto[];
}

export class GetFloorByClusterListDto implements IGetFloorByClusterListDto {
    unitCodeID: number;
    floor: string;

    constructor(data?: IGetFloorByClusterListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.unitCodeID = data["unitCodeID"];
            this.floor = data["floor"];
        }
    }

    static fromJS(data: any): GetFloorByClusterListDto {
        let result = new GetFloorByClusterListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["unitCodeID"] = this.unitCodeID;
        data["floor"] = this.floor;
        return data; 
    }
}

export interface IGetFloorByClusterListDto {
    unitCodeID: number;
    floor: string;
}

export class ListResultDtoOfGetUnitByClusterListDto implements IListResultDtoOfGetUnitByClusterListDto {
    items: GetUnitByClusterListDto[];

    constructor(data?: IListResultDtoOfGetUnitByClusterListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetUnitByClusterListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetUnitByClusterListDto {
        let result = new ListResultDtoOfGetUnitByClusterListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetUnitByClusterListDto {
    items: GetUnitByClusterListDto[];
}

export class GetUnitByClusterListDto implements IGetUnitByClusterListDto {
    unitID: number;
    unitCodeID: number;
    zoningID: number;
    facingID: number;
    unitNo: string;
    unitCode: string;
    facingName: string;

    constructor(data?: IGetUnitByClusterListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.unitID = data["unitID"];
            this.unitCodeID = data["unitCodeID"];
            this.zoningID = data["zoningID"];
            this.facingID = data["facingID"];
            this.unitNo = data["unitNo"];
            this.unitCode = data["unitCode"];
            this.facingName = data["facingName"];
        }
    }

    static fromJS(data: any): GetUnitByClusterListDto {
        let result = new GetUnitByClusterListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["unitID"] = this.unitID;
        data["unitCodeID"] = this.unitCodeID;
        data["zoningID"] = this.zoningID;
        data["facingID"] = this.facingID;
        data["unitNo"] = this.unitNo;
        data["unitCode"] = this.unitCode;
        data["facingName"] = this.facingName;
        return data; 
    }
}

export interface IGetUnitByClusterListDto {
    unitID: number;
    unitCodeID: number;
    zoningID: number;
    facingID: number;
    unitNo: string;
    unitCode: string;
    facingName: string;
}

export class ListResultDtoOfGetUnitByProjectClusterTermCodeTermNoDto implements IListResultDtoOfGetUnitByProjectClusterTermCodeTermNoDto {
    items: GetUnitByProjectClusterTermCodeTermNoDto[];

    constructor(data?: IListResultDtoOfGetUnitByProjectClusterTermCodeTermNoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetUnitByProjectClusterTermCodeTermNoDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetUnitByProjectClusterTermCodeTermNoDto {
        let result = new ListResultDtoOfGetUnitByProjectClusterTermCodeTermNoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetUnitByProjectClusterTermCodeTermNoDto {
    items: GetUnitByProjectClusterTermCodeTermNoDto[];
}

export class GetUnitByProjectClusterTermCodeTermNoDto implements IGetUnitByProjectClusterTermCodeTermNoDto {
    unitNo: string;
    combinedUnitNo: string;
    unitCertCode: string;
    remarks: string;
    prevUnitNo: string;
    entityID: number;
    unitCodeID: number;
    areaID: number;
    projectID: number;
    categoryID: number;
    clusterID: number;
    productID: number;
    detailID: number;
    zoningID: number;
    facingID: number;
    unitStatusID: number;
    rentalStatusID: number;
    termMainID: number;
    tokenNo: number;

    constructor(data?: IGetUnitByProjectClusterTermCodeTermNoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.unitNo = data["unitNo"];
            this.combinedUnitNo = data["combinedUnitNo"];
            this.unitCertCode = data["unitCertCode"];
            this.remarks = data["remarks"];
            this.prevUnitNo = data["prevUnitNo"];
            this.entityID = data["entityID"];
            this.unitCodeID = data["unitCodeID"];
            this.areaID = data["areaID"];
            this.projectID = data["projectID"];
            this.categoryID = data["categoryID"];
            this.clusterID = data["clusterID"];
            this.productID = data["productID"];
            this.detailID = data["detailID"];
            this.zoningID = data["zoningID"];
            this.facingID = data["facingID"];
            this.unitStatusID = data["unitStatusID"];
            this.rentalStatusID = data["rentalStatusID"];
            this.termMainID = data["termMainID"];
            this.tokenNo = data["tokenNo"];
        }
    }

    static fromJS(data: any): GetUnitByProjectClusterTermCodeTermNoDto {
        let result = new GetUnitByProjectClusterTermCodeTermNoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["unitNo"] = this.unitNo;
        data["combinedUnitNo"] = this.combinedUnitNo;
        data["unitCertCode"] = this.unitCertCode;
        data["remarks"] = this.remarks;
        data["prevUnitNo"] = this.prevUnitNo;
        data["entityID"] = this.entityID;
        data["unitCodeID"] = this.unitCodeID;
        data["areaID"] = this.areaID;
        data["projectID"] = this.projectID;
        data["categoryID"] = this.categoryID;
        data["clusterID"] = this.clusterID;
        data["productID"] = this.productID;
        data["detailID"] = this.detailID;
        data["zoningID"] = this.zoningID;
        data["facingID"] = this.facingID;
        data["unitStatusID"] = this.unitStatusID;
        data["rentalStatusID"] = this.rentalStatusID;
        data["termMainID"] = this.termMainID;
        data["tokenNo"] = this.tokenNo;
        return data; 
    }
}

export interface IGetUnitByProjectClusterTermCodeTermNoDto {
    unitNo: string;
    combinedUnitNo: string;
    unitCertCode: string;
    remarks: string;
    prevUnitNo: string;
    entityID: number;
    unitCodeID: number;
    areaID: number;
    projectID: number;
    categoryID: number;
    clusterID: number;
    productID: number;
    detailID: number;
    zoningID: number;
    facingID: number;
    unitStatusID: number;
    rentalStatusID: number;
    termMainID: number;
    tokenNo: number;
}

export class ListResultDtoOfGetAllMsUnitStatusListDto implements IListResultDtoOfGetAllMsUnitStatusListDto {
    items: GetAllMsUnitStatusListDto[];

    constructor(data?: IListResultDtoOfGetAllMsUnitStatusListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetAllMsUnitStatusListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetAllMsUnitStatusListDto {
        let result = new ListResultDtoOfGetAllMsUnitStatusListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetAllMsUnitStatusListDto {
    items: GetAllMsUnitStatusListDto[];
}

export class GetAllMsUnitStatusListDto implements IGetAllMsUnitStatusListDto {
    id: number;
    unitStatusCode: string;
    unitStatusName: string;
    isActive: boolean;

    constructor(data?: IGetAllMsUnitStatusListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.unitStatusCode = data["unitStatusCode"];
            this.unitStatusName = data["unitStatusName"];
            this.isActive = data["isActive"];
        }
    }

    static fromJS(data: any): GetAllMsUnitStatusListDto {
        let result = new GetAllMsUnitStatusListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["unitStatusCode"] = this.unitStatusCode;
        data["unitStatusName"] = this.unitStatusName;
        data["isActive"] = this.isActive;
        return data; 
    }
}

export interface IGetAllMsUnitStatusListDto {
    id: number;
    unitStatusCode: string;
    unitStatusName: string;
    isActive: boolean;
}

export class CreateMsZoningInputDto implements ICreateMsZoningInputDto {
    zoningCode: string;
    zoningName: string;

    constructor(data?: ICreateMsZoningInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.zoningCode = data["zoningCode"];
            this.zoningName = data["zoningName"];
        }
    }

    static fromJS(data: any): CreateMsZoningInputDto {
        let result = new CreateMsZoningInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["zoningCode"] = this.zoningCode;
        data["zoningName"] = this.zoningName;
        return data; 
    }
}

export interface ICreateMsZoningInputDto {
    zoningCode: string;
    zoningName: string;
}

export class ListResultDtoOfGetAllMsZoningListDto implements IListResultDtoOfGetAllMsZoningListDto {
    items: GetAllMsZoningListDto[];

    constructor(data?: IListResultDtoOfGetAllMsZoningListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetAllMsZoningListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetAllMsZoningListDto {
        let result = new ListResultDtoOfGetAllMsZoningListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetAllMsZoningListDto {
    items: GetAllMsZoningListDto[];
}

export class GetAllMsZoningListDto implements IGetAllMsZoningListDto {
    zoningID: number;
    zoningCode: string;
    zoningName: string;

    constructor(data?: IGetAllMsZoningListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.zoningID = data["zoningID"];
            this.zoningCode = data["zoningCode"];
            this.zoningName = data["zoningName"];
        }
    }

    static fromJS(data: any): GetAllMsZoningListDto {
        let result = new GetAllMsZoningListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["zoningID"] = this.zoningID;
        data["zoningCode"] = this.zoningCode;
        data["zoningName"] = this.zoningName;
        return data; 
    }
}

export interface IGetAllMsZoningListDto {
    zoningID: number;
    zoningCode: string;
    zoningName: string;
}

export class UpdateMsZoningInputDto implements IUpdateMsZoningInputDto {
    zoningID: number;
    zoningCode: string;
    zoningName: string;

    constructor(data?: IUpdateMsZoningInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.zoningID = data["zoningID"];
            this.zoningCode = data["zoningCode"];
            this.zoningName = data["zoningName"];
        }
    }

    static fromJS(data: any): UpdateMsZoningInputDto {
        let result = new UpdateMsZoningInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["zoningID"] = this.zoningID;
        data["zoningCode"] = this.zoningCode;
        data["zoningName"] = this.zoningName;
        return data; 
    }
}

export interface IUpdateMsZoningInputDto {
    zoningID: number;
    zoningCode: string;
    zoningName: string;
}

export class GetNotificationsOutput implements IGetNotificationsOutput {
    unreadCount: number;
    totalCount: number;
    items: UserNotification[];

    constructor(data?: IGetNotificationsOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.unreadCount = data["unreadCount"];
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(UserNotification.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetNotificationsOutput {
        let result = new GetNotificationsOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["unreadCount"] = this.unreadCount;
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetNotificationsOutput {
    unreadCount: number;
    totalCount: number;
    items: UserNotification[];
}

export class UserNotification implements IUserNotification {
    tenantId: number;
    userId: number;
    state: UserNotificationState;
    notification: TenantNotification;
    id: string;

    constructor(data?: IUserNotification) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.userId = data["userId"];
            this.state = data["state"];
            this.notification = data["notification"] ? TenantNotification.fromJS(data["notification"]) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): UserNotification {
        let result = new UserNotification();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["userId"] = this.userId;
        data["state"] = this.state;
        data["notification"] = this.notification ? this.notification.toJSON() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface IUserNotification {
    tenantId: number;
    userId: number;
    state: UserNotificationState;
    notification: TenantNotification;
    id: string;
}

export class TenantNotification implements ITenantNotification {
    tenantId: number;
    notificationName: string;
    data: NotificationData;
    entityType: string;
    entityTypeName: string;
    entityId: any;
    severity: TenantNotificationSeverity;
    creationTime: moment.Moment;
    id: string;

    constructor(data?: ITenantNotification) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.notificationName = data["notificationName"];
            this.data = data["data"] ? NotificationData.fromJS(data["data"]) : <any>undefined;
            this.entityType = data["entityType"];
            this.entityTypeName = data["entityTypeName"];
            if (data["entityId"]) {
                this.entityId = {};
                for (let key in data["entityId"]) {
                    if (data["entityId"].hasOwnProperty(key))
                        this.entityId[key] = data["entityId"][key];
                }
            }
            this.severity = data["severity"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): TenantNotification {
        let result = new TenantNotification();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["notificationName"] = this.notificationName;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["entityType"] = this.entityType;
        data["entityTypeName"] = this.entityTypeName;
        if (this.entityId) {
            data["entityId"] = {};
            for (let key in this.entityId) {
                if (this.entityId.hasOwnProperty(key))
                    data["entityId"][key] = this.entityId[key];
            }
        }
        data["severity"] = this.severity;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface ITenantNotification {
    tenantId: number;
    notificationName: string;
    data: NotificationData;
    entityType: string;
    entityTypeName: string;
    entityId: any;
    severity: TenantNotificationSeverity;
    creationTime: moment.Moment;
    id: string;
}

export class NotificationData implements INotificationData {
    type: string;
    properties: { [key: string] : any; };

    constructor(data?: INotificationData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.type = data["type"];
            if (data["properties"]) {
                this.properties = {};
                for (let key in data["properties"]) {
                    if (data["properties"].hasOwnProperty(key))
                        this.properties[key] = data["properties"][key];
                }
            }
        }
    }

    static fromJS(data: any): NotificationData {
        let result = new NotificationData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        if (this.properties) {
            data["properties"] = {};
            for (let key in this.properties) {
                if (this.properties.hasOwnProperty(key))
                    data["properties"][key] = this.properties[key];
            }
        }
        return data; 
    }
}

export interface INotificationData {
    type: string;
    properties: { [key: string] : any; };
}

export class EntityDtoOfGuid implements IEntityDtoOfGuid {
    id: string;

    constructor(data?: IEntityDtoOfGuid) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
        }
    }

    static fromJS(data: any): EntityDtoOfGuid {
        let result = new EntityDtoOfGuid();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }
}

export interface IEntityDtoOfGuid {
    id: string;
}

export class GetNotificationSettingsOutput implements IGetNotificationSettingsOutput {
    receiveNotifications: boolean;
    notifications: NotificationSubscriptionWithDisplayNameDto[];

    constructor(data?: IGetNotificationSettingsOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.receiveNotifications = data["receiveNotifications"];
            if (data["notifications"] && data["notifications"].constructor === Array) {
                this.notifications = [];
                for (let item of data["notifications"])
                    this.notifications.push(NotificationSubscriptionWithDisplayNameDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetNotificationSettingsOutput {
        let result = new GetNotificationSettingsOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["receiveNotifications"] = this.receiveNotifications;
        if (this.notifications && this.notifications.constructor === Array) {
            data["notifications"] = [];
            for (let item of this.notifications)
                data["notifications"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetNotificationSettingsOutput {
    receiveNotifications: boolean;
    notifications: NotificationSubscriptionWithDisplayNameDto[];
}

export class NotificationSubscriptionWithDisplayNameDto implements INotificationSubscriptionWithDisplayNameDto {
    displayName: string;
    description: string;
    name: string;
    isSubscribed: boolean;

    constructor(data?: INotificationSubscriptionWithDisplayNameDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.displayName = data["displayName"];
            this.description = data["description"];
            this.name = data["name"];
            this.isSubscribed = data["isSubscribed"];
        }
    }

    static fromJS(data: any): NotificationSubscriptionWithDisplayNameDto {
        let result = new NotificationSubscriptionWithDisplayNameDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["name"] = this.name;
        data["isSubscribed"] = this.isSubscribed;
        return data; 
    }
}

export interface INotificationSubscriptionWithDisplayNameDto {
    displayName: string;
    description: string;
    name: string;
    isSubscribed: boolean;
}

export class UpdateNotificationSettingsInput implements IUpdateNotificationSettingsInput {
    receiveNotifications: boolean;
    notifications: NotificationSubscriptionDto[];

    constructor(data?: IUpdateNotificationSettingsInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.receiveNotifications = data["receiveNotifications"];
            if (data["notifications"] && data["notifications"].constructor === Array) {
                this.notifications = [];
                for (let item of data["notifications"])
                    this.notifications.push(NotificationSubscriptionDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UpdateNotificationSettingsInput {
        let result = new UpdateNotificationSettingsInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["receiveNotifications"] = this.receiveNotifications;
        if (this.notifications && this.notifications.constructor === Array) {
            data["notifications"] = [];
            for (let item of this.notifications)
                data["notifications"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUpdateNotificationSettingsInput {
    receiveNotifications: boolean;
    notifications: NotificationSubscriptionDto[];
}

export class NotificationSubscriptionDto implements INotificationSubscriptionDto {
    name: string;
    isSubscribed: boolean;

    constructor(data?: INotificationSubscriptionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.isSubscribed = data["isSubscribed"];
        }
    }

    static fromJS(data: any): NotificationSubscriptionDto {
        let result = new NotificationSubscriptionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["isSubscribed"] = this.isSubscribed;
        return data; 
    }
}

export interface INotificationSubscriptionDto {
    name: string;
    isSubscribed: boolean;
}

export class ListResultDtoOfOrganizationUnitDto implements IListResultDtoOfOrganizationUnitDto {
    items: OrganizationUnitDto[];

    constructor(data?: IListResultDtoOfOrganizationUnitDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(OrganizationUnitDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfOrganizationUnitDto {
        let result = new ListResultDtoOfOrganizationUnitDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfOrganizationUnitDto {
    items: OrganizationUnitDto[];
}

export class OrganizationUnitDto implements IOrganizationUnitDto {
    parentId: number;
    code: string;
    displayName: string;
    memberCount: number;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;
    id: number;

    constructor(data?: IOrganizationUnitDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.parentId = data["parentId"];
            this.code = data["code"];
            this.displayName = data["displayName"];
            this.memberCount = data["memberCount"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): OrganizationUnitDto {
        let result = new OrganizationUnitDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["parentId"] = this.parentId;
        data["code"] = this.code;
        data["displayName"] = this.displayName;
        data["memberCount"] = this.memberCount;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }
}

export interface IOrganizationUnitDto {
    parentId: number;
    code: string;
    displayName: string;
    memberCount: number;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;
    id: number;
}

export class PagedResultDtoOfOrganizationUnitUserListDto implements IPagedResultDtoOfOrganizationUnitUserListDto {
    totalCount: number;
    items: OrganizationUnitUserListDto[];

    constructor(data?: IPagedResultDtoOfOrganizationUnitUserListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(OrganizationUnitUserListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfOrganizationUnitUserListDto {
        let result = new PagedResultDtoOfOrganizationUnitUserListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfOrganizationUnitUserListDto {
    totalCount: number;
    items: OrganizationUnitUserListDto[];
}

export class OrganizationUnitUserListDto implements IOrganizationUnitUserListDto {
    name: string;
    surname: string;
    userName: string;
    emailAddress: string;
    profilePictureId: string;
    addedTime: moment.Moment;
    id: number;

    constructor(data?: IOrganizationUnitUserListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.surname = data["surname"];
            this.userName = data["userName"];
            this.emailAddress = data["emailAddress"];
            this.profilePictureId = data["profilePictureId"];
            this.addedTime = data["addedTime"] ? moment(data["addedTime"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): OrganizationUnitUserListDto {
        let result = new OrganizationUnitUserListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["userName"] = this.userName;
        data["emailAddress"] = this.emailAddress;
        data["profilePictureId"] = this.profilePictureId;
        data["addedTime"] = this.addedTime ? this.addedTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface IOrganizationUnitUserListDto {
    name: string;
    surname: string;
    userName: string;
    emailAddress: string;
    profilePictureId: string;
    addedTime: moment.Moment;
    id: number;
}

export class CreateOrganizationUnitInput implements ICreateOrganizationUnitInput {
    parentId: number;
    displayName: string;

    constructor(data?: ICreateOrganizationUnitInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.parentId = data["parentId"];
            this.displayName = data["displayName"];
        }
    }

    static fromJS(data: any): CreateOrganizationUnitInput {
        let result = new CreateOrganizationUnitInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["parentId"] = this.parentId;
        data["displayName"] = this.displayName;
        return data; 
    }
}

export interface ICreateOrganizationUnitInput {
    parentId: number;
    displayName: string;
}

export class UpdateOrganizationUnitInput implements IUpdateOrganizationUnitInput {
    id: number;
    displayName: string;

    constructor(data?: IUpdateOrganizationUnitInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.displayName = data["displayName"];
        }
    }

    static fromJS(data: any): UpdateOrganizationUnitInput {
        let result = new UpdateOrganizationUnitInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["displayName"] = this.displayName;
        return data; 
    }
}

export interface IUpdateOrganizationUnitInput {
    id: number;
    displayName: string;
}

export class MoveOrganizationUnitInput implements IMoveOrganizationUnitInput {
    id: number;
    newParentId: number;

    constructor(data?: IMoveOrganizationUnitInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.newParentId = data["newParentId"];
        }
    }

    static fromJS(data: any): MoveOrganizationUnitInput {
        let result = new MoveOrganizationUnitInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["newParentId"] = this.newParentId;
        return data; 
    }
}

export interface IMoveOrganizationUnitInput {
    id: number;
    newParentId: number;
}

export class UsersToOrganizationUnitInput implements IUsersToOrganizationUnitInput {
    userIds: number[];
    organizationUnitId: number;

    constructor(data?: IUsersToOrganizationUnitInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["userIds"] && data["userIds"].constructor === Array) {
                this.userIds = [];
                for (let item of data["userIds"])
                    this.userIds.push(item);
            }
            this.organizationUnitId = data["organizationUnitId"];
        }
    }

    static fromJS(data: any): UsersToOrganizationUnitInput {
        let result = new UsersToOrganizationUnitInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.userIds && this.userIds.constructor === Array) {
            data["userIds"] = [];
            for (let item of this.userIds)
                data["userIds"].push(item);
        }
        data["organizationUnitId"] = this.organizationUnitId;
        return data; 
    }
}

export interface IUsersToOrganizationUnitInput {
    userIds: number[];
    organizationUnitId: number;
}

export class FindOrganizationUnitUsersInput implements IFindOrganizationUnitUsersInput {
    organizationUnitId: number;
    maxResultCount: number;
    skipCount: number;
    filter: string;

    constructor(data?: IFindOrganizationUnitUsersInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.organizationUnitId = data["organizationUnitId"];
            this.maxResultCount = data["maxResultCount"];
            this.skipCount = data["skipCount"];
            this.filter = data["filter"];
        }
    }

    static fromJS(data: any): FindOrganizationUnitUsersInput {
        let result = new FindOrganizationUnitUsersInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["organizationUnitId"] = this.organizationUnitId;
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["filter"] = this.filter;
        return data; 
    }
}

export interface IFindOrganizationUnitUsersInput {
    organizationUnitId: number;
    maxResultCount: number;
    skipCount: number;
    filter: string;
}

export class PaymentInfoDto implements IPaymentInfoDto {
    edition: EditionSelectDto;
    additionalPrice: number;

    constructor(data?: IPaymentInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.edition = data["edition"] ? EditionSelectDto.fromJS(data["edition"]) : <any>undefined;
            this.additionalPrice = data["additionalPrice"];
        }
    }

    static fromJS(data: any): PaymentInfoDto {
        let result = new PaymentInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["edition"] = this.edition ? this.edition.toJSON() : <any>undefined;
        data["additionalPrice"] = this.additionalPrice;
        return data; 
    }
}

export interface IPaymentInfoDto {
    edition: EditionSelectDto;
    additionalPrice: number;
}

export class EditionSelectDto implements IEditionSelectDto {
    id: number;
    name: string;
    displayName: string;
    expiringEditionId: number;
    monthlyPrice: number;
    annualPrice: number;
    trialDayCount: number;
    waitingDayAfterExpire: number;
    isFree: boolean;
    additionalData: AdditionalData;

    constructor(data?: IEditionSelectDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.expiringEditionId = data["expiringEditionId"];
            this.monthlyPrice = data["monthlyPrice"];
            this.annualPrice = data["annualPrice"];
            this.trialDayCount = data["trialDayCount"];
            this.waitingDayAfterExpire = data["waitingDayAfterExpire"];
            this.isFree = data["isFree"];
            this.additionalData = data["additionalData"] ? AdditionalData.fromJS(data["additionalData"]) : <any>undefined;
        }
    }

    static fromJS(data: any): EditionSelectDto {
        let result = new EditionSelectDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["expiringEditionId"] = this.expiringEditionId;
        data["monthlyPrice"] = this.monthlyPrice;
        data["annualPrice"] = this.annualPrice;
        data["trialDayCount"] = this.trialDayCount;
        data["waitingDayAfterExpire"] = this.waitingDayAfterExpire;
        data["isFree"] = this.isFree;
        data["additionalData"] = this.additionalData ? this.additionalData.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IEditionSelectDto {
    id: number;
    name: string;
    displayName: string;
    expiringEditionId: number;
    monthlyPrice: number;
    annualPrice: number;
    trialDayCount: number;
    waitingDayAfterExpire: number;
    isFree: boolean;
    additionalData: AdditionalData;
}

export class CreatePaymentDto implements ICreatePaymentDto {
    editionId: number;
    editionPaymentType: CreatePaymentDtoEditionPaymentType;
    paymentPeriodType: CreatePaymentDtoPaymentPeriodType;
    subscriptionPaymentGatewayType: CreatePaymentDtoSubscriptionPaymentGatewayType;

    constructor(data?: ICreatePaymentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.editionId = data["editionId"];
            this.editionPaymentType = data["editionPaymentType"];
            this.paymentPeriodType = data["paymentPeriodType"];
            this.subscriptionPaymentGatewayType = data["subscriptionPaymentGatewayType"];
        }
    }

    static fromJS(data: any): CreatePaymentDto {
        let result = new CreatePaymentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["editionId"] = this.editionId;
        data["editionPaymentType"] = this.editionPaymentType;
        data["paymentPeriodType"] = this.paymentPeriodType;
        data["subscriptionPaymentGatewayType"] = this.subscriptionPaymentGatewayType;
        return data; 
    }
}

export interface ICreatePaymentDto {
    editionId: number;
    editionPaymentType: CreatePaymentDtoEditionPaymentType;
    paymentPeriodType: CreatePaymentDtoPaymentPeriodType;
    subscriptionPaymentGatewayType: CreatePaymentDtoSubscriptionPaymentGatewayType;
}

export class ExecutePaymentDto implements IExecutePaymentDto {
    gateway: ExecutePaymentDtoGateway;
    editionPaymentType: ExecutePaymentDtoEditionPaymentType;
    editionId: number;
    paymentPeriodType: ExecutePaymentDtoPaymentPeriodType;
    additionalData: { [key: string] : string; };

    constructor(data?: IExecutePaymentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.gateway = data["gateway"];
            this.editionPaymentType = data["editionPaymentType"];
            this.editionId = data["editionId"];
            this.paymentPeriodType = data["paymentPeriodType"];
            if (data["additionalData"]) {
                this.additionalData = {};
                for (let key in data["additionalData"]) {
                    if (data["additionalData"].hasOwnProperty(key))
                        this.additionalData[key] = data["additionalData"][key];
                }
            }
        }
    }

    static fromJS(data: any): ExecutePaymentDto {
        let result = new ExecutePaymentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["gateway"] = this.gateway;
        data["editionPaymentType"] = this.editionPaymentType;
        data["editionId"] = this.editionId;
        data["paymentPeriodType"] = this.paymentPeriodType;
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    data["additionalData"][key] = this.additionalData[key];
            }
        }
        return data; 
    }
}

export interface IExecutePaymentDto {
    gateway: ExecutePaymentDtoGateway;
    editionPaymentType: ExecutePaymentDtoEditionPaymentType;
    editionId: number;
    paymentPeriodType: ExecutePaymentDtoPaymentPeriodType;
    additionalData: { [key: string] : string; };
}

export class PagedResultDtoOfSubscriptionPaymentListDto implements IPagedResultDtoOfSubscriptionPaymentListDto {
    totalCount: number;
    items: SubscriptionPaymentListDto[];

    constructor(data?: IPagedResultDtoOfSubscriptionPaymentListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(SubscriptionPaymentListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfSubscriptionPaymentListDto {
        let result = new PagedResultDtoOfSubscriptionPaymentListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfSubscriptionPaymentListDto {
    totalCount: number;
    items: SubscriptionPaymentListDto[];
}

export class SubscriptionPaymentListDto implements ISubscriptionPaymentListDto {
    gateway: string;
    amount: number;
    editionId: number;
    dayCount: number;
    paymentPeriodType: string;
    paymentId: string;
    payerId: string;
    status: string;
    editionDisplayName: string;
    tenantId: number;
    invoiceNo: string;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;
    id: number;

    constructor(data?: ISubscriptionPaymentListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.gateway = data["gateway"];
            this.amount = data["amount"];
            this.editionId = data["editionId"];
            this.dayCount = data["dayCount"];
            this.paymentPeriodType = data["paymentPeriodType"];
            this.paymentId = data["paymentId"];
            this.payerId = data["payerId"];
            this.status = data["status"];
            this.editionDisplayName = data["editionDisplayName"];
            this.tenantId = data["tenantId"];
            this.invoiceNo = data["invoiceNo"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): SubscriptionPaymentListDto {
        let result = new SubscriptionPaymentListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["gateway"] = this.gateway;
        data["amount"] = this.amount;
        data["editionId"] = this.editionId;
        data["dayCount"] = this.dayCount;
        data["paymentPeriodType"] = this.paymentPeriodType;
        data["paymentId"] = this.paymentId;
        data["payerId"] = this.payerId;
        data["status"] = this.status;
        data["editionDisplayName"] = this.editionDisplayName;
        data["tenantId"] = this.tenantId;
        data["invoiceNo"] = this.invoiceNo;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }
}

export interface ISubscriptionPaymentListDto {
    gateway: string;
    amount: number;
    editionId: number;
    dayCount: number;
    paymentPeriodType: string;
    paymentId: string;
    payerId: string;
    status: string;
    editionDisplayName: string;
    tenantId: number;
    invoiceNo: string;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;
    id: number;
}

export class ListResultDtoOfFlatPermissionWithLevelDto implements IListResultDtoOfFlatPermissionWithLevelDto {
    items: FlatPermissionWithLevelDto[];

    constructor(data?: IListResultDtoOfFlatPermissionWithLevelDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(FlatPermissionWithLevelDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfFlatPermissionWithLevelDto {
        let result = new ListResultDtoOfFlatPermissionWithLevelDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfFlatPermissionWithLevelDto {
    items: FlatPermissionWithLevelDto[];
}

export class FlatPermissionWithLevelDto implements IFlatPermissionWithLevelDto {
    level: number;
    parentName: string;
    name: string;
    displayName: string;
    description: string;
    isGrantedByDefault: boolean;

    constructor(data?: IFlatPermissionWithLevelDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.level = data["level"];
            this.parentName = data["parentName"];
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.description = data["description"];
            this.isGrantedByDefault = data["isGrantedByDefault"];
        }
    }

    static fromJS(data: any): FlatPermissionWithLevelDto {
        let result = new FlatPermissionWithLevelDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["level"] = this.level;
        data["parentName"] = this.parentName;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["isGrantedByDefault"] = this.isGrantedByDefault;
        return data; 
    }
}

export interface IFlatPermissionWithLevelDto {
    level: number;
    parentName: string;
    name: string;
    displayName: string;
    description: string;
    isGrantedByDefault: boolean;
}

export class PagedResultDtoOfGetPersonalsByKeywordList implements IPagedResultDtoOfGetPersonalsByKeywordList {
    totalCount: number;
    items: GetPersonalsByKeywordList[];

    constructor(data?: IPagedResultDtoOfGetPersonalsByKeywordList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetPersonalsByKeywordList.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfGetPersonalsByKeywordList {
        let result = new PagedResultDtoOfGetPersonalsByKeywordList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfGetPersonalsByKeywordList {
    totalCount: number;
    items: GetPersonalsByKeywordList[];
}

export class GetPersonalsByKeywordList implements IGetPersonalsByKeywordList {
    psCode: string;
    name: string;
    birthDate: string;
    modifTime: string;
    updatedBy: number;
    isInstitute: boolean;

    constructor(data?: IGetPersonalsByKeywordList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.psCode = data["psCode"];
            this.name = data["name"];
            this.birthDate = data["birthDate"];
            this.modifTime = data["modifTime"];
            this.updatedBy = data["updatedBy"];
            this.isInstitute = data["isInstitute"];
        }
    }

    static fromJS(data: any): GetPersonalsByKeywordList {
        let result = new GetPersonalsByKeywordList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["psCode"] = this.psCode;
        data["name"] = this.name;
        data["birthDate"] = this.birthDate;
        data["modifTime"] = this.modifTime;
        data["updatedBy"] = this.updatedBy;
        data["isInstitute"] = this.isInstitute;
        return data; 
    }
}

export interface IGetPersonalsByKeywordList {
    psCode: string;
    name: string;
    birthDate: string;
    modifTime: string;
    updatedBy: number;
    isInstitute: boolean;
}

export class CreatePersonalDto implements ICreatePersonalDto {
    psCode: string;
    name: string;
    sex: string;
    birthDate: moment.Moment;
    birthPlace: string;
    marCode: string;
    relCode: string;
    bloodCode: string;
    occID: string;
    nationID: string;
    familyStatus: string;
    fpTransCode: string;
    grade: string;
    isActive: boolean;
    remarks: string;
    isInstitute: boolean;

    constructor(data?: ICreatePersonalDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.psCode = data["psCode"];
            this.name = data["name"];
            this.sex = data["sex"];
            this.birthDate = data["birthDate"] ? moment(data["birthDate"].toString()) : <any>undefined;
            this.birthPlace = data["birthPlace"];
            this.marCode = data["marCode"];
            this.relCode = data["relCode"];
            this.bloodCode = data["bloodCode"];
            this.occID = data["occID"];
            this.nationID = data["nationID"];
            this.familyStatus = data["familyStatus"];
            this.fpTransCode = data["fpTransCode"];
            this.grade = data["grade"];
            this.isActive = data["isActive"];
            this.remarks = data["remarks"];
            this.isInstitute = data["isInstitute"];
        }
    }

    static fromJS(data: any): CreatePersonalDto {
        let result = new CreatePersonalDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["psCode"] = this.psCode;
        data["name"] = this.name;
        data["sex"] = this.sex;
        data["birthDate"] = this.birthDate ? this.birthDate.toISOString() : <any>undefined;
        data["birthPlace"] = this.birthPlace;
        data["marCode"] = this.marCode;
        data["relCode"] = this.relCode;
        data["bloodCode"] = this.bloodCode;
        data["occID"] = this.occID;
        data["nationID"] = this.nationID;
        data["familyStatus"] = this.familyStatus;
        data["fpTransCode"] = this.fpTransCode;
        data["grade"] = this.grade;
        data["isActive"] = this.isActive;
        data["remarks"] = this.remarks;
        data["isInstitute"] = this.isInstitute;
        return data; 
    }
}

export interface ICreatePersonalDto {
    psCode: string;
    name: string;
    sex: string;
    birthDate: moment.Moment;
    birthPlace: string;
    marCode: string;
    relCode: string;
    bloodCode: string;
    occID: string;
    nationID: string;
    familyStatus: string;
    fpTransCode: string;
    grade: string;
    isActive: boolean;
    remarks: string;
    isInstitute: boolean;
}

export class CreateKeyPeopleDto implements ICreateKeyPeopleDto {
    psCode: string;
    refID: number;
    keyPeopleId: number;
    keyPeopleName: string;
    keyPeoplePSCode: string;

    constructor(data?: ICreateKeyPeopleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.psCode = data["psCode"];
            this.refID = data["refID"];
            this.keyPeopleId = data["keyPeopleId"];
            this.keyPeopleName = data["keyPeopleName"];
            this.keyPeoplePSCode = data["keyPeoplePSCode"];
        }
    }

    static fromJS(data: any): CreateKeyPeopleDto {
        let result = new CreateKeyPeopleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["psCode"] = this.psCode;
        data["refID"] = this.refID;
        data["keyPeopleId"] = this.keyPeopleId;
        data["keyPeopleName"] = this.keyPeopleName;
        data["keyPeoplePSCode"] = this.keyPeoplePSCode;
        return data; 
    }
}

export interface ICreateKeyPeopleDto {
    psCode: string;
    refID: number;
    keyPeopleId: number;
    keyPeopleName: string;
    keyPeoplePSCode: string;
}

export class CreateBankAccountDto implements ICreateBankAccountDto {
    entityCode: string;
    psCode: string;
    refID: number;
    bankCode: string;
    accountNo: string;
    accountName: string;

    constructor(data?: ICreateBankAccountDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.entityCode = data["entityCode"];
            this.psCode = data["psCode"];
            this.refID = data["refID"];
            this.bankCode = data["bankCode"];
            this.accountNo = data["accountNo"];
            this.accountName = data["accountName"];
        }
    }

    static fromJS(data: any): CreateBankAccountDto {
        let result = new CreateBankAccountDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["entityCode"] = this.entityCode;
        data["psCode"] = this.psCode;
        data["refID"] = this.refID;
        data["bankCode"] = this.bankCode;
        data["accountNo"] = this.accountNo;
        data["accountName"] = this.accountName;
        return data; 
    }
}

export interface ICreateBankAccountDto {
    entityCode: string;
    psCode: string;
    refID: number;
    bankCode: string;
    accountNo: string;
    accountName: string;
}

export class CreateCompanyDto implements ICreateCompanyDto {
    entityCode: string;
    psCode: string;
    refID: number;
    coName: string;
    coAddress: string;
    coCity: string;
    coPostCode: string;
    coCountry: string;
    coType: string;
    jobTitle: string;

    constructor(data?: ICreateCompanyDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.entityCode = data["entityCode"];
            this.psCode = data["psCode"];
            this.refID = data["refID"];
            this.coName = data["coName"];
            this.coAddress = data["coAddress"];
            this.coCity = data["coCity"];
            this.coPostCode = data["coPostCode"];
            this.coCountry = data["coCountry"];
            this.coType = data["coType"];
            this.jobTitle = data["jobTitle"];
        }
    }

    static fromJS(data: any): CreateCompanyDto {
        let result = new CreateCompanyDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["entityCode"] = this.entityCode;
        data["psCode"] = this.psCode;
        data["refID"] = this.refID;
        data["coName"] = this.coName;
        data["coAddress"] = this.coAddress;
        data["coCity"] = this.coCity;
        data["coPostCode"] = this.coPostCode;
        data["coCountry"] = this.coCountry;
        data["coType"] = this.coType;
        data["jobTitle"] = this.jobTitle;
        return data; 
    }
}

export interface ICreateCompanyDto {
    entityCode: string;
    psCode: string;
    refID: number;
    coName: string;
    coAddress: string;
    coCity: string;
    coPostCode: string;
    coCountry: string;
    coType: string;
    jobTitle: string;
}

export class CreateDocumentDto implements ICreateDocumentDto {
    entityCode: string;
    psCode: string;
    documentType: string;
    documentRef: number;
    documentBinary: string;
    documentPicType: string;

    constructor(data?: ICreateDocumentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.entityCode = data["entityCode"];
            this.psCode = data["psCode"];
            this.documentType = data["documentType"];
            this.documentRef = data["documentRef"];
            this.documentBinary = data["documentBinary"];
            this.documentPicType = data["documentPicType"];
        }
    }

    static fromJS(data: any): CreateDocumentDto {
        let result = new CreateDocumentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["entityCode"] = this.entityCode;
        data["psCode"] = this.psCode;
        data["documentType"] = this.documentType;
        data["documentRef"] = this.documentRef;
        data["documentBinary"] = this.documentBinary;
        data["documentPicType"] = this.documentPicType;
        return data; 
    }
}

export interface ICreateDocumentDto {
    entityCode: string;
    psCode: string;
    documentType: string;
    documentRef: number;
    documentBinary: string;
    documentPicType: string;
}

export class CreateIDNumberDto implements ICreateIDNumberDto {
    entityCode: string;
    psCode: string;
    refID: number;
    idType: string;
    idNo: string;
    expiredDate: moment.Moment;

    constructor(data?: ICreateIDNumberDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.entityCode = data["entityCode"];
            this.psCode = data["psCode"];
            this.refID = data["refID"];
            this.idType = data["idType"];
            this.idNo = data["idNo"];
            this.expiredDate = data["expiredDate"] ? moment(data["expiredDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateIDNumberDto {
        let result = new CreateIDNumberDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["entityCode"] = this.entityCode;
        data["psCode"] = this.psCode;
        data["refID"] = this.refID;
        data["idType"] = this.idType;
        data["idNo"] = this.idNo;
        data["expiredDate"] = this.expiredDate ? this.expiredDate.toISOString() : <any>undefined;
        return data; 
    }
}

export interface ICreateIDNumberDto {
    entityCode: string;
    psCode: string;
    refID: number;
    idType: string;
    idNo: string;
    expiredDate: moment.Moment;
}

export class CreateFamilyDto implements ICreateFamilyDto {
    entityCode: string;
    psCode: string;
    refID: number;
    familyName: string;
    familyStatus: string;
    birthDate: moment.Moment;
    occID: string;

    constructor(data?: ICreateFamilyDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.entityCode = data["entityCode"];
            this.psCode = data["psCode"];
            this.refID = data["refID"];
            this.familyName = data["familyName"];
            this.familyStatus = data["familyStatus"];
            this.birthDate = data["birthDate"] ? moment(data["birthDate"].toString()) : <any>undefined;
            this.occID = data["occID"];
        }
    }

    static fromJS(data: any): CreateFamilyDto {
        let result = new CreateFamilyDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["entityCode"] = this.entityCode;
        data["psCode"] = this.psCode;
        data["refID"] = this.refID;
        data["familyName"] = this.familyName;
        data["familyStatus"] = this.familyStatus;
        data["birthDate"] = this.birthDate ? this.birthDate.toISOString() : <any>undefined;
        data["occID"] = this.occID;
        return data; 
    }
}

export interface ICreateFamilyDto {
    entityCode: string;
    psCode: string;
    refID: number;
    familyName: string;
    familyStatus: string;
    birthDate: moment.Moment;
    occID: string;
}

export class CreateMemberDto implements ICreateMemberDto {
    memberData: CreateMemberDataDto;
    memberActivation: CreateMemberActivationDto;
    memberBankData: CreateMemberBankDataDto;

    constructor(data?: ICreateMemberDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.memberData = data["memberData"] ? CreateMemberDataDto.fromJS(data["memberData"]) : <any>undefined;
            this.memberActivation = data["memberActivation"] ? CreateMemberActivationDto.fromJS(data["memberActivation"]) : <any>undefined;
            this.memberBankData = data["memberBankData"] ? CreateMemberBankDataDto.fromJS(data["memberBankData"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateMemberDto {
        let result = new CreateMemberDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["memberData"] = this.memberData ? this.memberData.toJSON() : <any>undefined;
        data["memberActivation"] = this.memberActivation ? this.memberActivation.toJSON() : <any>undefined;
        data["memberBankData"] = this.memberBankData ? this.memberBankData.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ICreateMemberDto {
    memberData: CreateMemberDataDto;
    memberActivation: CreateMemberActivationDto;
    memberBankData: CreateMemberBankDataDto;
}

export class CreateMemberDataDto implements ICreateMemberDataDto {
    psCode: string;
    scmCode: string;
    memberCode: string;
    parentMemberCode: string;
    specCode: string;
    cdCode: string;
    acdCode: string;
    ptName: string;
    princName: string;
    spouName: string;
    remarks1: string;
    isCD: boolean;
    isACD: boolean;
    isInstitusi: boolean;
    franchiseGroup: string;

    constructor(data?: ICreateMemberDataDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.psCode = data["psCode"];
            this.scmCode = data["scmCode"];
            this.memberCode = data["memberCode"];
            this.parentMemberCode = data["parentMemberCode"];
            this.specCode = data["specCode"];
            this.cdCode = data["cdCode"];
            this.acdCode = data["acdCode"];
            this.ptName = data["ptName"];
            this.princName = data["princName"];
            this.spouName = data["spouName"];
            this.remarks1 = data["remarks1"];
            this.isCD = data["isCD"];
            this.isACD = data["isACD"];
            this.isInstitusi = data["isInstitusi"];
            this.franchiseGroup = data["franchiseGroup"];
        }
    }

    static fromJS(data: any): CreateMemberDataDto {
        let result = new CreateMemberDataDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["psCode"] = this.psCode;
        data["scmCode"] = this.scmCode;
        data["memberCode"] = this.memberCode;
        data["parentMemberCode"] = this.parentMemberCode;
        data["specCode"] = this.specCode;
        data["cdCode"] = this.cdCode;
        data["acdCode"] = this.acdCode;
        data["ptName"] = this.ptName;
        data["princName"] = this.princName;
        data["spouName"] = this.spouName;
        data["remarks1"] = this.remarks1;
        data["isCD"] = this.isCD;
        data["isACD"] = this.isACD;
        data["isInstitusi"] = this.isInstitusi;
        data["franchiseGroup"] = this.franchiseGroup;
        return data; 
    }
}

export interface ICreateMemberDataDto {
    psCode: string;
    scmCode: string;
    memberCode: string;
    parentMemberCode: string;
    specCode: string;
    cdCode: string;
    acdCode: string;
    ptName: string;
    princName: string;
    spouName: string;
    remarks1: string;
    isCD: boolean;
    isACD: boolean;
    isInstitusi: boolean;
    franchiseGroup: string;
}

export class CreateMemberActivationDto implements ICreateMemberActivationDto {
    memberStatusCode: string;
    isMember: boolean;
    isActive: boolean;
    password: string;

    constructor(data?: ICreateMemberActivationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.memberStatusCode = data["memberStatusCode"];
            this.isMember = data["isMember"];
            this.isActive = data["isActive"];
            this.password = data["password"];
        }
    }

    static fromJS(data: any): CreateMemberActivationDto {
        let result = new CreateMemberActivationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["memberStatusCode"] = this.memberStatusCode;
        data["isMember"] = this.isMember;
        data["isActive"] = this.isActive;
        data["password"] = this.password;
        return data; 
    }
}

export interface ICreateMemberActivationDto {
    memberStatusCode: string;
    isMember: boolean;
    isActive: boolean;
    password: string;
}

export class CreateMemberBankDataDto implements ICreateMemberBankDataDto {
    bankType: string;
    bankCode: string;
    bankAccNo: string;
    bankAccName: string;
    bankBranchName: string;

    constructor(data?: ICreateMemberBankDataDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.bankType = data["bankType"];
            this.bankCode = data["bankCode"];
            this.bankAccNo = data["bankAccNo"];
            this.bankAccName = data["bankAccName"];
            this.bankBranchName = data["bankBranchName"];
        }
    }

    static fromJS(data: any): CreateMemberBankDataDto {
        let result = new CreateMemberBankDataDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bankType"] = this.bankType;
        data["bankCode"] = this.bankCode;
        data["bankAccNo"] = this.bankAccNo;
        data["bankAccName"] = this.bankAccName;
        data["bankBranchName"] = this.bankBranchName;
        return data; 
    }
}

export interface ICreateMemberBankDataDto {
    bankType: string;
    bankCode: string;
    bankAccNo: string;
    bankAccName: string;
    bankBranchName: string;
}

export class GetUniversalPersonalDto implements IGetUniversalPersonalDto {
    personal: GetPersonalDto;
    contact: GetContactDto;
    keyPeople: GetKeyPeopleDto[];
    bankAccount: GetBankAccountDto[];
    company: GetCompanyDto[];
    document: GetDocumentDto[];
    idNumber: GetIDNumberDto[];
    family: GetFamilyDto[];
    member: GetMemberDto[];

    constructor(data?: IGetUniversalPersonalDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.personal = data["personal"] ? GetPersonalDto.fromJS(data["personal"]) : <any>undefined;
            this.contact = data["contact"] ? GetContactDto.fromJS(data["contact"]) : <any>undefined;
            if (data["keyPeople"] && data["keyPeople"].constructor === Array) {
                this.keyPeople = [];
                for (let item of data["keyPeople"])
                    this.keyPeople.push(GetKeyPeopleDto.fromJS(item));
            }
            if (data["bankAccount"] && data["bankAccount"].constructor === Array) {
                this.bankAccount = [];
                for (let item of data["bankAccount"])
                    this.bankAccount.push(GetBankAccountDto.fromJS(item));
            }
            if (data["company"] && data["company"].constructor === Array) {
                this.company = [];
                for (let item of data["company"])
                    this.company.push(GetCompanyDto.fromJS(item));
            }
            if (data["document"] && data["document"].constructor === Array) {
                this.document = [];
                for (let item of data["document"])
                    this.document.push(GetDocumentDto.fromJS(item));
            }
            if (data["idNumber"] && data["idNumber"].constructor === Array) {
                this.idNumber = [];
                for (let item of data["idNumber"])
                    this.idNumber.push(GetIDNumberDto.fromJS(item));
            }
            if (data["family"] && data["family"].constructor === Array) {
                this.family = [];
                for (let item of data["family"])
                    this.family.push(GetFamilyDto.fromJS(item));
            }
            if (data["member"] && data["member"].constructor === Array) {
                this.member = [];
                for (let item of data["member"])
                    this.member.push(GetMemberDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetUniversalPersonalDto {
        let result = new GetUniversalPersonalDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["personal"] = this.personal ? this.personal.toJSON() : <any>undefined;
        data["contact"] = this.contact ? this.contact.toJSON() : <any>undefined;
        if (this.keyPeople && this.keyPeople.constructor === Array) {
            data["keyPeople"] = [];
            for (let item of this.keyPeople)
                data["keyPeople"].push(item.toJSON());
        }
        if (this.bankAccount && this.bankAccount.constructor === Array) {
            data["bankAccount"] = [];
            for (let item of this.bankAccount)
                data["bankAccount"].push(item.toJSON());
        }
        if (this.company && this.company.constructor === Array) {
            data["company"] = [];
            for (let item of this.company)
                data["company"].push(item.toJSON());
        }
        if (this.document && this.document.constructor === Array) {
            data["document"] = [];
            for (let item of this.document)
                data["document"].push(item.toJSON());
        }
        if (this.idNumber && this.idNumber.constructor === Array) {
            data["idNumber"] = [];
            for (let item of this.idNumber)
                data["idNumber"].push(item.toJSON());
        }
        if (this.family && this.family.constructor === Array) {
            data["family"] = [];
            for (let item of this.family)
                data["family"].push(item.toJSON());
        }
        if (this.member && this.member.constructor === Array) {
            data["member"] = [];
            for (let item of this.member)
                data["member"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetUniversalPersonalDto {
    personal: GetPersonalDto;
    contact: GetContactDto;
    keyPeople: GetKeyPeopleDto[];
    bankAccount: GetBankAccountDto[];
    company: GetCompanyDto[];
    document: GetDocumentDto[];
    idNumber: GetIDNumberDto[];
    family: GetFamilyDto[];
    member: GetMemberDto[];
}

export class GetPersonalDto implements IGetPersonalDto {
    psCode: string;
    name: string;
    sex: string;
    birthDate: moment.Moment;
    birthPlace: string;
    relCode: string;
    marCode: string;
    bloodCode: string;
    occID: string;
    occDesc: string;
    nationID: string;
    nationality: string;
    familyStatus: string;
    fpTransCode: string;
    grade: string;
    isActive: boolean;
    remarks: string;
    isInstitute: boolean;
    registeredBy: string;
    registerTime: string;
    regiterId: number;
    updatedBy: string;
    updateTime: string;
    updateId: number;

    constructor(data?: IGetPersonalDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.psCode = data["psCode"];
            this.name = data["name"];
            this.sex = data["sex"];
            this.birthDate = data["birthDate"] ? moment(data["birthDate"].toString()) : <any>undefined;
            this.birthPlace = data["birthPlace"];
            this.relCode = data["relCode"];
            this.marCode = data["marCode"];
            this.bloodCode = data["bloodCode"];
            this.occID = data["occID"];
            this.occDesc = data["occDesc"];
            this.nationID = data["nationID"];
            this.nationality = data["nationality"];
            this.familyStatus = data["familyStatus"];
            this.fpTransCode = data["fpTransCode"];
            this.grade = data["grade"];
            this.isActive = data["isActive"];
            this.remarks = data["remarks"];
            this.isInstitute = data["isInstitute"];
            this.registeredBy = data["registeredBy"];
            this.registerTime = data["registerTime"];
            this.regiterId = data["regiterId"];
            this.updatedBy = data["updatedBy"];
            this.updateTime = data["updateTime"];
            this.updateId = data["updateId"];
        }
    }

    static fromJS(data: any): GetPersonalDto {
        let result = new GetPersonalDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["psCode"] = this.psCode;
        data["name"] = this.name;
        data["sex"] = this.sex;
        data["birthDate"] = this.birthDate ? this.birthDate.toISOString() : <any>undefined;
        data["birthPlace"] = this.birthPlace;
        data["relCode"] = this.relCode;
        data["marCode"] = this.marCode;
        data["bloodCode"] = this.bloodCode;
        data["occID"] = this.occID;
        data["occDesc"] = this.occDesc;
        data["nationID"] = this.nationID;
        data["nationality"] = this.nationality;
        data["familyStatus"] = this.familyStatus;
        data["fpTransCode"] = this.fpTransCode;
        data["grade"] = this.grade;
        data["isActive"] = this.isActive;
        data["remarks"] = this.remarks;
        data["isInstitute"] = this.isInstitute;
        data["registeredBy"] = this.registeredBy;
        data["registerTime"] = this.registerTime;
        data["regiterId"] = this.regiterId;
        data["updatedBy"] = this.updatedBy;
        data["updateTime"] = this.updateTime;
        data["updateId"] = this.updateId;
        return data; 
    }
}

export interface IGetPersonalDto {
    psCode: string;
    name: string;
    sex: string;
    birthDate: moment.Moment;
    birthPlace: string;
    relCode: string;
    marCode: string;
    bloodCode: string;
    occID: string;
    occDesc: string;
    nationID: string;
    nationality: string;
    familyStatus: string;
    fpTransCode: string;
    grade: string;
    isActive: boolean;
    remarks: string;
    isInstitute: boolean;
    registeredBy: string;
    registerTime: string;
    regiterId: number;
    updatedBy: string;
    updateTime: string;
    updateId: number;
}

export class GetContactDto implements IGetContactDto {
    getPhone: GetPhoneDto[];
    getEmail: GetEmailDto[];
    getAddress: GetAddressDto[];

    constructor(data?: IGetContactDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["getPhone"] && data["getPhone"].constructor === Array) {
                this.getPhone = [];
                for (let item of data["getPhone"])
                    this.getPhone.push(GetPhoneDto.fromJS(item));
            }
            if (data["getEmail"] && data["getEmail"].constructor === Array) {
                this.getEmail = [];
                for (let item of data["getEmail"])
                    this.getEmail.push(GetEmailDto.fromJS(item));
            }
            if (data["getAddress"] && data["getAddress"].constructor === Array) {
                this.getAddress = [];
                for (let item of data["getAddress"])
                    this.getAddress.push(GetAddressDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetContactDto {
        let result = new GetContactDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.getPhone && this.getPhone.constructor === Array) {
            data["getPhone"] = [];
            for (let item of this.getPhone)
                data["getPhone"].push(item.toJSON());
        }
        if (this.getEmail && this.getEmail.constructor === Array) {
            data["getEmail"] = [];
            for (let item of this.getEmail)
                data["getEmail"].push(item.toJSON());
        }
        if (this.getAddress && this.getAddress.constructor === Array) {
            data["getAddress"] = [];
            for (let item of this.getAddress)
                data["getAddress"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetContactDto {
    getPhone: GetPhoneDto[];
    getEmail: GetEmailDto[];
    getAddress: GetAddressDto[];
}

export class GetKeyPeopleDto implements IGetKeyPeopleDto {
    id: number;
    psCode: string;
    refID: number;
    keyPeopleId: number;
    keyPeopleDesc: string;
    keyPeopleName: string;
    keyPeoplePSCode: string;
    isAcive: boolean;
    lastModificationTime: string;
    lastModifierUserId: string;
    creationTime: string;
    creatorUserId: string;

    constructor(data?: IGetKeyPeopleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.psCode = data["psCode"];
            this.refID = data["refID"];
            this.keyPeopleId = data["keyPeopleId"];
            this.keyPeopleDesc = data["keyPeopleDesc"];
            this.keyPeopleName = data["keyPeopleName"];
            this.keyPeoplePSCode = data["keyPeoplePSCode"];
            this.isAcive = data["isAcive"];
            this.lastModificationTime = data["lastModificationTime"];
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"];
            this.creatorUserId = data["creatorUserId"];
        }
    }

    static fromJS(data: any): GetKeyPeopleDto {
        let result = new GetKeyPeopleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["psCode"] = this.psCode;
        data["refID"] = this.refID;
        data["keyPeopleId"] = this.keyPeopleId;
        data["keyPeopleDesc"] = this.keyPeopleDesc;
        data["keyPeopleName"] = this.keyPeopleName;
        data["keyPeoplePSCode"] = this.keyPeoplePSCode;
        data["isAcive"] = this.isAcive;
        data["lastModificationTime"] = this.lastModificationTime;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime;
        data["creatorUserId"] = this.creatorUserId;
        return data; 
    }
}

export interface IGetKeyPeopleDto {
    id: number;
    psCode: string;
    refID: number;
    keyPeopleId: number;
    keyPeopleDesc: string;
    keyPeopleName: string;
    keyPeoplePSCode: string;
    isAcive: boolean;
    lastModificationTime: string;
    lastModifierUserId: string;
    creationTime: string;
    creatorUserId: string;
}

export class GetBankAccountDto implements IGetBankAccountDto {
    entityCode: string;
    psCode: string;
    refID: number;
    bankCode: string;
    bankName: string;
    accountNo: string;
    accountName: string;
    lastModificationTime: string;
    lastModifierUserId: string;
    creationTime: string;
    creatorUserId: string;

    constructor(data?: IGetBankAccountDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.entityCode = data["entityCode"];
            this.psCode = data["psCode"];
            this.refID = data["refID"];
            this.bankCode = data["bankCode"];
            this.bankName = data["bankName"];
            this.accountNo = data["accountNo"];
            this.accountName = data["accountName"];
            this.lastModificationTime = data["lastModificationTime"];
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"];
            this.creatorUserId = data["creatorUserId"];
        }
    }

    static fromJS(data: any): GetBankAccountDto {
        let result = new GetBankAccountDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["entityCode"] = this.entityCode;
        data["psCode"] = this.psCode;
        data["refID"] = this.refID;
        data["bankCode"] = this.bankCode;
        data["bankName"] = this.bankName;
        data["accountNo"] = this.accountNo;
        data["accountName"] = this.accountName;
        data["lastModificationTime"] = this.lastModificationTime;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime;
        data["creatorUserId"] = this.creatorUserId;
        return data; 
    }
}

export interface IGetBankAccountDto {
    entityCode: string;
    psCode: string;
    refID: number;
    bankCode: string;
    bankName: string;
    accountNo: string;
    accountName: string;
    lastModificationTime: string;
    lastModifierUserId: string;
    creationTime: string;
    creatorUserId: string;
}

export class GetCompanyDto implements IGetCompanyDto {
    psCode: string;
    refID: number;
    coName: string;
    coAddress: string;
    coCity: string;
    coPostCode: string;
    coCountry: string;
    coType: string;
    jobTitle: string;
    lastModificationTime: string;
    lastModifierUserId: string;
    creationTime: string;
    creatorUserId: string;

    constructor(data?: IGetCompanyDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.psCode = data["psCode"];
            this.refID = data["refID"];
            this.coName = data["coName"];
            this.coAddress = data["coAddress"];
            this.coCity = data["coCity"];
            this.coPostCode = data["coPostCode"];
            this.coCountry = data["coCountry"];
            this.coType = data["coType"];
            this.jobTitle = data["jobTitle"];
            this.lastModificationTime = data["lastModificationTime"];
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"];
            this.creatorUserId = data["creatorUserId"];
        }
    }

    static fromJS(data: any): GetCompanyDto {
        let result = new GetCompanyDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["psCode"] = this.psCode;
        data["refID"] = this.refID;
        data["coName"] = this.coName;
        data["coAddress"] = this.coAddress;
        data["coCity"] = this.coCity;
        data["coPostCode"] = this.coPostCode;
        data["coCountry"] = this.coCountry;
        data["coType"] = this.coType;
        data["jobTitle"] = this.jobTitle;
        data["lastModificationTime"] = this.lastModificationTime;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime;
        data["creatorUserId"] = this.creatorUserId;
        return data; 
    }
}

export interface IGetCompanyDto {
    psCode: string;
    refID: number;
    coName: string;
    coAddress: string;
    coCity: string;
    coPostCode: string;
    coCountry: string;
    coType: string;
    jobTitle: string;
    lastModificationTime: string;
    lastModifierUserId: string;
    creationTime: string;
    creatorUserId: string;
}

export class GetDocumentDto implements IGetDocumentDto {
    psCode: string;
    documentType: string;
    documentTypeName: string;
    filename: string;
    documentBinary: string;
    lastModificationTime: string;
    lastModifierUserId: string;
    creationTime: string;
    creatorUserId: string;

    constructor(data?: IGetDocumentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.psCode = data["psCode"];
            this.documentType = data["documentType"];
            this.documentTypeName = data["documentTypeName"];
            this.filename = data["filename"];
            this.documentBinary = data["documentBinary"];
            this.lastModificationTime = data["lastModificationTime"];
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"];
            this.creatorUserId = data["creatorUserId"];
        }
    }

    static fromJS(data: any): GetDocumentDto {
        let result = new GetDocumentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["psCode"] = this.psCode;
        data["documentType"] = this.documentType;
        data["documentTypeName"] = this.documentTypeName;
        data["filename"] = this.filename;
        data["documentBinary"] = this.documentBinary;
        data["lastModificationTime"] = this.lastModificationTime;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime;
        data["creatorUserId"] = this.creatorUserId;
        return data; 
    }
}

export interface IGetDocumentDto {
    psCode: string;
    documentType: string;
    documentTypeName: string;
    filename: string;
    documentBinary: string;
    lastModificationTime: string;
    lastModifierUserId: string;
    creationTime: string;
    creatorUserId: string;
}

export class GetIDNumberDto implements IGetIDNumberDto {
    psCode: string;
    refID: number;
    idType: string;
    idTypeName: string;
    idNo: string;
    expiredDate: moment.Moment;
    lastModificationTime: string;
    lastModifierUserId: string;
    creationTime: string;
    creatorUserId: string;

    constructor(data?: IGetIDNumberDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.psCode = data["psCode"];
            this.refID = data["refID"];
            this.idType = data["idType"];
            this.idTypeName = data["idTypeName"];
            this.idNo = data["idNo"];
            this.expiredDate = data["expiredDate"] ? moment(data["expiredDate"].toString()) : <any>undefined;
            this.lastModificationTime = data["lastModificationTime"];
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"];
            this.creatorUserId = data["creatorUserId"];
        }
    }

    static fromJS(data: any): GetIDNumberDto {
        let result = new GetIDNumberDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["psCode"] = this.psCode;
        data["refID"] = this.refID;
        data["idType"] = this.idType;
        data["idTypeName"] = this.idTypeName;
        data["idNo"] = this.idNo;
        data["expiredDate"] = this.expiredDate ? this.expiredDate.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime;
        data["creatorUserId"] = this.creatorUserId;
        return data; 
    }
}

export interface IGetIDNumberDto {
    psCode: string;
    refID: number;
    idType: string;
    idTypeName: string;
    idNo: string;
    expiredDate: moment.Moment;
    lastModificationTime: string;
    lastModifierUserId: string;
    creationTime: string;
    creatorUserId: string;
}

export class GetFamilyDto implements IGetFamilyDto {
    psCode: string;
    refID: number;
    familyName: string;
    familyStatus: string;
    birthDate: moment.Moment;
    occID: string;
    occDesc: string;
    lastModificationTime: string;
    lastModifierUserId: string;
    creationTime: string;
    creatorUserId: string;

    constructor(data?: IGetFamilyDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.psCode = data["psCode"];
            this.refID = data["refID"];
            this.familyName = data["familyName"];
            this.familyStatus = data["familyStatus"];
            this.birthDate = data["birthDate"] ? moment(data["birthDate"].toString()) : <any>undefined;
            this.occID = data["occID"];
            this.occDesc = data["occDesc"];
            this.lastModificationTime = data["lastModificationTime"];
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"];
            this.creatorUserId = data["creatorUserId"];
        }
    }

    static fromJS(data: any): GetFamilyDto {
        let result = new GetFamilyDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["psCode"] = this.psCode;
        data["refID"] = this.refID;
        data["familyName"] = this.familyName;
        data["familyStatus"] = this.familyStatus;
        data["birthDate"] = this.birthDate ? this.birthDate.toISOString() : <any>undefined;
        data["occID"] = this.occID;
        data["occDesc"] = this.occDesc;
        data["lastModificationTime"] = this.lastModificationTime;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime;
        data["creatorUserId"] = this.creatorUserId;
        return data; 
    }
}

export interface IGetFamilyDto {
    psCode: string;
    refID: number;
    familyName: string;
    familyStatus: string;
    birthDate: moment.Moment;
    occID: string;
    occDesc: string;
    lastModificationTime: string;
    lastModifierUserId: string;
    creationTime: string;
    creatorUserId: string;
}

export class GetMemberDto implements IGetMemberDto {
    memberData: GetMemberDataDto;
    memberActivation: GetMemberActivationDto;
    memberBankData: GetMemberBankDataDto;

    constructor(data?: IGetMemberDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.memberData = data["memberData"] ? GetMemberDataDto.fromJS(data["memberData"]) : <any>undefined;
            this.memberActivation = data["memberActivation"] ? GetMemberActivationDto.fromJS(data["memberActivation"]) : <any>undefined;
            this.memberBankData = data["memberBankData"] ? GetMemberBankDataDto.fromJS(data["memberBankData"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetMemberDto {
        let result = new GetMemberDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["memberData"] = this.memberData ? this.memberData.toJSON() : <any>undefined;
        data["memberActivation"] = this.memberActivation ? this.memberActivation.toJSON() : <any>undefined;
        data["memberBankData"] = this.memberBankData ? this.memberBankData.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetMemberDto {
    memberData: GetMemberDataDto;
    memberActivation: GetMemberActivationDto;
    memberBankData: GetMemberBankDataDto;
}

export class GetPhoneDto implements IGetPhoneDto {
    entityCode: string;
    psCode: string;
    refID: number;
    phoneType: string;
    number: string;
    remarks: string;
    lastModificationTime: string;
    lastModifierUserId: number;
    creationTime: string;
    creatorUserId: number;

    constructor(data?: IGetPhoneDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.entityCode = data["entityCode"];
            this.psCode = data["psCode"];
            this.refID = data["refID"];
            this.phoneType = data["phoneType"];
            this.number = data["number"];
            this.remarks = data["remarks"];
            this.lastModificationTime = data["lastModificationTime"];
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"];
            this.creatorUserId = data["creatorUserId"];
        }
    }

    static fromJS(data: any): GetPhoneDto {
        let result = new GetPhoneDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["entityCode"] = this.entityCode;
        data["psCode"] = this.psCode;
        data["refID"] = this.refID;
        data["phoneType"] = this.phoneType;
        data["number"] = this.number;
        data["remarks"] = this.remarks;
        data["lastModificationTime"] = this.lastModificationTime;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime;
        data["creatorUserId"] = this.creatorUserId;
        return data; 
    }
}

export interface IGetPhoneDto {
    entityCode: string;
    psCode: string;
    refID: number;
    phoneType: string;
    number: string;
    remarks: string;
    lastModificationTime: string;
    lastModifierUserId: number;
    creationTime: string;
    creatorUserId: number;
}

export class GetEmailDto implements IGetEmailDto {
    entityCode: string;
    psCode: string;
    refID: number;
    email: string;
    lastModificationTime: string;
    lastModifierUserId: number;
    creationTime: string;
    creatorUserId: number;

    constructor(data?: IGetEmailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.entityCode = data["entityCode"];
            this.psCode = data["psCode"];
            this.refID = data["refID"];
            this.email = data["email"];
            this.lastModificationTime = data["lastModificationTime"];
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"];
            this.creatorUserId = data["creatorUserId"];
        }
    }

    static fromJS(data: any): GetEmailDto {
        let result = new GetEmailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["entityCode"] = this.entityCode;
        data["psCode"] = this.psCode;
        data["refID"] = this.refID;
        data["email"] = this.email;
        data["lastModificationTime"] = this.lastModificationTime;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime;
        data["creatorUserId"] = this.creatorUserId;
        return data; 
    }
}

export interface IGetEmailDto {
    entityCode: string;
    psCode: string;
    refID: number;
    email: string;
    lastModificationTime: string;
    lastModifierUserId: number;
    creationTime: string;
    creatorUserId: number;
}

export class GetAddressDto implements IGetAddressDto {
    entityCode: string;
    psCode: string;
    refID: number;
    addrType: string;
    addrTypeName: string;
    address: string;
    postCode: string;
    city: string;
    country: string;
    kelurahan: string;
    kecamatan: string;
    lastModificationTime: string;
    lastModifierUserId: number;
    creationTime: string;
    creatorUserId: number;

    constructor(data?: IGetAddressDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.entityCode = data["entityCode"];
            this.psCode = data["psCode"];
            this.refID = data["refID"];
            this.addrType = data["addrType"];
            this.addrTypeName = data["addrTypeName"];
            this.address = data["address"];
            this.postCode = data["postCode"];
            this.city = data["city"];
            this.country = data["country"];
            this.kelurahan = data["kelurahan"];
            this.kecamatan = data["kecamatan"];
            this.lastModificationTime = data["lastModificationTime"];
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"];
            this.creatorUserId = data["creatorUserId"];
        }
    }

    static fromJS(data: any): GetAddressDto {
        let result = new GetAddressDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["entityCode"] = this.entityCode;
        data["psCode"] = this.psCode;
        data["refID"] = this.refID;
        data["addrType"] = this.addrType;
        data["addrTypeName"] = this.addrTypeName;
        data["address"] = this.address;
        data["postCode"] = this.postCode;
        data["city"] = this.city;
        data["country"] = this.country;
        data["kelurahan"] = this.kelurahan;
        data["kecamatan"] = this.kecamatan;
        data["lastModificationTime"] = this.lastModificationTime;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime;
        data["creatorUserId"] = this.creatorUserId;
        return data; 
    }
}

export interface IGetAddressDto {
    entityCode: string;
    psCode: string;
    refID: number;
    addrType: string;
    addrTypeName: string;
    address: string;
    postCode: string;
    city: string;
    country: string;
    kelurahan: string;
    kecamatan: string;
    lastModificationTime: string;
    lastModifierUserId: number;
    creationTime: string;
    creatorUserId: number;
}

export class GetMemberDataDto implements IGetMemberDataDto {
    psCode: string;
    scmCode: string;
    scmName: string;
    memberCode: string;
    parentMemberCode: string;
    parentMemberName: string;
    specCode: string;
    memberPosition: string;
    cdCode: string;
    acdCode: string;
    ptName: string;
    princName: string;
    spouName: string;
    remarks1: string;
    isCD: boolean;
    isACD: boolean;
    isInstitusi: boolean;
    franchiseGroup: string;

    constructor(data?: IGetMemberDataDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.psCode = data["psCode"];
            this.scmCode = data["scmCode"];
            this.scmName = data["scmName"];
            this.memberCode = data["memberCode"];
            this.parentMemberCode = data["parentMemberCode"];
            this.parentMemberName = data["parentMemberName"];
            this.specCode = data["specCode"];
            this.memberPosition = data["memberPosition"];
            this.cdCode = data["cdCode"];
            this.acdCode = data["acdCode"];
            this.ptName = data["ptName"];
            this.princName = data["princName"];
            this.spouName = data["spouName"];
            this.remarks1 = data["remarks1"];
            this.isCD = data["isCD"];
            this.isACD = data["isACD"];
            this.isInstitusi = data["isInstitusi"];
            this.franchiseGroup = data["franchiseGroup"];
        }
    }

    static fromJS(data: any): GetMemberDataDto {
        let result = new GetMemberDataDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["psCode"] = this.psCode;
        data["scmCode"] = this.scmCode;
        data["scmName"] = this.scmName;
        data["memberCode"] = this.memberCode;
        data["parentMemberCode"] = this.parentMemberCode;
        data["parentMemberName"] = this.parentMemberName;
        data["specCode"] = this.specCode;
        data["memberPosition"] = this.memberPosition;
        data["cdCode"] = this.cdCode;
        data["acdCode"] = this.acdCode;
        data["ptName"] = this.ptName;
        data["princName"] = this.princName;
        data["spouName"] = this.spouName;
        data["remarks1"] = this.remarks1;
        data["isCD"] = this.isCD;
        data["isACD"] = this.isACD;
        data["isInstitusi"] = this.isInstitusi;
        data["franchiseGroup"] = this.franchiseGroup;
        return data; 
    }
}

export interface IGetMemberDataDto {
    psCode: string;
    scmCode: string;
    scmName: string;
    memberCode: string;
    parentMemberCode: string;
    parentMemberName: string;
    specCode: string;
    memberPosition: string;
    cdCode: string;
    acdCode: string;
    ptName: string;
    princName: string;
    spouName: string;
    remarks1: string;
    isCD: boolean;
    isACD: boolean;
    isInstitusi: boolean;
    franchiseGroup: string;
}

export class GetMemberActivationDto implements IGetMemberActivationDto {
    memberStatusCode: string;
    isMember: boolean;
    isActive: boolean;
    password: string;

    constructor(data?: IGetMemberActivationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.memberStatusCode = data["memberStatusCode"];
            this.isMember = data["isMember"];
            this.isActive = data["isActive"];
            this.password = data["password"];
        }
    }

    static fromJS(data: any): GetMemberActivationDto {
        let result = new GetMemberActivationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["memberStatusCode"] = this.memberStatusCode;
        data["isMember"] = this.isMember;
        data["isActive"] = this.isActive;
        data["password"] = this.password;
        return data; 
    }
}

export interface IGetMemberActivationDto {
    memberStatusCode: string;
    isMember: boolean;
    isActive: boolean;
    password: string;
}

export class GetMemberBankDataDto implements IGetMemberBankDataDto {
    bankType: string;
    bankCode: string;
    bankAccNo: string;
    bankAccName: string;
    bankBranchName: string;

    constructor(data?: IGetMemberBankDataDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.bankType = data["bankType"];
            this.bankCode = data["bankCode"];
            this.bankAccNo = data["bankAccNo"];
            this.bankAccName = data["bankAccName"];
            this.bankBranchName = data["bankBranchName"];
        }
    }

    static fromJS(data: any): GetMemberBankDataDto {
        let result = new GetMemberBankDataDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bankType"] = this.bankType;
        data["bankCode"] = this.bankCode;
        data["bankAccNo"] = this.bankAccNo;
        data["bankAccName"] = this.bankAccName;
        data["bankBranchName"] = this.bankBranchName;
        return data; 
    }
}

export interface IGetMemberBankDataDto {
    bankType: string;
    bankCode: string;
    bankAccNo: string;
    bankAccName: string;
    bankBranchName: string;
}

export class CreatePhoneDto implements ICreatePhoneDto {
    entityCode: string;
    psCode: string;
    refID: number;
    phoneType: string;
    number: string;
    remarks: string;

    constructor(data?: ICreatePhoneDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.entityCode = data["entityCode"];
            this.psCode = data["psCode"];
            this.refID = data["refID"];
            this.phoneType = data["phoneType"];
            this.number = data["number"];
            this.remarks = data["remarks"];
        }
    }

    static fromJS(data: any): CreatePhoneDto {
        let result = new CreatePhoneDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["entityCode"] = this.entityCode;
        data["psCode"] = this.psCode;
        data["refID"] = this.refID;
        data["phoneType"] = this.phoneType;
        data["number"] = this.number;
        data["remarks"] = this.remarks;
        return data; 
    }
}

export interface ICreatePhoneDto {
    entityCode: string;
    psCode: string;
    refID: number;
    phoneType: string;
    number: string;
    remarks: string;
}

export class CreateEmailDto implements ICreateEmailDto {
    entityCode: string;
    psCode: string;
    refID: number;
    email: string;

    constructor(data?: ICreateEmailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.entityCode = data["entityCode"];
            this.psCode = data["psCode"];
            this.refID = data["refID"];
            this.email = data["email"];
        }
    }

    static fromJS(data: any): CreateEmailDto {
        let result = new CreateEmailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["entityCode"] = this.entityCode;
        data["psCode"] = this.psCode;
        data["refID"] = this.refID;
        data["email"] = this.email;
        return data; 
    }
}

export interface ICreateEmailDto {
    entityCode: string;
    psCode: string;
    refID: number;
    email: string;
}

export class CreateAddressDto implements ICreateAddressDto {
    psCode: string;
    refID: number;
    addrType: string;
    address: string;
    postCode: string;
    city: string;
    country: string;
    kelurahan: string;
    kecamatan: string;

    constructor(data?: ICreateAddressDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.psCode = data["psCode"];
            this.refID = data["refID"];
            this.addrType = data["addrType"];
            this.address = data["address"];
            this.postCode = data["postCode"];
            this.city = data["city"];
            this.country = data["country"];
            this.kelurahan = data["kelurahan"];
            this.kecamatan = data["kecamatan"];
        }
    }

    static fromJS(data: any): CreateAddressDto {
        let result = new CreateAddressDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["psCode"] = this.psCode;
        data["refID"] = this.refID;
        data["addrType"] = this.addrType;
        data["address"] = this.address;
        data["postCode"] = this.postCode;
        data["city"] = this.city;
        data["country"] = this.country;
        data["kelurahan"] = this.kelurahan;
        data["kecamatan"] = this.kecamatan;
        return data; 
    }
}

export interface ICreateAddressDto {
    psCode: string;
    refID: number;
    addrType: string;
    address: string;
    postCode: string;
    city: string;
    country: string;
    kelurahan: string;
    kecamatan: string;
}

export class ListResultDtoOfGetAllPersonalMemberDto implements IListResultDtoOfGetAllPersonalMemberDto {
    items: GetAllPersonalMemberDto[];

    constructor(data?: IListResultDtoOfGetAllPersonalMemberDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetAllPersonalMemberDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfGetAllPersonalMemberDto {
        let result = new ListResultDtoOfGetAllPersonalMemberDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfGetAllPersonalMemberDto {
    items: GetAllPersonalMemberDto[];
}

export class GetAllPersonalMemberDto implements IGetAllPersonalMemberDto {
    memberCode: string;
    name: string;

    constructor(data?: IGetAllPersonalMemberDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.memberCode = data["memberCode"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): GetAllPersonalMemberDto {
        let result = new GetAllPersonalMemberDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["memberCode"] = this.memberCode;
        data["name"] = this.name;
        return data; 
    }
}

export interface IGetAllPersonalMemberDto {
    memberCode: string;
    name: string;
}

export class CurrentUserProfileEditDto implements ICurrentUserProfileEditDto {
    name: string;
    surname: string;
    userName: string;
    emailAddress: string;
    phoneNumber: string;
    isPhoneNumberConfirmed: boolean;
    timezone: string;
    qrCodeSetupImageUrl: string;
    isGoogleAuthenticatorEnabled: boolean;

    constructor(data?: ICurrentUserProfileEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.surname = data["surname"];
            this.userName = data["userName"];
            this.emailAddress = data["emailAddress"];
            this.phoneNumber = data["phoneNumber"];
            this.isPhoneNumberConfirmed = data["isPhoneNumberConfirmed"];
            this.timezone = data["timezone"];
            this.qrCodeSetupImageUrl = data["qrCodeSetupImageUrl"];
            this.isGoogleAuthenticatorEnabled = data["isGoogleAuthenticatorEnabled"];
        }
    }

    static fromJS(data: any): CurrentUserProfileEditDto {
        let result = new CurrentUserProfileEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["userName"] = this.userName;
        data["emailAddress"] = this.emailAddress;
        data["phoneNumber"] = this.phoneNumber;
        data["isPhoneNumberConfirmed"] = this.isPhoneNumberConfirmed;
        data["timezone"] = this.timezone;
        data["qrCodeSetupImageUrl"] = this.qrCodeSetupImageUrl;
        data["isGoogleAuthenticatorEnabled"] = this.isGoogleAuthenticatorEnabled;
        return data; 
    }
}

export interface ICurrentUserProfileEditDto {
    name: string;
    surname: string;
    userName: string;
    emailAddress: string;
    phoneNumber: string;
    isPhoneNumberConfirmed: boolean;
    timezone: string;
    qrCodeSetupImageUrl: string;
    isGoogleAuthenticatorEnabled: boolean;
}

export class UpdateGoogleAuthenticatorKeyOutput implements IUpdateGoogleAuthenticatorKeyOutput {
    qrCodeSetupImageUrl: string;

    constructor(data?: IUpdateGoogleAuthenticatorKeyOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.qrCodeSetupImageUrl = data["qrCodeSetupImageUrl"];
        }
    }

    static fromJS(data: any): UpdateGoogleAuthenticatorKeyOutput {
        let result = new UpdateGoogleAuthenticatorKeyOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["qrCodeSetupImageUrl"] = this.qrCodeSetupImageUrl;
        return data; 
    }
}

export interface IUpdateGoogleAuthenticatorKeyOutput {
    qrCodeSetupImageUrl: string;
}

export class VerifySmsCodeInputDto implements IVerifySmsCodeInputDto {
    code: string;

    constructor(data?: IVerifySmsCodeInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.code = data["code"];
        }
    }

    static fromJS(data: any): VerifySmsCodeInputDto {
        let result = new VerifySmsCodeInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        return data; 
    }
}

export interface IVerifySmsCodeInputDto {
    code: string;
}

export class ChangePasswordInput implements IChangePasswordInput {
    currentPassword: string;
    newPassword: string;

    constructor(data?: IChangePasswordInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.currentPassword = data["currentPassword"];
            this.newPassword = data["newPassword"];
        }
    }

    static fromJS(data: any): ChangePasswordInput {
        let result = new ChangePasswordInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["currentPassword"] = this.currentPassword;
        data["newPassword"] = this.newPassword;
        return data; 
    }
}

export interface IChangePasswordInput {
    currentPassword: string;
    newPassword: string;
}

export class UpdateProfilePictureInput implements IUpdateProfilePictureInput {
    fileName: string;
    x: number;
    y: number;
    width: number;
    height: number;

    constructor(data?: IUpdateProfilePictureInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.fileName = data["fileName"];
            this.x = data["x"];
            this.y = data["y"];
            this.width = data["width"];
            this.height = data["height"];
        }
    }

    static fromJS(data: any): UpdateProfilePictureInput {
        let result = new UpdateProfilePictureInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileName"] = this.fileName;
        data["x"] = this.x;
        data["y"] = this.y;
        data["width"] = this.width;
        data["height"] = this.height;
        return data; 
    }
}

export interface IUpdateProfilePictureInput {
    fileName: string;
    x: number;
    y: number;
    width: number;
    height: number;
}

export class GetPasswordComplexitySettingOutput implements IGetPasswordComplexitySettingOutput {
    setting: PasswordComplexitySetting;

    constructor(data?: IGetPasswordComplexitySettingOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.setting = data["setting"] ? PasswordComplexitySetting.fromJS(data["setting"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetPasswordComplexitySettingOutput {
        let result = new GetPasswordComplexitySettingOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["setting"] = this.setting ? this.setting.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetPasswordComplexitySettingOutput {
    setting: PasswordComplexitySetting;
}

export class GetProfilePictureOutput implements IGetProfilePictureOutput {
    profilePicture: string;

    constructor(data?: IGetProfilePictureOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.profilePicture = data["profilePicture"];
        }
    }

    static fromJS(data: any): GetProfilePictureOutput {
        let result = new GetProfilePictureOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["profilePicture"] = this.profilePicture;
        return data; 
    }
}

export interface IGetProfilePictureOutput {
    profilePicture: string;
}

export class ChangeUserLanguageDto implements IChangeUserLanguageDto {
    languageName: string;

    constructor(data?: IChangeUserLanguageDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.languageName = data["languageName"];
        }
    }

    static fromJS(data: any): ChangeUserLanguageDto {
        let result = new ChangeUserLanguageDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["languageName"] = this.languageName;
        return data; 
    }
}

export interface IChangeUserLanguageDto {
    languageName: string;
}

export class ListResultDtoOfRoleListDto implements IListResultDtoOfRoleListDto {
    items: RoleListDto[];

    constructor(data?: IListResultDtoOfRoleListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(RoleListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfRoleListDto {
        let result = new ListResultDtoOfRoleListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfRoleListDto {
    items: RoleListDto[];
}

export class RoleListDto implements IRoleListDto {
    name: string;
    displayName: string;
    isStatic: boolean;
    isDefault: boolean;
    creationTime: moment.Moment;
    id: number;

    constructor(data?: IRoleListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.isStatic = data["isStatic"];
            this.isDefault = data["isDefault"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): RoleListDto {
        let result = new RoleListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isStatic"] = this.isStatic;
        data["isDefault"] = this.isDefault;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface IRoleListDto {
    name: string;
    displayName: string;
    isStatic: boolean;
    isDefault: boolean;
    creationTime: moment.Moment;
    id: number;
}

export class GetRoleForEditOutput implements IGetRoleForEditOutput {
    role: RoleEditDto;
    permissions: FlatPermissionDto[];
    grantedPermissionNames: string[];

    constructor(data?: IGetRoleForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.role = data["role"] ? RoleEditDto.fromJS(data["role"]) : <any>undefined;
            if (data["permissions"] && data["permissions"].constructor === Array) {
                this.permissions = [];
                for (let item of data["permissions"])
                    this.permissions.push(FlatPermissionDto.fromJS(item));
            }
            if (data["grantedPermissionNames"] && data["grantedPermissionNames"].constructor === Array) {
                this.grantedPermissionNames = [];
                for (let item of data["grantedPermissionNames"])
                    this.grantedPermissionNames.push(item);
            }
        }
    }

    static fromJS(data: any): GetRoleForEditOutput {
        let result = new GetRoleForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["role"] = this.role ? this.role.toJSON() : <any>undefined;
        if (this.permissions && this.permissions.constructor === Array) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item.toJSON());
        }
        if (this.grantedPermissionNames && this.grantedPermissionNames.constructor === Array) {
            data["grantedPermissionNames"] = [];
            for (let item of this.grantedPermissionNames)
                data["grantedPermissionNames"].push(item);
        }
        return data; 
    }
}

export interface IGetRoleForEditOutput {
    role: RoleEditDto;
    permissions: FlatPermissionDto[];
    grantedPermissionNames: string[];
}

export class RoleEditDto implements IRoleEditDto {
    id: number;
    displayName: string;
    isDefault: boolean;

    constructor(data?: IRoleEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.displayName = data["displayName"];
            this.isDefault = data["isDefault"];
        }
    }

    static fromJS(data: any): RoleEditDto {
        let result = new RoleEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["displayName"] = this.displayName;
        data["isDefault"] = this.isDefault;
        return data; 
    }
}

export interface IRoleEditDto {
    id: number;
    displayName: string;
    isDefault: boolean;
}

export class FlatPermissionDto implements IFlatPermissionDto {
    parentName: string;
    name: string;
    displayName: string;
    description: string;
    isGrantedByDefault: boolean;

    constructor(data?: IFlatPermissionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.parentName = data["parentName"];
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.description = data["description"];
            this.isGrantedByDefault = data["isGrantedByDefault"];
        }
    }

    static fromJS(data: any): FlatPermissionDto {
        let result = new FlatPermissionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["parentName"] = this.parentName;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["isGrantedByDefault"] = this.isGrantedByDefault;
        return data; 
    }
}

export interface IFlatPermissionDto {
    parentName: string;
    name: string;
    displayName: string;
    description: string;
    isGrantedByDefault: boolean;
}

export class CreateOrUpdateRoleInput implements ICreateOrUpdateRoleInput {
    role: RoleEditDto = new RoleEditDto();
    grantedPermissionNames: string[] = [];

    constructor(data?: ICreateOrUpdateRoleInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.role = data["role"] ? RoleEditDto.fromJS(data["role"]) : new RoleEditDto();
            if (data["grantedPermissionNames"] && data["grantedPermissionNames"].constructor === Array) {
                this.grantedPermissionNames = [];
                for (let item of data["grantedPermissionNames"])
                    this.grantedPermissionNames.push(item);
            }
        }
    }

    static fromJS(data: any): CreateOrUpdateRoleInput {
        let result = new CreateOrUpdateRoleInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["role"] = this.role ? this.role.toJSON() : <any>undefined;
        if (this.grantedPermissionNames && this.grantedPermissionNames.constructor === Array) {
            data["grantedPermissionNames"] = [];
            for (let item of this.grantedPermissionNames)
                data["grantedPermissionNames"].push(item);
        }
        return data; 
    }
}

export interface ICreateOrUpdateRoleInput {
    role: RoleEditDto;
    grantedPermissionNames: string[];
}

export class GetCurrentLoginInformationsOutput implements IGetCurrentLoginInformationsOutput {
    user: UserLoginInfoDto;
    tenant: TenantLoginInfoDto;
    application: ApplicationInfoDto;

    constructor(data?: IGetCurrentLoginInformationsOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.user = data["user"] ? UserLoginInfoDto.fromJS(data["user"]) : <any>undefined;
            this.tenant = data["tenant"] ? TenantLoginInfoDto.fromJS(data["tenant"]) : <any>undefined;
            this.application = data["application"] ? ApplicationInfoDto.fromJS(data["application"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetCurrentLoginInformationsOutput {
        let result = new GetCurrentLoginInformationsOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        data["tenant"] = this.tenant ? this.tenant.toJSON() : <any>undefined;
        data["application"] = this.application ? this.application.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetCurrentLoginInformationsOutput {
    user: UserLoginInfoDto;
    tenant: TenantLoginInfoDto;
    application: ApplicationInfoDto;
}

export class UserLoginInfoDto implements IUserLoginInfoDto {
    name: string;
    surname: string;
    userName: string;
    emailAddress: string;
    profilePictureId: string;
    id: number;

    constructor(data?: IUserLoginInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.surname = data["surname"];
            this.userName = data["userName"];
            this.emailAddress = data["emailAddress"];
            this.profilePictureId = data["profilePictureId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): UserLoginInfoDto {
        let result = new UserLoginInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["userName"] = this.userName;
        data["emailAddress"] = this.emailAddress;
        data["profilePictureId"] = this.profilePictureId;
        data["id"] = this.id;
        return data; 
    }
}

export interface IUserLoginInfoDto {
    name: string;
    surname: string;
    userName: string;
    emailAddress: string;
    profilePictureId: string;
    id: number;
}

export class TenantLoginInfoDto implements ITenantLoginInfoDto {
    tenancyName: string;
    name: string;
    logoId: string;
    logoFileType: string;
    customCssId: string;
    subscriptionEndDateUtc: moment.Moment;
    isInTrialPeriod: boolean;
    edition: EditionInfoDto;
    creationTime: moment.Moment;
    paymentPeriodType: TenantLoginInfoDtoPaymentPeriodType;
    subscriptionDateString: string;
    creationTimeString: string;
    id: number;

    constructor(data?: ITenantLoginInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenancyName = data["tenancyName"];
            this.name = data["name"];
            this.logoId = data["logoId"];
            this.logoFileType = data["logoFileType"];
            this.customCssId = data["customCssId"];
            this.subscriptionEndDateUtc = data["subscriptionEndDateUtc"] ? moment(data["subscriptionEndDateUtc"].toString()) : <any>undefined;
            this.isInTrialPeriod = data["isInTrialPeriod"];
            this.edition = data["edition"] ? EditionInfoDto.fromJS(data["edition"]) : <any>undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.paymentPeriodType = data["paymentPeriodType"];
            this.subscriptionDateString = data["subscriptionDateString"];
            this.creationTimeString = data["creationTimeString"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): TenantLoginInfoDto {
        let result = new TenantLoginInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["name"] = this.name;
        data["logoId"] = this.logoId;
        data["logoFileType"] = this.logoFileType;
        data["customCssId"] = this.customCssId;
        data["subscriptionEndDateUtc"] = this.subscriptionEndDateUtc ? this.subscriptionEndDateUtc.toISOString() : <any>undefined;
        data["isInTrialPeriod"] = this.isInTrialPeriod;
        data["edition"] = this.edition ? this.edition.toJSON() : <any>undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["paymentPeriodType"] = this.paymentPeriodType;
        data["subscriptionDateString"] = this.subscriptionDateString;
        data["creationTimeString"] = this.creationTimeString;
        data["id"] = this.id;
        return data; 
    }
}

export interface ITenantLoginInfoDto {
    tenancyName: string;
    name: string;
    logoId: string;
    logoFileType: string;
    customCssId: string;
    subscriptionEndDateUtc: moment.Moment;
    isInTrialPeriod: boolean;
    edition: EditionInfoDto;
    creationTime: moment.Moment;
    paymentPeriodType: TenantLoginInfoDtoPaymentPeriodType;
    subscriptionDateString: string;
    creationTimeString: string;
    id: number;
}

export class ApplicationInfoDto implements IApplicationInfoDto {
    version: string;
    releaseDate: moment.Moment;
    features: { [key: string] : boolean; };

    constructor(data?: IApplicationInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.version = data["version"];
            this.releaseDate = data["releaseDate"] ? moment(data["releaseDate"].toString()) : <any>undefined;
            if (data["features"]) {
                this.features = {};
                for (let key in data["features"]) {
                    if (data["features"].hasOwnProperty(key))
                        this.features[key] = data["features"][key];
                }
            }
        }
    }

    static fromJS(data: any): ApplicationInfoDto {
        let result = new ApplicationInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["version"] = this.version;
        data["releaseDate"] = this.releaseDate ? this.releaseDate.toISOString() : <any>undefined;
        if (this.features) {
            data["features"] = {};
            for (let key in this.features) {
                if (this.features.hasOwnProperty(key))
                    data["features"][key] = this.features[key];
            }
        }
        return data; 
    }
}

export interface IApplicationInfoDto {
    version: string;
    releaseDate: moment.Moment;
    features: { [key: string] : boolean; };
}

export class EditionInfoDto implements IEditionInfoDto {
    displayName: string;
    trialDayCount: number;
    monthlyPrice: number;
    annualPrice: number;
    isHighestEdition: boolean;
    isFree: boolean;
    id: number;

    constructor(data?: IEditionInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.displayName = data["displayName"];
            this.trialDayCount = data["trialDayCount"];
            this.monthlyPrice = data["monthlyPrice"];
            this.annualPrice = data["annualPrice"];
            this.isHighestEdition = data["isHighestEdition"];
            this.isFree = data["isFree"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): EditionInfoDto {
        let result = new EditionInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        data["trialDayCount"] = this.trialDayCount;
        data["monthlyPrice"] = this.monthlyPrice;
        data["annualPrice"] = this.annualPrice;
        data["isHighestEdition"] = this.isHighestEdition;
        data["isFree"] = this.isFree;
        data["id"] = this.id;
        return data; 
    }
}

export interface IEditionInfoDto {
    displayName: string;
    trialDayCount: number;
    monthlyPrice: number;
    annualPrice: number;
    isHighestEdition: boolean;
    isFree: boolean;
    id: number;
}

export class UpdateUserSignInTokenOutput implements IUpdateUserSignInTokenOutput {
    signInToken: string;
    encodedUserId: string;
    encodedTenantId: string;

    constructor(data?: IUpdateUserSignInTokenOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.signInToken = data["signInToken"];
            this.encodedUserId = data["encodedUserId"];
            this.encodedTenantId = data["encodedTenantId"];
        }
    }

    static fromJS(data: any): UpdateUserSignInTokenOutput {
        let result = new UpdateUserSignInTokenOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["signInToken"] = this.signInToken;
        data["encodedUserId"] = this.encodedUserId;
        data["encodedTenantId"] = this.encodedTenantId;
        return data; 
    }
}

export interface IUpdateUserSignInTokenOutput {
    signInToken: string;
    encodedUserId: string;
    encodedTenantId: string;
}

export class PagedResultDtoOfTenantListDto implements IPagedResultDtoOfTenantListDto {
    totalCount: number;
    items: TenantListDto[];

    constructor(data?: IPagedResultDtoOfTenantListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(TenantListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfTenantListDto {
        let result = new PagedResultDtoOfTenantListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfTenantListDto {
    totalCount: number;
    items: TenantListDto[];
}

export class TenantListDto implements ITenantListDto {
    tenancyName: string;
    name: string;
    editionDisplayName: string;
    connectionString: string;
    isActive: boolean;
    creationTime: moment.Moment;
    subscriptionEndDateUtc: moment.Moment;
    editionId: number;
    isInTrialPeriod: boolean;
    id: number;

    constructor(data?: ITenantListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenancyName = data["tenancyName"];
            this.name = data["name"];
            this.editionDisplayName = data["editionDisplayName"];
            this.connectionString = data["connectionString"];
            this.isActive = data["isActive"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.subscriptionEndDateUtc = data["subscriptionEndDateUtc"] ? moment(data["subscriptionEndDateUtc"].toString()) : <any>undefined;
            this.editionId = data["editionId"];
            this.isInTrialPeriod = data["isInTrialPeriod"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): TenantListDto {
        let result = new TenantListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["name"] = this.name;
        data["editionDisplayName"] = this.editionDisplayName;
        data["connectionString"] = this.connectionString;
        data["isActive"] = this.isActive;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["subscriptionEndDateUtc"] = this.subscriptionEndDateUtc ? this.subscriptionEndDateUtc.toISOString() : <any>undefined;
        data["editionId"] = this.editionId;
        data["isInTrialPeriod"] = this.isInTrialPeriod;
        data["id"] = this.id;
        return data; 
    }
}

export interface ITenantListDto {
    tenancyName: string;
    name: string;
    editionDisplayName: string;
    connectionString: string;
    isActive: boolean;
    creationTime: moment.Moment;
    subscriptionEndDateUtc: moment.Moment;
    editionId: number;
    isInTrialPeriod: boolean;
    id: number;
}

export class CreateTenantInput implements ICreateTenantInput {
    tenancyName: string;
    name: string;
    adminEmailAddress: string;
    adminPassword: string;
    connectionString: string;
    shouldChangePasswordOnNextLogin: boolean;
    sendActivationEmail: boolean;
    editionId: number;
    isActive: boolean;
    subscriptionEndDateUtc: moment.Moment;
    isInTrialPeriod: boolean;

    constructor(data?: ICreateTenantInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenancyName = data["tenancyName"];
            this.name = data["name"];
            this.adminEmailAddress = data["adminEmailAddress"];
            this.adminPassword = data["adminPassword"];
            this.connectionString = data["connectionString"];
            this.shouldChangePasswordOnNextLogin = data["shouldChangePasswordOnNextLogin"];
            this.sendActivationEmail = data["sendActivationEmail"];
            this.editionId = data["editionId"];
            this.isActive = data["isActive"];
            this.subscriptionEndDateUtc = data["subscriptionEndDateUtc"] ? moment(data["subscriptionEndDateUtc"].toString()) : <any>undefined;
            this.isInTrialPeriod = data["isInTrialPeriod"];
        }
    }

    static fromJS(data: any): CreateTenantInput {
        let result = new CreateTenantInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["name"] = this.name;
        data["adminEmailAddress"] = this.adminEmailAddress;
        data["adminPassword"] = this.adminPassword;
        data["connectionString"] = this.connectionString;
        data["shouldChangePasswordOnNextLogin"] = this.shouldChangePasswordOnNextLogin;
        data["sendActivationEmail"] = this.sendActivationEmail;
        data["editionId"] = this.editionId;
        data["isActive"] = this.isActive;
        data["subscriptionEndDateUtc"] = this.subscriptionEndDateUtc ? this.subscriptionEndDateUtc.toISOString() : <any>undefined;
        data["isInTrialPeriod"] = this.isInTrialPeriod;
        return data; 
    }
}

export interface ICreateTenantInput {
    tenancyName: string;
    name: string;
    adminEmailAddress: string;
    adminPassword: string;
    connectionString: string;
    shouldChangePasswordOnNextLogin: boolean;
    sendActivationEmail: boolean;
    editionId: number;
    isActive: boolean;
    subscriptionEndDateUtc: moment.Moment;
    isInTrialPeriod: boolean;
}

export class TenantEditDto implements ITenantEditDto {
    tenancyName: string;
    name: string;
    connectionString: string;
    editionId: number;
    isActive: boolean;
    subscriptionEndDateUtc: moment.Moment;
    isInTrialPeriod: boolean;
    id: number;

    constructor(data?: ITenantEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenancyName = data["tenancyName"];
            this.name = data["name"];
            this.connectionString = data["connectionString"];
            this.editionId = data["editionId"];
            this.isActive = data["isActive"];
            this.subscriptionEndDateUtc = data["subscriptionEndDateUtc"] ? moment(data["subscriptionEndDateUtc"].toString()) : <any>undefined;
            this.isInTrialPeriod = data["isInTrialPeriod"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): TenantEditDto {
        let result = new TenantEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["name"] = this.name;
        data["connectionString"] = this.connectionString;
        data["editionId"] = this.editionId;
        data["isActive"] = this.isActive;
        data["subscriptionEndDateUtc"] = this.subscriptionEndDateUtc ? this.subscriptionEndDateUtc.toISOString() : <any>undefined;
        data["isInTrialPeriod"] = this.isInTrialPeriod;
        data["id"] = this.id;
        return data; 
    }
}

export interface ITenantEditDto {
    tenancyName: string;
    name: string;
    connectionString: string;
    editionId: number;
    isActive: boolean;
    subscriptionEndDateUtc: moment.Moment;
    isInTrialPeriod: boolean;
    id: number;
}

export class GetTenantFeaturesEditOutput implements IGetTenantFeaturesEditOutput {
    featureValues: NameValueDto[];
    features: FlatFeatureDto[];

    constructor(data?: IGetTenantFeaturesEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["featureValues"] && data["featureValues"].constructor === Array) {
                this.featureValues = [];
                for (let item of data["featureValues"])
                    this.featureValues.push(NameValueDto.fromJS(item));
            }
            if (data["features"] && data["features"].constructor === Array) {
                this.features = [];
                for (let item of data["features"])
                    this.features.push(FlatFeatureDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetTenantFeaturesEditOutput {
        let result = new GetTenantFeaturesEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.featureValues && this.featureValues.constructor === Array) {
            data["featureValues"] = [];
            for (let item of this.featureValues)
                data["featureValues"].push(item.toJSON());
        }
        if (this.features && this.features.constructor === Array) {
            data["features"] = [];
            for (let item of this.features)
                data["features"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetTenantFeaturesEditOutput {
    featureValues: NameValueDto[];
    features: FlatFeatureDto[];
}

export class UpdateTenantFeaturesInput implements IUpdateTenantFeaturesInput {
    id: number;
    featureValues: NameValueDto[] = [];

    constructor(data?: IUpdateTenantFeaturesInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            if (data["featureValues"] && data["featureValues"].constructor === Array) {
                this.featureValues = [];
                for (let item of data["featureValues"])
                    this.featureValues.push(NameValueDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UpdateTenantFeaturesInput {
        let result = new UpdateTenantFeaturesInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (this.featureValues && this.featureValues.constructor === Array) {
            data["featureValues"] = [];
            for (let item of this.featureValues)
                data["featureValues"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUpdateTenantFeaturesInput {
    id: number;
    featureValues: NameValueDto[];
}

export class EntityDto implements IEntityDto {
    id: number;

    constructor(data?: IEntityDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
        }
    }

    static fromJS(data: any): EntityDto {
        let result = new EntityDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }
}

export interface IEntityDto {
    id: number;
}

export class GetMemberActivityOutput implements IGetMemberActivityOutput {
    memberActivities: MemberActivity[];

    constructor(data?: IGetMemberActivityOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["memberActivities"] && data["memberActivities"].constructor === Array) {
                this.memberActivities = [];
                for (let item of data["memberActivities"])
                    this.memberActivities.push(MemberActivity.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetMemberActivityOutput {
        let result = new GetMemberActivityOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.memberActivities && this.memberActivities.constructor === Array) {
            data["memberActivities"] = [];
            for (let item of this.memberActivities)
                data["memberActivities"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetMemberActivityOutput {
    memberActivities: MemberActivity[];
}

export class MemberActivity implements IMemberActivity {
    name: string;
    earnings: string;
    cases: number;
    closed: number;
    rate: string;

    constructor(data?: IMemberActivity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.earnings = data["earnings"];
            this.cases = data["cases"];
            this.closed = data["closed"];
            this.rate = data["rate"];
        }
    }

    static fromJS(data: any): MemberActivity {
        let result = new MemberActivity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["earnings"] = this.earnings;
        data["cases"] = this.cases;
        data["closed"] = this.closed;
        data["rate"] = this.rate;
        return data; 
    }
}

export interface IMemberActivity {
    name: string;
    earnings: string;
    cases: number;
    closed: number;
    rate: string;
}

export class GetDashboardDataOutput implements IGetDashboardDataOutput {
    totalProfit: number;
    newFeedbacks: number;
    newOrders: number;
    newUsers: number;
    salesSummary: SalesSummaryData[];
    totalSales: number;
    revenue: number;
    expenses: number;
    growth: number;
    transactionPercent: number;
    newVisitPercent: number;
    bouncePercent: number;
    dailySales: number[];
    profitShares: number[];

    constructor(data?: IGetDashboardDataOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalProfit = data["totalProfit"];
            this.newFeedbacks = data["newFeedbacks"];
            this.newOrders = data["newOrders"];
            this.newUsers = data["newUsers"];
            if (data["salesSummary"] && data["salesSummary"].constructor === Array) {
                this.salesSummary = [];
                for (let item of data["salesSummary"])
                    this.salesSummary.push(SalesSummaryData.fromJS(item));
            }
            this.totalSales = data["totalSales"];
            this.revenue = data["revenue"];
            this.expenses = data["expenses"];
            this.growth = data["growth"];
            this.transactionPercent = data["transactionPercent"];
            this.newVisitPercent = data["newVisitPercent"];
            this.bouncePercent = data["bouncePercent"];
            if (data["dailySales"] && data["dailySales"].constructor === Array) {
                this.dailySales = [];
                for (let item of data["dailySales"])
                    this.dailySales.push(item);
            }
            if (data["profitShares"] && data["profitShares"].constructor === Array) {
                this.profitShares = [];
                for (let item of data["profitShares"])
                    this.profitShares.push(item);
            }
        }
    }

    static fromJS(data: any): GetDashboardDataOutput {
        let result = new GetDashboardDataOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalProfit"] = this.totalProfit;
        data["newFeedbacks"] = this.newFeedbacks;
        data["newOrders"] = this.newOrders;
        data["newUsers"] = this.newUsers;
        if (this.salesSummary && this.salesSummary.constructor === Array) {
            data["salesSummary"] = [];
            for (let item of this.salesSummary)
                data["salesSummary"].push(item.toJSON());
        }
        data["totalSales"] = this.totalSales;
        data["revenue"] = this.revenue;
        data["expenses"] = this.expenses;
        data["growth"] = this.growth;
        data["transactionPercent"] = this.transactionPercent;
        data["newVisitPercent"] = this.newVisitPercent;
        data["bouncePercent"] = this.bouncePercent;
        if (this.dailySales && this.dailySales.constructor === Array) {
            data["dailySales"] = [];
            for (let item of this.dailySales)
                data["dailySales"].push(item);
        }
        if (this.profitShares && this.profitShares.constructor === Array) {
            data["profitShares"] = [];
            for (let item of this.profitShares)
                data["profitShares"].push(item);
        }
        return data; 
    }
}

export interface IGetDashboardDataOutput {
    totalProfit: number;
    newFeedbacks: number;
    newOrders: number;
    newUsers: number;
    salesSummary: SalesSummaryData[];
    totalSales: number;
    revenue: number;
    expenses: number;
    growth: number;
    transactionPercent: number;
    newVisitPercent: number;
    bouncePercent: number;
    dailySales: number[];
    profitShares: number[];
}

export class SalesSummaryData implements ISalesSummaryData {
    period: string;
    sales: number;
    profit: number;

    constructor(data?: ISalesSummaryData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.period = data["period"];
            this.sales = data["sales"];
            this.profit = data["profit"];
        }
    }

    static fromJS(data: any): SalesSummaryData {
        let result = new SalesSummaryData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["period"] = this.period;
        data["sales"] = this.sales;
        data["profit"] = this.profit;
        return data; 
    }
}

export interface ISalesSummaryData {
    period: string;
    sales: number;
    profit: number;
}

export class GetSalesSummaryOutput implements IGetSalesSummaryOutput {
    salesSummary: SalesSummaryData[];

    constructor(data?: IGetSalesSummaryOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["salesSummary"] && data["salesSummary"].constructor === Array) {
                this.salesSummary = [];
                for (let item of data["salesSummary"])
                    this.salesSummary.push(SalesSummaryData.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetSalesSummaryOutput {
        let result = new GetSalesSummaryOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.salesSummary && this.salesSummary.constructor === Array) {
            data["salesSummary"] = [];
            for (let item of this.salesSummary)
                data["salesSummary"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetSalesSummaryOutput {
    salesSummary: SalesSummaryData[];
}

export class GetWorldMapOutput implements IGetWorldMapOutput {
    countries: WorldMapCountry[];

    constructor(data?: IGetWorldMapOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["countries"] && data["countries"].constructor === Array) {
                this.countries = [];
                for (let item of data["countries"])
                    this.countries.push(WorldMapCountry.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetWorldMapOutput {
        let result = new GetWorldMapOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.countries && this.countries.constructor === Array) {
            data["countries"] = [];
            for (let item of this.countries)
                data["countries"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetWorldMapOutput {
    countries: WorldMapCountry[];
}

export class WorldMapCountry implements IWorldMapCountry {
    countryName: string;
    color: number;

    constructor(data?: IWorldMapCountry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.countryName = data["countryName"];
            this.color = data["color"];
        }
    }

    static fromJS(data: any): WorldMapCountry {
        let result = new WorldMapCountry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["countryName"] = this.countryName;
        data["color"] = this.color;
        return data; 
    }
}

export interface IWorldMapCountry {
    countryName: string;
    color: number;
}

export class GetGeneralStatsOutput implements IGetGeneralStatsOutput {
    transactionPercent: number;
    newVisitPercent: number;
    bouncePercent: number;

    constructor(data?: IGetGeneralStatsOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.transactionPercent = data["transactionPercent"];
            this.newVisitPercent = data["newVisitPercent"];
            this.bouncePercent = data["bouncePercent"];
        }
    }

    static fromJS(data: any): GetGeneralStatsOutput {
        let result = new GetGeneralStatsOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transactionPercent"] = this.transactionPercent;
        data["newVisitPercent"] = this.newVisitPercent;
        data["bouncePercent"] = this.bouncePercent;
        return data; 
    }
}

export interface IGetGeneralStatsOutput {
    transactionPercent: number;
    newVisitPercent: number;
    bouncePercent: number;
}

export class RegisterTenantInput implements IRegisterTenantInput {
    tenancyName: string;
    name: string;
    adminEmailAddress: string;
    adminPassword: string;
    captchaResponse: string;
    subscriptionStartType: RegisterTenantInputSubscriptionStartType;
    gateway: RegisterTenantInputGateway;
    editionId: number;
    paymentId: string;

    constructor(data?: IRegisterTenantInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenancyName = data["tenancyName"];
            this.name = data["name"];
            this.adminEmailAddress = data["adminEmailAddress"];
            this.adminPassword = data["adminPassword"];
            this.captchaResponse = data["captchaResponse"];
            this.subscriptionStartType = data["subscriptionStartType"];
            this.gateway = data["gateway"];
            this.editionId = data["editionId"];
            this.paymentId = data["paymentId"];
        }
    }

    static fromJS(data: any): RegisterTenantInput {
        let result = new RegisterTenantInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["name"] = this.name;
        data["adminEmailAddress"] = this.adminEmailAddress;
        data["adminPassword"] = this.adminPassword;
        data["captchaResponse"] = this.captchaResponse;
        data["subscriptionStartType"] = this.subscriptionStartType;
        data["gateway"] = this.gateway;
        data["editionId"] = this.editionId;
        data["paymentId"] = this.paymentId;
        return data; 
    }
}

export interface IRegisterTenantInput {
    tenancyName: string;
    name: string;
    adminEmailAddress: string;
    adminPassword: string;
    captchaResponse: string;
    subscriptionStartType: RegisterTenantInputSubscriptionStartType;
    gateway: RegisterTenantInputGateway;
    editionId: number;
    paymentId: string;
}

export class RegisterTenantOutput implements IRegisterTenantOutput {
    tenantId: number;
    tenancyName: string;
    name: string;
    userName: string;
    emailAddress: string;
    isTenantActive: boolean;
    isActive: boolean;
    isEmailConfirmationRequired: boolean;

    constructor(data?: IRegisterTenantOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.tenancyName = data["tenancyName"];
            this.name = data["name"];
            this.userName = data["userName"];
            this.emailAddress = data["emailAddress"];
            this.isTenantActive = data["isTenantActive"];
            this.isActive = data["isActive"];
            this.isEmailConfirmationRequired = data["isEmailConfirmationRequired"];
        }
    }

    static fromJS(data: any): RegisterTenantOutput {
        let result = new RegisterTenantOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["tenancyName"] = this.tenancyName;
        data["name"] = this.name;
        data["userName"] = this.userName;
        data["emailAddress"] = this.emailAddress;
        data["isTenantActive"] = this.isTenantActive;
        data["isActive"] = this.isActive;
        data["isEmailConfirmationRequired"] = this.isEmailConfirmationRequired;
        return data; 
    }
}

export interface IRegisterTenantOutput {
    tenantId: number;
    tenancyName: string;
    name: string;
    userName: string;
    emailAddress: string;
    isTenantActive: boolean;
    isActive: boolean;
    isEmailConfirmationRequired: boolean;
}

export class EditionsSelectOutput implements IEditionsSelectOutput {
    allFeatures: FlatFeatureSelectDto[];
    editionsWithFeatures: EditionWithFeaturesDto[];
    tenantEditionId: number;

    constructor(data?: IEditionsSelectOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["allFeatures"] && data["allFeatures"].constructor === Array) {
                this.allFeatures = [];
                for (let item of data["allFeatures"])
                    this.allFeatures.push(FlatFeatureSelectDto.fromJS(item));
            }
            if (data["editionsWithFeatures"] && data["editionsWithFeatures"].constructor === Array) {
                this.editionsWithFeatures = [];
                for (let item of data["editionsWithFeatures"])
                    this.editionsWithFeatures.push(EditionWithFeaturesDto.fromJS(item));
            }
            this.tenantEditionId = data["tenantEditionId"];
        }
    }

    static fromJS(data: any): EditionsSelectOutput {
        let result = new EditionsSelectOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.allFeatures && this.allFeatures.constructor === Array) {
            data["allFeatures"] = [];
            for (let item of this.allFeatures)
                data["allFeatures"].push(item.toJSON());
        }
        if (this.editionsWithFeatures && this.editionsWithFeatures.constructor === Array) {
            data["editionsWithFeatures"] = [];
            for (let item of this.editionsWithFeatures)
                data["editionsWithFeatures"].push(item.toJSON());
        }
        data["tenantEditionId"] = this.tenantEditionId;
        return data; 
    }
}

export interface IEditionsSelectOutput {
    allFeatures: FlatFeatureSelectDto[];
    editionsWithFeatures: EditionWithFeaturesDto[];
    tenantEditionId: number;
}

export class FlatFeatureSelectDto implements IFlatFeatureSelectDto {
    parentName: string;
    name: string;
    displayName: string;
    description: string;
    defaultValue: string;
    inputType: IInputType;
    textHtmlColor: string;

    constructor(data?: IFlatFeatureSelectDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.parentName = data["parentName"];
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.description = data["description"];
            this.defaultValue = data["defaultValue"];
            this.inputType = data["inputType"] ? IInputType.fromJS(data["inputType"]) : <any>undefined;
            this.textHtmlColor = data["textHtmlColor"];
        }
    }

    static fromJS(data: any): FlatFeatureSelectDto {
        let result = new FlatFeatureSelectDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["parentName"] = this.parentName;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["defaultValue"] = this.defaultValue;
        data["inputType"] = this.inputType ? this.inputType.toJSON() : <any>undefined;
        data["textHtmlColor"] = this.textHtmlColor;
        return data; 
    }
}

export interface IFlatFeatureSelectDto {
    parentName: string;
    name: string;
    displayName: string;
    description: string;
    defaultValue: string;
    inputType: IInputType;
    textHtmlColor: string;
}

export class EditionWithFeaturesDto implements IEditionWithFeaturesDto {
    edition: EditionSelectDto;
    featureValues: NameValueDto[];

    constructor(data?: IEditionWithFeaturesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.edition = data["edition"] ? EditionSelectDto.fromJS(data["edition"]) : <any>undefined;
            if (data["featureValues"] && data["featureValues"].constructor === Array) {
                this.featureValues = [];
                for (let item of data["featureValues"])
                    this.featureValues.push(NameValueDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): EditionWithFeaturesDto {
        let result = new EditionWithFeaturesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["edition"] = this.edition ? this.edition.toJSON() : <any>undefined;
        if (this.featureValues && this.featureValues.constructor === Array) {
            data["featureValues"] = [];
            for (let item of this.featureValues)
                data["featureValues"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IEditionWithFeaturesDto {
    edition: EditionSelectDto;
    featureValues: NameValueDto[];
}

export class IInputType implements IIInputType {
    name: string;
    attributes: { [key: string] : any; };
    validator: IValueValidator;

    constructor(data?: IIInputType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            if (data["attributes"]) {
                this.attributes = {};
                for (let key in data["attributes"]) {
                    if (data["attributes"].hasOwnProperty(key))
                        this.attributes[key] = data["attributes"][key];
                }
            }
            this.validator = data["validator"] ? IValueValidator.fromJS(data["validator"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IInputType {
        let result = new IInputType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (this.attributes) {
            data["attributes"] = {};
            for (let key in this.attributes) {
                if (this.attributes.hasOwnProperty(key))
                    data["attributes"][key] = this.attributes[key];
            }
        }
        data["validator"] = this.validator ? this.validator.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIInputType {
    name: string;
    attributes: { [key: string] : any; };
    validator: IValueValidator;
}

export class TenantSettingsEditDto implements ITenantSettingsEditDto {
    general: GeneralSettingsEditDto;
    userManagement: TenantUserManagementSettingsEditDto = new TenantUserManagementSettingsEditDto();
    email: EmailSettingsEditDto;
    ldap: LdapSettingsEditDto;
    security: SecuritySettingsEditDto = new SecuritySettingsEditDto();
    billing: TenantBillingSettingsEditDto;

    constructor(data?: ITenantSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.general = data["general"] ? GeneralSettingsEditDto.fromJS(data["general"]) : <any>undefined;
            this.userManagement = data["userManagement"] ? TenantUserManagementSettingsEditDto.fromJS(data["userManagement"]) : new TenantUserManagementSettingsEditDto();
            this.email = data["email"] ? EmailSettingsEditDto.fromJS(data["email"]) : <any>undefined;
            this.ldap = data["ldap"] ? LdapSettingsEditDto.fromJS(data["ldap"]) : <any>undefined;
            this.security = data["security"] ? SecuritySettingsEditDto.fromJS(data["security"]) : new SecuritySettingsEditDto();
            this.billing = data["billing"] ? TenantBillingSettingsEditDto.fromJS(data["billing"]) : <any>undefined;
        }
    }

    static fromJS(data: any): TenantSettingsEditDto {
        let result = new TenantSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["general"] = this.general ? this.general.toJSON() : <any>undefined;
        data["userManagement"] = this.userManagement ? this.userManagement.toJSON() : <any>undefined;
        data["email"] = this.email ? this.email.toJSON() : <any>undefined;
        data["ldap"] = this.ldap ? this.ldap.toJSON() : <any>undefined;
        data["security"] = this.security ? this.security.toJSON() : <any>undefined;
        data["billing"] = this.billing ? this.billing.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ITenantSettingsEditDto {
    general: GeneralSettingsEditDto;
    userManagement: TenantUserManagementSettingsEditDto;
    email: EmailSettingsEditDto;
    ldap: LdapSettingsEditDto;
    security: SecuritySettingsEditDto;
    billing: TenantBillingSettingsEditDto;
}

export class TenantUserManagementSettingsEditDto implements ITenantUserManagementSettingsEditDto {
    allowSelfRegistration: boolean;
    isNewRegisteredUserActiveByDefault: boolean;
    isEmailConfirmationRequiredForLogin: boolean;
    useCaptchaOnRegistration: boolean;

    constructor(data?: ITenantUserManagementSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.allowSelfRegistration = data["allowSelfRegistration"];
            this.isNewRegisteredUserActiveByDefault = data["isNewRegisteredUserActiveByDefault"];
            this.isEmailConfirmationRequiredForLogin = data["isEmailConfirmationRequiredForLogin"];
            this.useCaptchaOnRegistration = data["useCaptchaOnRegistration"];
        }
    }

    static fromJS(data: any): TenantUserManagementSettingsEditDto {
        let result = new TenantUserManagementSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["allowSelfRegistration"] = this.allowSelfRegistration;
        data["isNewRegisteredUserActiveByDefault"] = this.isNewRegisteredUserActiveByDefault;
        data["isEmailConfirmationRequiredForLogin"] = this.isEmailConfirmationRequiredForLogin;
        data["useCaptchaOnRegistration"] = this.useCaptchaOnRegistration;
        return data; 
    }
}

export interface ITenantUserManagementSettingsEditDto {
    allowSelfRegistration: boolean;
    isNewRegisteredUserActiveByDefault: boolean;
    isEmailConfirmationRequiredForLogin: boolean;
    useCaptchaOnRegistration: boolean;
}

export class LdapSettingsEditDto implements ILdapSettingsEditDto {
    isModuleEnabled: boolean;
    isEnabled: boolean;
    domain: string;
    userName: string;
    password: string;

    constructor(data?: ILdapSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.isModuleEnabled = data["isModuleEnabled"];
            this.isEnabled = data["isEnabled"];
            this.domain = data["domain"];
            this.userName = data["userName"];
            this.password = data["password"];
        }
    }

    static fromJS(data: any): LdapSettingsEditDto {
        let result = new LdapSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isModuleEnabled"] = this.isModuleEnabled;
        data["isEnabled"] = this.isEnabled;
        data["domain"] = this.domain;
        data["userName"] = this.userName;
        data["password"] = this.password;
        return data; 
    }
}

export interface ILdapSettingsEditDto {
    isModuleEnabled: boolean;
    isEnabled: boolean;
    domain: string;
    userName: string;
    password: string;
}

export class TenantBillingSettingsEditDto implements ITenantBillingSettingsEditDto {
    legalName: string;
    address: string;
    taxVatNo: string;

    constructor(data?: ITenantBillingSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.legalName = data["legalName"];
            this.address = data["address"];
            this.taxVatNo = data["taxVatNo"];
        }
    }

    static fromJS(data: any): TenantBillingSettingsEditDto {
        let result = new TenantBillingSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["legalName"] = this.legalName;
        data["address"] = this.address;
        data["taxVatNo"] = this.taxVatNo;
        return data; 
    }
}

export interface ITenantBillingSettingsEditDto {
    legalName: string;
    address: string;
    taxVatNo: string;
}

export class ListResultDtoOfNameValueDto implements IListResultDtoOfNameValueDto {
    items: NameValueDto[];

    constructor(data?: IListResultDtoOfNameValueDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(NameValueDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfNameValueDto {
        let result = new ListResultDtoOfNameValueDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfNameValueDto {
    items: NameValueDto[];
}

export class AuthenticateModel implements IAuthenticateModel {
    userNameOrEmailAddress: string;
    password: string;
    twoFactorVerificationCode: string;
    rememberClient: boolean;
    twoFactorRememberClientToken: string;
    singleSignIn: boolean;
    returnUrl: string;

    constructor(data?: IAuthenticateModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userNameOrEmailAddress = data["userNameOrEmailAddress"];
            this.password = data["password"];
            this.twoFactorVerificationCode = data["twoFactorVerificationCode"];
            this.rememberClient = data["rememberClient"];
            this.twoFactorRememberClientToken = data["twoFactorRememberClientToken"];
            this.singleSignIn = data["singleSignIn"];
            this.returnUrl = data["returnUrl"];
        }
    }

    static fromJS(data: any): AuthenticateModel {
        let result = new AuthenticateModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userNameOrEmailAddress"] = this.userNameOrEmailAddress;
        data["password"] = this.password;
        data["twoFactorVerificationCode"] = this.twoFactorVerificationCode;
        data["rememberClient"] = this.rememberClient;
        data["twoFactorRememberClientToken"] = this.twoFactorRememberClientToken;
        data["singleSignIn"] = this.singleSignIn;
        data["returnUrl"] = this.returnUrl;
        return data; 
    }
}

export interface IAuthenticateModel {
    userNameOrEmailAddress: string;
    password: string;
    twoFactorVerificationCode: string;
    rememberClient: boolean;
    twoFactorRememberClientToken: string;
    singleSignIn: boolean;
    returnUrl: string;
}

export class AuthenticateResultModel implements IAuthenticateResultModel {
    accessToken: string;
    encryptedAccessToken: string;
    expireInSeconds: number;
    shouldResetPassword: boolean;
    passwordResetCode: string;
    userId: number;
    requiresTwoFactorVerification: boolean;
    twoFactorAuthProviders: string[];
    twoFactorRememberClientToken: string;
    returnUrl: string;

    constructor(data?: IAuthenticateResultModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.accessToken = data["accessToken"];
            this.encryptedAccessToken = data["encryptedAccessToken"];
            this.expireInSeconds = data["expireInSeconds"];
            this.shouldResetPassword = data["shouldResetPassword"];
            this.passwordResetCode = data["passwordResetCode"];
            this.userId = data["userId"];
            this.requiresTwoFactorVerification = data["requiresTwoFactorVerification"];
            if (data["twoFactorAuthProviders"] && data["twoFactorAuthProviders"].constructor === Array) {
                this.twoFactorAuthProviders = [];
                for (let item of data["twoFactorAuthProviders"])
                    this.twoFactorAuthProviders.push(item);
            }
            this.twoFactorRememberClientToken = data["twoFactorRememberClientToken"];
            this.returnUrl = data["returnUrl"];
        }
    }

    static fromJS(data: any): AuthenticateResultModel {
        let result = new AuthenticateResultModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken;
        data["encryptedAccessToken"] = this.encryptedAccessToken;
        data["expireInSeconds"] = this.expireInSeconds;
        data["shouldResetPassword"] = this.shouldResetPassword;
        data["passwordResetCode"] = this.passwordResetCode;
        data["userId"] = this.userId;
        data["requiresTwoFactorVerification"] = this.requiresTwoFactorVerification;
        if (this.twoFactorAuthProviders && this.twoFactorAuthProviders.constructor === Array) {
            data["twoFactorAuthProviders"] = [];
            for (let item of this.twoFactorAuthProviders)
                data["twoFactorAuthProviders"].push(item);
        }
        data["twoFactorRememberClientToken"] = this.twoFactorRememberClientToken;
        data["returnUrl"] = this.returnUrl;
        return data; 
    }
}

export interface IAuthenticateResultModel {
    accessToken: string;
    encryptedAccessToken: string;
    expireInSeconds: number;
    shouldResetPassword: boolean;
    passwordResetCode: string;
    userId: number;
    requiresTwoFactorVerification: boolean;
    twoFactorAuthProviders: string[];
    twoFactorRememberClientToken: string;
    returnUrl: string;
}

export class SendTwoFactorAuthCodeModel implements ISendTwoFactorAuthCodeModel {
    userId: number;
    provider: string;

    constructor(data?: ISendTwoFactorAuthCodeModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            this.provider = data["provider"];
        }
    }

    static fromJS(data: any): SendTwoFactorAuthCodeModel {
        let result = new SendTwoFactorAuthCodeModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["provider"] = this.provider;
        return data; 
    }
}

export interface ISendTwoFactorAuthCodeModel {
    userId: number;
    provider: string;
}

export class ImpersonatedAuthenticateResultModel implements IImpersonatedAuthenticateResultModel {
    accessToken: string;
    encryptedAccessToken: string;
    expireInSeconds: number;

    constructor(data?: IImpersonatedAuthenticateResultModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.accessToken = data["accessToken"];
            this.encryptedAccessToken = data["encryptedAccessToken"];
            this.expireInSeconds = data["expireInSeconds"];
        }
    }

    static fromJS(data: any): ImpersonatedAuthenticateResultModel {
        let result = new ImpersonatedAuthenticateResultModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken;
        data["encryptedAccessToken"] = this.encryptedAccessToken;
        data["expireInSeconds"] = this.expireInSeconds;
        return data; 
    }
}

export interface IImpersonatedAuthenticateResultModel {
    accessToken: string;
    encryptedAccessToken: string;
    expireInSeconds: number;
}

export class SwitchedAccountAuthenticateResultModel implements ISwitchedAccountAuthenticateResultModel {
    accessToken: string;
    encryptedAccessToken: string;
    expireInSeconds: number;

    constructor(data?: ISwitchedAccountAuthenticateResultModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.accessToken = data["accessToken"];
            this.encryptedAccessToken = data["encryptedAccessToken"];
            this.expireInSeconds = data["expireInSeconds"];
        }
    }

    static fromJS(data: any): SwitchedAccountAuthenticateResultModel {
        let result = new SwitchedAccountAuthenticateResultModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken;
        data["encryptedAccessToken"] = this.encryptedAccessToken;
        data["expireInSeconds"] = this.expireInSeconds;
        return data; 
    }
}

export interface ISwitchedAccountAuthenticateResultModel {
    accessToken: string;
    encryptedAccessToken: string;
    expireInSeconds: number;
}

export class ExternalLoginProviderInfoModel implements IExternalLoginProviderInfoModel {
    name: string;
    clientId: string;

    constructor(data?: IExternalLoginProviderInfoModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.clientId = data["clientId"];
        }
    }

    static fromJS(data: any): ExternalLoginProviderInfoModel {
        let result = new ExternalLoginProviderInfoModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["clientId"] = this.clientId;
        return data; 
    }
}

export interface IExternalLoginProviderInfoModel {
    name: string;
    clientId: string;
}

export class ExternalAuthenticateModel implements IExternalAuthenticateModel {
    authProvider: string;
    providerKey: string;
    providerAccessCode: string;
    returnUrl: string;
    singleSignIn: boolean;

    constructor(data?: IExternalAuthenticateModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.authProvider = data["authProvider"];
            this.providerKey = data["providerKey"];
            this.providerAccessCode = data["providerAccessCode"];
            this.returnUrl = data["returnUrl"];
            this.singleSignIn = data["singleSignIn"];
        }
    }

    static fromJS(data: any): ExternalAuthenticateModel {
        let result = new ExternalAuthenticateModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["authProvider"] = this.authProvider;
        data["providerKey"] = this.providerKey;
        data["providerAccessCode"] = this.providerAccessCode;
        data["returnUrl"] = this.returnUrl;
        data["singleSignIn"] = this.singleSignIn;
        return data; 
    }
}

export interface IExternalAuthenticateModel {
    authProvider: string;
    providerKey: string;
    providerAccessCode: string;
    returnUrl: string;
    singleSignIn: boolean;
}

export class ExternalAuthenticateResultModel implements IExternalAuthenticateResultModel {
    accessToken: string;
    encryptedAccessToken: string;
    expireInSeconds: number;
    waitingForActivation: boolean;
    returnUrl: string;

    constructor(data?: IExternalAuthenticateResultModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.accessToken = data["accessToken"];
            this.encryptedAccessToken = data["encryptedAccessToken"];
            this.expireInSeconds = data["expireInSeconds"];
            this.waitingForActivation = data["waitingForActivation"];
            this.returnUrl = data["returnUrl"];
        }
    }

    static fromJS(data: any): ExternalAuthenticateResultModel {
        let result = new ExternalAuthenticateResultModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken;
        data["encryptedAccessToken"] = this.encryptedAccessToken;
        data["expireInSeconds"] = this.expireInSeconds;
        data["waitingForActivation"] = this.waitingForActivation;
        data["returnUrl"] = this.returnUrl;
        return data; 
    }
}

export interface IExternalAuthenticateResultModel {
    accessToken: string;
    encryptedAccessToken: string;
    expireInSeconds: number;
    waitingForActivation: boolean;
    returnUrl: string;
}

export class GetUpdateAddressInputDto implements IGetUpdateAddressInputDto {
    psCode: string;
    refID: number;
    addrType: string;
    address: string;
    city: string;
    kelurahan: string;
    kecamatan: string;
    postCode: string;
    country: string;

    constructor(data?: IGetUpdateAddressInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.psCode = data["psCode"];
            this.refID = data["refID"];
            this.addrType = data["addrType"];
            this.address = data["address"];
            this.city = data["city"];
            this.kelurahan = data["kelurahan"];
            this.kecamatan = data["kecamatan"];
            this.postCode = data["postCode"];
            this.country = data["country"];
        }
    }

    static fromJS(data: any): GetUpdateAddressInputDto {
        let result = new GetUpdateAddressInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["psCode"] = this.psCode;
        data["refID"] = this.refID;
        data["addrType"] = this.addrType;
        data["address"] = this.address;
        data["city"] = this.city;
        data["kelurahan"] = this.kelurahan;
        data["kecamatan"] = this.kecamatan;
        data["postCode"] = this.postCode;
        data["country"] = this.country;
        return data; 
    }
}

export interface IGetUpdateAddressInputDto {
    psCode: string;
    refID: number;
    addrType: string;
    address: string;
    city: string;
    kelurahan: string;
    kecamatan: string;
    postCode: string;
    country: string;
}

export class GetUpdateBankAccountInputDto implements IGetUpdateBankAccountInputDto {
    psCode: string;
    refID: number;
    bankCode: string;
    accNo: string;
    accName: string;

    constructor(data?: IGetUpdateBankAccountInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.psCode = data["psCode"];
            this.refID = data["refID"];
            this.bankCode = data["bankCode"];
            this.accNo = data["accNo"];
            this.accName = data["accName"];
        }
    }

    static fromJS(data: any): GetUpdateBankAccountInputDto {
        let result = new GetUpdateBankAccountInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["psCode"] = this.psCode;
        data["refID"] = this.refID;
        data["bankCode"] = this.bankCode;
        data["accNo"] = this.accNo;
        data["accName"] = this.accName;
        return data; 
    }
}

export interface IGetUpdateBankAccountInputDto {
    psCode: string;
    refID: number;
    bankCode: string;
    accNo: string;
    accName: string;
}

export class UploadBasePriceInputDto implements IUploadBasePriceInputDto {
    projectCode: string;
    categoryName: string;
    basePrices: BasePrice[];

    constructor(data?: IUploadBasePriceInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.projectCode = data["projectCode"];
            this.categoryName = data["categoryName"];
            if (data["basePrices"] && data["basePrices"].constructor === Array) {
                this.basePrices = [];
                for (let item of data["basePrices"])
                    this.basePrices.push(BasePrice.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UploadBasePriceInputDto {
        let result = new UploadBasePriceInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["projectCode"] = this.projectCode;
        data["categoryName"] = this.categoryName;
        if (this.basePrices && this.basePrices.constructor === Array) {
            data["basePrices"] = [];
            for (let item of this.basePrices)
                data["basePrices"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUploadBasePriceInputDto {
    projectCode: string;
    categoryName: string;
    basePrices: BasePrice[];
}

export class BasePrice implements IBasePrice {
    unitCode: string;
    unitNo: string;
    unitBasePrice: number;

    constructor(data?: IBasePrice) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.unitCode = data["unitCode"];
            this.unitNo = data["unitNo"];
            this.unitBasePrice = data["unitBasePrice"];
        }
    }

    static fromJS(data: any): BasePrice {
        let result = new BasePrice();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["unitCode"] = this.unitCode;
        data["unitNo"] = this.unitNo;
        data["unitBasePrice"] = this.unitBasePrice;
        return data; 
    }
}

export interface IBasePrice {
    unitCode: string;
    unitNo: string;
    unitBasePrice: number;
}

export class PagedResultDtoOfGetAllBasePriceListDto implements IPagedResultDtoOfGetAllBasePriceListDto {
    totalCount: number;
    items: GetAllBasePriceListDto[];

    constructor(data?: IPagedResultDtoOfGetAllBasePriceListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetAllBasePriceListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfGetAllBasePriceListDto {
        let result = new PagedResultDtoOfGetAllBasePriceListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfGetAllBasePriceListDto {
    totalCount: number;
    items: GetAllBasePriceListDto[];
}

export class GetAllBasePriceListDto implements IGetAllBasePriceListDto {
    basePriceID: number;
    projectCode: string;
    roadCode: string;
    unitCode: string;
    unitNo: string;
    unitBasePrice: number;

    constructor(data?: IGetAllBasePriceListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.basePriceID = data["basePriceID"];
            this.projectCode = data["projectCode"];
            this.roadCode = data["roadCode"];
            this.unitCode = data["unitCode"];
            this.unitNo = data["unitNo"];
            this.unitBasePrice = data["unitBasePrice"];
        }
    }

    static fromJS(data: any): GetAllBasePriceListDto {
        let result = new GetAllBasePriceListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["basePriceID"] = this.basePriceID;
        data["projectCode"] = this.projectCode;
        data["roadCode"] = this.roadCode;
        data["unitCode"] = this.unitCode;
        data["unitNo"] = this.unitNo;
        data["unitBasePrice"] = this.unitBasePrice;
        return data; 
    }
}

export interface IGetAllBasePriceListDto {
    basePriceID: number;
    projectCode: string;
    roadCode: string;
    unitCode: string;
    unitNo: string;
    unitBasePrice: number;
}

export class CreateOrUpdateTrCompanyListDto implements ICreateOrUpdateTrCompanyListDto {
    psCode: string;
    refID: number;
    coName: string;
    coAddress: string;
    coCity: string;
    coPostCode: string;
    coCountry: string;
    coType: string;
    jobTitle: string;

    constructor(data?: ICreateOrUpdateTrCompanyListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.psCode = data["psCode"];
            this.refID = data["refID"];
            this.coName = data["coName"];
            this.coAddress = data["coAddress"];
            this.coCity = data["coCity"];
            this.coPostCode = data["coPostCode"];
            this.coCountry = data["coCountry"];
            this.coType = data["coType"];
            this.jobTitle = data["jobTitle"];
        }
    }

    static fromJS(data: any): CreateOrUpdateTrCompanyListDto {
        let result = new CreateOrUpdateTrCompanyListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["psCode"] = this.psCode;
        data["refID"] = this.refID;
        data["coName"] = this.coName;
        data["coAddress"] = this.coAddress;
        data["coCity"] = this.coCity;
        data["coPostCode"] = this.coPostCode;
        data["coCountry"] = this.coCountry;
        data["coType"] = this.coType;
        data["jobTitle"] = this.jobTitle;
        return data; 
    }
}

export interface ICreateOrUpdateTrCompanyListDto {
    psCode: string;
    refID: number;
    coName: string;
    coAddress: string;
    coCity: string;
    coPostCode: string;
    coCountry: string;
    coType: string;
    jobTitle: string;
}

export class GetTasklistDealCloserByProjectListDto implements IGetTasklistDealCloserByProjectListDto {
    soldUnitId: number;
    projectName: string;
    memberCode: string;
    propCode: string;
    devCode: string;
    bookingCode: string;
    clusterName: string;
    unitCode: string;
    unitNo: string;
    status: string;

    constructor(data?: IGetTasklistDealCloserByProjectListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.soldUnitId = data["soldUnitId"];
            this.projectName = data["projectName"];
            this.memberCode = data["memberCode"];
            this.propCode = data["propCode"];
            this.devCode = data["devCode"];
            this.bookingCode = data["bookingCode"];
            this.clusterName = data["clusterName"];
            this.unitCode = data["unitCode"];
            this.unitNo = data["unitNo"];
            this.status = data["status"];
        }
    }

    static fromJS(data: any): GetTasklistDealCloserByProjectListDto {
        let result = new GetTasklistDealCloserByProjectListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["soldUnitId"] = this.soldUnitId;
        data["projectName"] = this.projectName;
        data["memberCode"] = this.memberCode;
        data["propCode"] = this.propCode;
        data["devCode"] = this.devCode;
        data["bookingCode"] = this.bookingCode;
        data["clusterName"] = this.clusterName;
        data["unitCode"] = this.unitCode;
        data["unitNo"] = this.unitNo;
        data["status"] = this.status;
        return data; 
    }
}

export interface IGetTasklistDealCloserByProjectListDto {
    soldUnitId: number;
    projectName: string;
    memberCode: string;
    propCode: string;
    devCode: string;
    bookingCode: string;
    clusterName: string;
    unitCode: string;
    unitNo: string;
    status: string;
}

export class GetMemberFromPersonalListDto implements IGetMemberFromPersonalListDto {
    psCode: string;
    memberCode: string;
    memberName: string;

    constructor(data?: IGetMemberFromPersonalListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.psCode = data["psCode"];
            this.memberCode = data["memberCode"];
            this.memberName = data["memberName"];
        }
    }

    static fromJS(data: any): GetMemberFromPersonalListDto {
        let result = new GetMemberFromPersonalListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["psCode"] = this.psCode;
        data["memberCode"] = this.memberCode;
        data["memberName"] = this.memberName;
        return data; 
    }
}

export interface IGetMemberFromPersonalListDto {
    psCode: string;
    memberCode: string;
    memberName: string;
}

export class MemberFromPersonalInputDto implements IMemberFromPersonalInputDto {
    bookNo: string;
    memberCode: string;
    reason: string;
    devCode: string;
    entityCode: string;
    developerSchemaID: number;

    constructor(data?: IMemberFromPersonalInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.bookNo = data["bookNo"];
            this.memberCode = data["memberCode"];
            this.reason = data["reason"];
            this.devCode = data["devCode"];
            this.entityCode = data["entityCode"];
            this.developerSchemaID = data["developerSchemaID"];
        }
    }

    static fromJS(data: any): MemberFromPersonalInputDto {
        let result = new MemberFromPersonalInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bookNo"] = this.bookNo;
        data["memberCode"] = this.memberCode;
        data["reason"] = this.reason;
        data["devCode"] = this.devCode;
        data["entityCode"] = this.entityCode;
        data["developerSchemaID"] = this.developerSchemaID;
        return data; 
    }
}

export interface IMemberFromPersonalInputDto {
    bookNo: string;
    memberCode: string;
    reason: string;
    devCode: string;
    entityCode: string;
    developerSchemaID: number;
}

export class GetDataEditDealCloserListDto implements IGetDataEditDealCloserListDto {
    propCode: string;
    projectName: string;
    devCode: string;
    bookingCode: string;
    unitCode: string;
    unitNo: string;
    unitPrice: number;
    termRemarks: string;
    ppjbDate: moment.Moment;
    memberCode: string;
    name: string;
    changeDealClosureReason: string;
    developerSchemaId: number;
    entityCode: string;

    constructor(data?: IGetDataEditDealCloserListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.propCode = data["propCode"];
            this.projectName = data["projectName"];
            this.devCode = data["devCode"];
            this.bookingCode = data["bookingCode"];
            this.unitCode = data["unitCode"];
            this.unitNo = data["unitNo"];
            this.unitPrice = data["unitPrice"];
            this.termRemarks = data["termRemarks"];
            this.ppjbDate = data["ppjbDate"] ? moment(data["ppjbDate"].toString()) : <any>undefined;
            this.memberCode = data["memberCode"];
            this.name = data["name"];
            this.changeDealClosureReason = data["changeDealClosureReason"];
            this.developerSchemaId = data["developerSchemaId"];
            this.entityCode = data["entityCode"];
        }
    }

    static fromJS(data: any): GetDataEditDealCloserListDto {
        let result = new GetDataEditDealCloserListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["propCode"] = this.propCode;
        data["projectName"] = this.projectName;
        data["devCode"] = this.devCode;
        data["bookingCode"] = this.bookingCode;
        data["unitCode"] = this.unitCode;
        data["unitNo"] = this.unitNo;
        data["unitPrice"] = this.unitPrice;
        data["termRemarks"] = this.termRemarks;
        data["ppjbDate"] = this.ppjbDate ? this.ppjbDate.toISOString() : <any>undefined;
        data["memberCode"] = this.memberCode;
        data["name"] = this.name;
        data["changeDealClosureReason"] = this.changeDealClosureReason;
        data["developerSchemaId"] = this.developerSchemaId;
        data["entityCode"] = this.entityCode;
        return data; 
    }
}

export interface IGetDataEditDealCloserListDto {
    propCode: string;
    projectName: string;
    devCode: string;
    bookingCode: string;
    unitCode: string;
    unitNo: string;
    unitPrice: number;
    termRemarks: string;
    ppjbDate: moment.Moment;
    memberCode: string;
    name: string;
    changeDealClosureReason: string;
    developerSchemaId: number;
    entityCode: string;
}

export class UpdateDocumentDto implements IUpdateDocumentDto {
    psCode: string;
    documentType: string;
    documentBinary: string;
    documentBinaryNew: string;

    constructor(data?: IUpdateDocumentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.psCode = data["psCode"];
            this.documentType = data["documentType"];
            this.documentBinary = data["documentBinary"];
            this.documentBinaryNew = data["documentBinaryNew"];
        }
    }

    static fromJS(data: any): UpdateDocumentDto {
        let result = new UpdateDocumentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["psCode"] = this.psCode;
        data["documentType"] = this.documentType;
        data["documentBinary"] = this.documentBinary;
        data["documentBinaryNew"] = this.documentBinaryNew;
        return data; 
    }
}

export interface IUpdateDocumentDto {
    psCode: string;
    documentType: string;
    documentBinary: string;
    documentBinaryNew: string;
}

export class GetUpdateEmailInputDto implements IGetUpdateEmailInputDto {
    entityCode: string;
    psCode: string;
    refID: number;
    email: string;

    constructor(data?: IGetUpdateEmailInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.entityCode = data["entityCode"];
            this.psCode = data["psCode"];
            this.refID = data["refID"];
            this.email = data["email"];
        }
    }

    static fromJS(data: any): GetUpdateEmailInputDto {
        let result = new GetUpdateEmailInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["entityCode"] = this.entityCode;
        data["psCode"] = this.psCode;
        data["refID"] = this.refID;
        data["email"] = this.email;
        return data; 
    }
}

export interface IGetUpdateEmailInputDto {
    entityCode: string;
    psCode: string;
    refID: number;
    email: string;
}

export class UpdateTrFamilyListDto implements IUpdateTrFamilyListDto {
    psCode: string;
    refID: number;
    familyName: string;
    familyStatus: string;
    birthDate: moment.Moment;
    occID: string;

    constructor(data?: IUpdateTrFamilyListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.psCode = data["psCode"];
            this.refID = data["refID"];
            this.familyName = data["familyName"];
            this.familyStatus = data["familyStatus"];
            this.birthDate = data["birthDate"] ? moment(data["birthDate"].toString()) : <any>undefined;
            this.occID = data["occID"];
        }
    }

    static fromJS(data: any): UpdateTrFamilyListDto {
        let result = new UpdateTrFamilyListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["psCode"] = this.psCode;
        data["refID"] = this.refID;
        data["familyName"] = this.familyName;
        data["familyStatus"] = this.familyStatus;
        data["birthDate"] = this.birthDate ? this.birthDate.toISOString() : <any>undefined;
        data["occID"] = this.occID;
        return data; 
    }
}

export interface IUpdateTrFamilyListDto {
    psCode: string;
    refID: number;
    familyName: string;
    familyStatus: string;
    birthDate: moment.Moment;
    occID: string;
}

export class UpdateTrIDInputDto implements IUpdateTrIDInputDto {
    psCode: string;
    refID: number;
    idType: string;
    idNo: string;
    expiredDate: moment.Moment;

    constructor(data?: IUpdateTrIDInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.psCode = data["psCode"];
            this.refID = data["refID"];
            this.idType = data["idType"];
            this.idNo = data["idNo"];
            this.expiredDate = data["expiredDate"] ? moment(data["expiredDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): UpdateTrIDInputDto {
        let result = new UpdateTrIDInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["psCode"] = this.psCode;
        data["refID"] = this.refID;
        data["idType"] = this.idType;
        data["idNo"] = this.idNo;
        data["expiredDate"] = this.expiredDate ? this.expiredDate.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IUpdateTrIDInputDto {
    psCode: string;
    refID: number;
    idType: string;
    idNo: string;
    expiredDate: moment.Moment;
}

export class UpdateTrJKeyPeopleInputDto implements IUpdateTrJKeyPeopleInputDto {
    id: number;
    psCode: string;
    refID: number;
    keyPeopleID: number;
    keyPeopleName: string;
    keyPeoplePSCode: string;

    constructor(data?: IUpdateTrJKeyPeopleInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.psCode = data["psCode"];
            this.refID = data["refID"];
            this.keyPeopleID = data["keyPeopleID"];
            this.keyPeopleName = data["keyPeopleName"];
            this.keyPeoplePSCode = data["keyPeoplePSCode"];
        }
    }

    static fromJS(data: any): UpdateTrJKeyPeopleInputDto {
        let result = new UpdateTrJKeyPeopleInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["psCode"] = this.psCode;
        data["refID"] = this.refID;
        data["keyPeopleID"] = this.keyPeopleID;
        data["keyPeopleName"] = this.keyPeopleName;
        data["keyPeoplePSCode"] = this.keyPeoplePSCode;
        return data; 
    }
}

export interface IUpdateTrJKeyPeopleInputDto {
    id: number;
    psCode: string;
    refID: number;
    keyPeopleID: number;
    keyPeopleName: string;
    keyPeoplePSCode: string;
}

export class GetUpdateTrPhoneInputDto implements IGetUpdateTrPhoneInputDto {
    entityCode: string;
    psCode: string;
    refID: number;
    phoneType: string;
    number: string;

    constructor(data?: IGetUpdateTrPhoneInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.entityCode = data["entityCode"];
            this.psCode = data["psCode"];
            this.refID = data["refID"];
            this.phoneType = data["phoneType"];
            this.number = data["number"];
        }
    }

    static fromJS(data: any): GetUpdateTrPhoneInputDto {
        let result = new GetUpdateTrPhoneInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["entityCode"] = this.entityCode;
        data["psCode"] = this.psCode;
        data["refID"] = this.refID;
        data["phoneType"] = this.phoneType;
        data["number"] = this.number;
        return data; 
    }
}

export interface IGetUpdateTrPhoneInputDto {
    entityCode: string;
    psCode: string;
    refID: number;
    phoneType: string;
    number: string;
}

export class UiCustomizationSettingsEditDto implements IUiCustomizationSettingsEditDto {
    layout: UiCustomizationLayoutSettingsEditDto;
    header: UiCustomizationHeaderSettingsEditDto;
    menu: UiCustomizationMenuSettingsEditDto;
    footer: UiCustomizationFooterSettingsEditDto;

    constructor(data?: IUiCustomizationSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.layout = data["layout"] ? UiCustomizationLayoutSettingsEditDto.fromJS(data["layout"]) : <any>undefined;
            this.header = data["header"] ? UiCustomizationHeaderSettingsEditDto.fromJS(data["header"]) : <any>undefined;
            this.menu = data["menu"] ? UiCustomizationMenuSettingsEditDto.fromJS(data["menu"]) : <any>undefined;
            this.footer = data["footer"] ? UiCustomizationFooterSettingsEditDto.fromJS(data["footer"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UiCustomizationSettingsEditDto {
        let result = new UiCustomizationSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["layout"] = this.layout ? this.layout.toJSON() : <any>undefined;
        data["header"] = this.header ? this.header.toJSON() : <any>undefined;
        data["menu"] = this.menu ? this.menu.toJSON() : <any>undefined;
        data["footer"] = this.footer ? this.footer.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IUiCustomizationSettingsEditDto {
    layout: UiCustomizationLayoutSettingsEditDto;
    header: UiCustomizationHeaderSettingsEditDto;
    menu: UiCustomizationMenuSettingsEditDto;
    footer: UiCustomizationFooterSettingsEditDto;
}

export class UiCustomizationLayoutSettingsEditDto implements IUiCustomizationLayoutSettingsEditDto {
    layoutType: string;
    pageLoader: string;
    contentSkin: string;

    constructor(data?: IUiCustomizationLayoutSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.layoutType = data["layoutType"];
            this.pageLoader = data["pageLoader"];
            this.contentSkin = data["contentSkin"];
        }
    }

    static fromJS(data: any): UiCustomizationLayoutSettingsEditDto {
        let result = new UiCustomizationLayoutSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["layoutType"] = this.layoutType;
        data["pageLoader"] = this.pageLoader;
        data["contentSkin"] = this.contentSkin;
        return data; 
    }
}

export interface IUiCustomizationLayoutSettingsEditDto {
    layoutType: string;
    pageLoader: string;
    contentSkin: string;
}

export class UiCustomizationHeaderSettingsEditDto implements IUiCustomizationHeaderSettingsEditDto {
    desktopFixedHeader: boolean;
    desktopMinimizeMode: string;
    mobileFixedHeader: boolean;
    dropdownSkinDesktop: string;
    displaySubmenuArrowDesktop: boolean;
    dropdownSkin: string;

    constructor(data?: IUiCustomizationHeaderSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.desktopFixedHeader = data["desktopFixedHeader"];
            this.desktopMinimizeMode = data["desktopMinimizeMode"];
            this.mobileFixedHeader = data["mobileFixedHeader"];
            this.dropdownSkinDesktop = data["dropdownSkinDesktop"];
            this.displaySubmenuArrowDesktop = data["displaySubmenuArrowDesktop"];
            this.dropdownSkin = data["dropdownSkin"];
        }
    }

    static fromJS(data: any): UiCustomizationHeaderSettingsEditDto {
        let result = new UiCustomizationHeaderSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["desktopFixedHeader"] = this.desktopFixedHeader;
        data["desktopMinimizeMode"] = this.desktopMinimizeMode;
        data["mobileFixedHeader"] = this.mobileFixedHeader;
        data["dropdownSkinDesktop"] = this.dropdownSkinDesktop;
        data["displaySubmenuArrowDesktop"] = this.displaySubmenuArrowDesktop;
        data["dropdownSkin"] = this.dropdownSkin;
        return data; 
    }
}

export interface IUiCustomizationHeaderSettingsEditDto {
    desktopFixedHeader: boolean;
    desktopMinimizeMode: string;
    mobileFixedHeader: boolean;
    dropdownSkinDesktop: string;
    displaySubmenuArrowDesktop: boolean;
    dropdownSkin: string;
}

export class UiCustomizationMenuSettingsEditDto implements IUiCustomizationMenuSettingsEditDto {
    position: string;
    asideSkin: string;
    fixedAside: boolean;
    allowAsideMinimizing: boolean;
    defaultMinimizedAside: boolean;
    allowAsideHiding: boolean;
    defaultHiddenAside: boolean;
    submenuToggle: string;
    dropdownSubmenuSkin: string;
    dropdownSubmenuArrow: boolean;

    constructor(data?: IUiCustomizationMenuSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.position = data["position"];
            this.asideSkin = data["asideSkin"];
            this.fixedAside = data["fixedAside"];
            this.allowAsideMinimizing = data["allowAsideMinimizing"];
            this.defaultMinimizedAside = data["defaultMinimizedAside"];
            this.allowAsideHiding = data["allowAsideHiding"];
            this.defaultHiddenAside = data["defaultHiddenAside"];
            this.submenuToggle = data["submenuToggle"];
            this.dropdownSubmenuSkin = data["dropdownSubmenuSkin"];
            this.dropdownSubmenuArrow = data["dropdownSubmenuArrow"];
        }
    }

    static fromJS(data: any): UiCustomizationMenuSettingsEditDto {
        let result = new UiCustomizationMenuSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["position"] = this.position;
        data["asideSkin"] = this.asideSkin;
        data["fixedAside"] = this.fixedAside;
        data["allowAsideMinimizing"] = this.allowAsideMinimizing;
        data["defaultMinimizedAside"] = this.defaultMinimizedAside;
        data["allowAsideHiding"] = this.allowAsideHiding;
        data["defaultHiddenAside"] = this.defaultHiddenAside;
        data["submenuToggle"] = this.submenuToggle;
        data["dropdownSubmenuSkin"] = this.dropdownSubmenuSkin;
        data["dropdownSubmenuArrow"] = this.dropdownSubmenuArrow;
        return data; 
    }
}

export interface IUiCustomizationMenuSettingsEditDto {
    position: string;
    asideSkin: string;
    fixedAside: boolean;
    allowAsideMinimizing: boolean;
    defaultMinimizedAside: boolean;
    allowAsideHiding: boolean;
    defaultHiddenAside: boolean;
    submenuToggle: string;
    dropdownSubmenuSkin: string;
    dropdownSubmenuArrow: boolean;
}

export class UiCustomizationFooterSettingsEditDto implements IUiCustomizationFooterSettingsEditDto {
    fixedFooter: boolean;

    constructor(data?: IUiCustomizationFooterSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.fixedFooter = data["fixedFooter"];
        }
    }

    static fromJS(data: any): UiCustomizationFooterSettingsEditDto {
        let result = new UiCustomizationFooterSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fixedFooter"] = this.fixedFooter;
        return data; 
    }
}

export interface IUiCustomizationFooterSettingsEditDto {
    fixedFooter: boolean;
}

export class PagedResultDtoOfUserListDto implements IPagedResultDtoOfUserListDto {
    totalCount: number;
    items: UserListDto[];

    constructor(data?: IPagedResultDtoOfUserListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(UserListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfUserListDto {
        let result = new PagedResultDtoOfUserListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfUserListDto {
    totalCount: number;
    items: UserListDto[];
}

export class UserListDto implements IUserListDto {
    name: string;
    surname: string;
    userName: string;
    emailAddress: string;
    phoneNumber: string;
    profilePictureId: string;
    isEmailConfirmed: boolean;
    roles: UserListRoleDto[];
    lastLoginTime: moment.Moment;
    isActive: boolean;
    creationTime: moment.Moment;
    id: number;

    constructor(data?: IUserListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.surname = data["surname"];
            this.userName = data["userName"];
            this.emailAddress = data["emailAddress"];
            this.phoneNumber = data["phoneNumber"];
            this.profilePictureId = data["profilePictureId"];
            this.isEmailConfirmed = data["isEmailConfirmed"];
            if (data["roles"] && data["roles"].constructor === Array) {
                this.roles = [];
                for (let item of data["roles"])
                    this.roles.push(UserListRoleDto.fromJS(item));
            }
            this.lastLoginTime = data["lastLoginTime"] ? moment(data["lastLoginTime"].toString()) : <any>undefined;
            this.isActive = data["isActive"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): UserListDto {
        let result = new UserListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["userName"] = this.userName;
        data["emailAddress"] = this.emailAddress;
        data["phoneNumber"] = this.phoneNumber;
        data["profilePictureId"] = this.profilePictureId;
        data["isEmailConfirmed"] = this.isEmailConfirmed;
        if (this.roles && this.roles.constructor === Array) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item.toJSON());
        }
        data["lastLoginTime"] = this.lastLoginTime ? this.lastLoginTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface IUserListDto {
    name: string;
    surname: string;
    userName: string;
    emailAddress: string;
    phoneNumber: string;
    profilePictureId: string;
    isEmailConfirmed: boolean;
    roles: UserListRoleDto[];
    lastLoginTime: moment.Moment;
    isActive: boolean;
    creationTime: moment.Moment;
    id: number;
}

export class UserListRoleDto implements IUserListRoleDto {
    roleId: number;
    roleName: string;

    constructor(data?: IUserListRoleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.roleId = data["roleId"];
            this.roleName = data["roleName"];
        }
    }

    static fromJS(data: any): UserListRoleDto {
        let result = new UserListRoleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roleId"] = this.roleId;
        data["roleName"] = this.roleName;
        return data; 
    }
}

export interface IUserListRoleDto {
    roleId: number;
    roleName: string;
}

export class GetUserForEditOutput implements IGetUserForEditOutput {
    profilePictureId: string;
    user: UserEditDto;
    roles: UserRoleDto[];
    allOrganizationUnits: OrganizationUnitDto[];
    memberedOrganizationUnits: string[];

    constructor(data?: IGetUserForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.profilePictureId = data["profilePictureId"];
            this.user = data["user"] ? UserEditDto.fromJS(data["user"]) : <any>undefined;
            if (data["roles"] && data["roles"].constructor === Array) {
                this.roles = [];
                for (let item of data["roles"])
                    this.roles.push(UserRoleDto.fromJS(item));
            }
            if (data["allOrganizationUnits"] && data["allOrganizationUnits"].constructor === Array) {
                this.allOrganizationUnits = [];
                for (let item of data["allOrganizationUnits"])
                    this.allOrganizationUnits.push(OrganizationUnitDto.fromJS(item));
            }
            if (data["memberedOrganizationUnits"] && data["memberedOrganizationUnits"].constructor === Array) {
                this.memberedOrganizationUnits = [];
                for (let item of data["memberedOrganizationUnits"])
                    this.memberedOrganizationUnits.push(item);
            }
        }
    }

    static fromJS(data: any): GetUserForEditOutput {
        let result = new GetUserForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["profilePictureId"] = this.profilePictureId;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        if (this.roles && this.roles.constructor === Array) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item.toJSON());
        }
        if (this.allOrganizationUnits && this.allOrganizationUnits.constructor === Array) {
            data["allOrganizationUnits"] = [];
            for (let item of this.allOrganizationUnits)
                data["allOrganizationUnits"].push(item.toJSON());
        }
        if (this.memberedOrganizationUnits && this.memberedOrganizationUnits.constructor === Array) {
            data["memberedOrganizationUnits"] = [];
            for (let item of this.memberedOrganizationUnits)
                data["memberedOrganizationUnits"].push(item);
        }
        return data; 
    }
}

export interface IGetUserForEditOutput {
    profilePictureId: string;
    user: UserEditDto;
    roles: UserRoleDto[];
    allOrganizationUnits: OrganizationUnitDto[];
    memberedOrganizationUnits: string[];
}

export class UserEditDto implements IUserEditDto {
    id: number;
    name: string;
    surname: string;
    userName: string;
    emailAddress: string;
    phoneNumber: string;
    password: string;
    isActive: boolean;
    shouldChangePasswordOnNextLogin: boolean;
    isTwoFactorEnabled: boolean;
    isLockoutEnabled: boolean;

    constructor(data?: IUserEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.surname = data["surname"];
            this.userName = data["userName"];
            this.emailAddress = data["emailAddress"];
            this.phoneNumber = data["phoneNumber"];
            this.password = data["password"];
            this.isActive = data["isActive"];
            this.shouldChangePasswordOnNextLogin = data["shouldChangePasswordOnNextLogin"];
            this.isTwoFactorEnabled = data["isTwoFactorEnabled"];
            this.isLockoutEnabled = data["isLockoutEnabled"];
        }
    }

    static fromJS(data: any): UserEditDto {
        let result = new UserEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["userName"] = this.userName;
        data["emailAddress"] = this.emailAddress;
        data["phoneNumber"] = this.phoneNumber;
        data["password"] = this.password;
        data["isActive"] = this.isActive;
        data["shouldChangePasswordOnNextLogin"] = this.shouldChangePasswordOnNextLogin;
        data["isTwoFactorEnabled"] = this.isTwoFactorEnabled;
        data["isLockoutEnabled"] = this.isLockoutEnabled;
        return data; 
    }
}

export interface IUserEditDto {
    id: number;
    name: string;
    surname: string;
    userName: string;
    emailAddress: string;
    phoneNumber: string;
    password: string;
    isActive: boolean;
    shouldChangePasswordOnNextLogin: boolean;
    isTwoFactorEnabled: boolean;
    isLockoutEnabled: boolean;
}

export class UserRoleDto implements IUserRoleDto {
    roleId: number;
    roleName: string;
    roleDisplayName: string;
    isAssigned: boolean;

    constructor(data?: IUserRoleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.roleId = data["roleId"];
            this.roleName = data["roleName"];
            this.roleDisplayName = data["roleDisplayName"];
            this.isAssigned = data["isAssigned"];
        }
    }

    static fromJS(data: any): UserRoleDto {
        let result = new UserRoleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roleId"] = this.roleId;
        data["roleName"] = this.roleName;
        data["roleDisplayName"] = this.roleDisplayName;
        data["isAssigned"] = this.isAssigned;
        return data; 
    }
}

export interface IUserRoleDto {
    roleId: number;
    roleName: string;
    roleDisplayName: string;
    isAssigned: boolean;
}

export class GetUserPermissionsForEditOutput implements IGetUserPermissionsForEditOutput {
    permissions: FlatPermissionDto[];
    grantedPermissionNames: string[];

    constructor(data?: IGetUserPermissionsForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["permissions"] && data["permissions"].constructor === Array) {
                this.permissions = [];
                for (let item of data["permissions"])
                    this.permissions.push(FlatPermissionDto.fromJS(item));
            }
            if (data["grantedPermissionNames"] && data["grantedPermissionNames"].constructor === Array) {
                this.grantedPermissionNames = [];
                for (let item of data["grantedPermissionNames"])
                    this.grantedPermissionNames.push(item);
            }
        }
    }

    static fromJS(data: any): GetUserPermissionsForEditOutput {
        let result = new GetUserPermissionsForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.permissions && this.permissions.constructor === Array) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item.toJSON());
        }
        if (this.grantedPermissionNames && this.grantedPermissionNames.constructor === Array) {
            data["grantedPermissionNames"] = [];
            for (let item of this.grantedPermissionNames)
                data["grantedPermissionNames"].push(item);
        }
        return data; 
    }
}

export interface IGetUserPermissionsForEditOutput {
    permissions: FlatPermissionDto[];
    grantedPermissionNames: string[];
}

export class EntityDtoOfInt64 implements IEntityDtoOfInt64 {
    id: number;

    constructor(data?: IEntityDtoOfInt64) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
        }
    }

    static fromJS(data: any): EntityDtoOfInt64 {
        let result = new EntityDtoOfInt64();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }
}

export interface IEntityDtoOfInt64 {
    id: number;
}

export class UpdateUserPermissionsInput implements IUpdateUserPermissionsInput {
    id: number;
    grantedPermissionNames: string[] = [];

    constructor(data?: IUpdateUserPermissionsInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            if (data["grantedPermissionNames"] && data["grantedPermissionNames"].constructor === Array) {
                this.grantedPermissionNames = [];
                for (let item of data["grantedPermissionNames"])
                    this.grantedPermissionNames.push(item);
            }
        }
    }

    static fromJS(data: any): UpdateUserPermissionsInput {
        let result = new UpdateUserPermissionsInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (this.grantedPermissionNames && this.grantedPermissionNames.constructor === Array) {
            data["grantedPermissionNames"] = [];
            for (let item of this.grantedPermissionNames)
                data["grantedPermissionNames"].push(item);
        }
        return data; 
    }
}

export interface IUpdateUserPermissionsInput {
    id: number;
    grantedPermissionNames: string[];
}

export class CreateOrUpdateUserInput implements ICreateOrUpdateUserInput {
    user: UserEditDto = new UserEditDto();
    assignedRoleNames: string[] = [];
    sendActivationEmail: boolean;
    setRandomPassword: boolean;
    organizationUnits: number[];

    constructor(data?: ICreateOrUpdateUserInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.user = data["user"] ? UserEditDto.fromJS(data["user"]) : new UserEditDto();
            if (data["assignedRoleNames"] && data["assignedRoleNames"].constructor === Array) {
                this.assignedRoleNames = [];
                for (let item of data["assignedRoleNames"])
                    this.assignedRoleNames.push(item);
            }
            this.sendActivationEmail = data["sendActivationEmail"];
            this.setRandomPassword = data["setRandomPassword"];
            if (data["organizationUnits"] && data["organizationUnits"].constructor === Array) {
                this.organizationUnits = [];
                for (let item of data["organizationUnits"])
                    this.organizationUnits.push(item);
            }
        }
    }

    static fromJS(data: any): CreateOrUpdateUserInput {
        let result = new CreateOrUpdateUserInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        if (this.assignedRoleNames && this.assignedRoleNames.constructor === Array) {
            data["assignedRoleNames"] = [];
            for (let item of this.assignedRoleNames)
                data["assignedRoleNames"].push(item);
        }
        data["sendActivationEmail"] = this.sendActivationEmail;
        data["setRandomPassword"] = this.setRandomPassword;
        if (this.organizationUnits && this.organizationUnits.constructor === Array) {
            data["organizationUnits"] = [];
            for (let item of this.organizationUnits)
                data["organizationUnits"].push(item);
        }
        return data; 
    }
}

export interface ICreateOrUpdateUserInput {
    user: UserEditDto;
    assignedRoleNames: string[];
    sendActivationEmail: boolean;
    setRandomPassword: boolean;
    organizationUnits: number[];
}

export class LinkToUserInput implements ILinkToUserInput {
    tenancyName: string;
    usernameOrEmailAddress: string;
    password: string;

    constructor(data?: ILinkToUserInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenancyName = data["tenancyName"];
            this.usernameOrEmailAddress = data["usernameOrEmailAddress"];
            this.password = data["password"];
        }
    }

    static fromJS(data: any): LinkToUserInput {
        let result = new LinkToUserInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["usernameOrEmailAddress"] = this.usernameOrEmailAddress;
        data["password"] = this.password;
        return data; 
    }
}

export interface ILinkToUserInput {
    tenancyName: string;
    usernameOrEmailAddress: string;
    password: string;
}

export class PagedResultDtoOfLinkedUserDto implements IPagedResultDtoOfLinkedUserDto {
    totalCount: number;
    items: LinkedUserDto[];

    constructor(data?: IPagedResultDtoOfLinkedUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(LinkedUserDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfLinkedUserDto {
        let result = new PagedResultDtoOfLinkedUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfLinkedUserDto {
    totalCount: number;
    items: LinkedUserDto[];
}

export class LinkedUserDto implements ILinkedUserDto {
    tenantId: number;
    tenancyName: string;
    username: string;
    lastLoginTime: moment.Moment;
    id: number;

    constructor(data?: ILinkedUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.tenancyName = data["tenancyName"];
            this.username = data["username"];
            this.lastLoginTime = data["lastLoginTime"] ? moment(data["lastLoginTime"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): LinkedUserDto {
        let result = new LinkedUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["tenancyName"] = this.tenancyName;
        data["username"] = this.username;
        data["lastLoginTime"] = this.lastLoginTime ? this.lastLoginTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface ILinkedUserDto {
    tenantId: number;
    tenancyName: string;
    username: string;
    lastLoginTime: moment.Moment;
    id: number;
}

export class ListResultDtoOfLinkedUserDto implements IListResultDtoOfLinkedUserDto {
    items: LinkedUserDto[];

    constructor(data?: IListResultDtoOfLinkedUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(LinkedUserDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfLinkedUserDto {
        let result = new ListResultDtoOfLinkedUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfLinkedUserDto {
    items: LinkedUserDto[];
}

export class UnlinkUserInput implements IUnlinkUserInput {
    tenantId: number;
    userId: number;

    constructor(data?: IUnlinkUserInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.userId = data["userId"];
        }
    }

    static fromJS(data: any): UnlinkUserInput {
        let result = new UnlinkUserInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["userId"] = this.userId;
        return data; 
    }
}

export interface IUnlinkUserInput {
    tenantId: number;
    userId: number;
}

export class ListResultDtoOfUserLoginAttemptDto implements IListResultDtoOfUserLoginAttemptDto {
    items: UserLoginAttemptDto[];

    constructor(data?: IListResultDtoOfUserLoginAttemptDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(UserLoginAttemptDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfUserLoginAttemptDto {
        let result = new ListResultDtoOfUserLoginAttemptDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfUserLoginAttemptDto {
    items: UserLoginAttemptDto[];
}

export class UserLoginAttemptDto implements IUserLoginAttemptDto {
    tenancyName: string;
    userNameOrEmail: string;
    clientIpAddress: string;
    clientName: string;
    browserInfo: string;
    result: string;
    creationTime: moment.Moment;

    constructor(data?: IUserLoginAttemptDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenancyName = data["tenancyName"];
            this.userNameOrEmail = data["userNameOrEmail"];
            this.clientIpAddress = data["clientIpAddress"];
            this.clientName = data["clientName"];
            this.browserInfo = data["browserInfo"];
            this.result = data["result"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): UserLoginAttemptDto {
        let result = new UserLoginAttemptDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["userNameOrEmail"] = this.userNameOrEmail;
        data["clientIpAddress"] = this.clientIpAddress;
        data["clientName"] = this.clientName;
        data["browserInfo"] = this.browserInfo;
        data["result"] = this.result;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IUserLoginAttemptDto {
    tenancyName: string;
    userNameOrEmail: string;
    clientIpAddress: string;
    clientName: string;
    browserInfo: string;
    result: string;
    creationTime: moment.Moment;
}

export class GetLatestWebLogsOutput implements IGetLatestWebLogsOutput {
    latestWebLogLines: string[];

    constructor(data?: IGetLatestWebLogsOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["latestWebLogLines"] && data["latestWebLogLines"].constructor === Array) {
                this.latestWebLogLines = [];
                for (let item of data["latestWebLogLines"])
                    this.latestWebLogLines.push(item);
            }
        }
    }

    static fromJS(data: any): GetLatestWebLogsOutput {
        let result = new GetLatestWebLogsOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.latestWebLogLines && this.latestWebLogLines.constructor === Array) {
            data["latestWebLogLines"] = [];
            for (let item of this.latestWebLogLines)
                data["latestWebLogLines"].push(item);
        }
        return data; 
    }
}

export interface IGetLatestWebLogsOutput {
    latestWebLogLines: string[];
}

export enum IncomeStatisticsDateInterval {
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export enum IncomeStatisticsDateInterval2 {
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export enum State {
    _0 = 0, 
    _1 = 1, 
}

export enum SalesSummaryDatePeriod {
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export enum SalesSummaryDatePeriod2 {
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export enum DefaultTimezoneScope {
    _1 = 1, 
    _2 = 2, 
    _4 = 4, 
    _7 = 7, 
}

export enum IsTenantAvailableOutputState {
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export enum FriendDtoState {
    _1 = 1, 
    _2 = 2, 
}

export enum ChatMessageDtoSide {
    _1 = 1, 
    _2 = 2, 
}

export enum ChatMessageDtoReadState {
    _1 = 1, 
    _2 = 2, 
}

export enum ChatMessageDtoReceiverReadState {
    _1 = 1, 
    _2 = 2, 
}

export enum UserNotificationState {
    _0 = 0, 
    _1 = 1, 
}

export enum TenantNotificationSeverity {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
    _4 = 4, 
}

export class AdditionalData implements IAdditionalData {
    paypal: { [key: string] : string; };

    constructor(data?: IAdditionalData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["Paypal"]) {
                this.paypal = {};
                for (let key in data["Paypal"]) {
                    if (data["Paypal"].hasOwnProperty(key))
                        this.paypal[key] = data["Paypal"][key];
                }
            }
        }
    }

    static fromJS(data: any): AdditionalData {
        let result = new AdditionalData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.paypal) {
            data["Paypal"] = {};
            for (let key in this.paypal) {
                if (this.paypal.hasOwnProperty(key))
                    data["Paypal"][key] = this.paypal[key];
            }
        }
        return data; 
    }
}

export interface IAdditionalData {
    paypal: { [key: string] : string; };
}

export enum CreatePaymentDtoEditionPaymentType {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export enum CreatePaymentDtoPaymentPeriodType {
    _30 = 30, 
    _365 = 365, 
}

export enum CreatePaymentDtoSubscriptionPaymentGatewayType {
    _1 = 1, 
}

export enum ExecutePaymentDtoGateway {
    _1 = 1, 
}

export enum ExecutePaymentDtoEditionPaymentType {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export enum ExecutePaymentDtoPaymentPeriodType {
    _30 = 30, 
    _365 = 365, 
}

export enum TenantLoginInfoDtoPaymentPeriodType {
    _30 = 30, 
    _365 = 365, 
}

export enum RegisterTenantInputSubscriptionStartType {
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export enum RegisterTenantInputGateway {
    _1 = 1, 
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return Observable.throw(result);
    else
        return Observable.throw(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = function() { 
                observer.next(this.result);
                observer.complete();
            }
            reader.readAsText(blob); 
        }
    });
}